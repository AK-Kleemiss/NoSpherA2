/*
 * Rys quadrature

 Code is edited based on
 * PyQuante quantum chemistry program suite http://pyquante.sourceforge.net
 * BDF program package

 Coefficients of Chebyshev polynomials are generated based on Toru Shiozaki's
 integral project libslater
 */

#include <iostream>
#include <float.h>
#include "rys_roots.h"
#include "convenience.h"
#include "constants.h"

//#define lapack_complex_float std::complex<float>
//#define lapack_complex_double std::complex<double>
//#include "mkl_lapacke.h"
//#include "mkl_cblas.h"
#include "mkl.h"
/*
 * This code computes incomplete gamma function.  It is based on Xin
 * Wu's implementation.
 *
 *
 * List of Abbreviation(s)
 *
 * THO:
 * Gaussian-Expansion Methods for Molecular Integrals,
 * Hiroshi Taketa, Sigeru Huzinaga, and Kiyosi O-ohata,
 * Journal of the Physical Society of Japan,
 * Vol. 21, No. 11, 1966, 2313 - 2324.
 *
 */

#define SML_FLOAT64 (DBL_EPSILON * .5)
#define SML_FLOAT80 2.0e-20
#define SQRTPIE4 .8862269254527580136490837416705725913987747280611935641069038949264
#define SQRTPIE4l .8862269254527580136490837416705725913987747280611935641069038949264l
#define ERFC_bound 200

#define MXRYSROOTS 32 // > ANG_MAX*2+1 for 4c2e
#define SQRTPIE4 .8862269254527580136490837416705725913987747280611935641069038949264
#define SQRTPIE4l .8862269254527580136490837416705725913987747280611935641069038949264l

// For double precision 0.063^20 < 2**-53
#define FLOCKE_EXTRA_ORDER_FOR_DP 20
// For long double 0.063^24 < 2**-64
#define FLOCKE_EXTRA_ORDER_FOR_LP 24
#define SMALLX_LIMIT 3e-7

#include <cmath>

/*
 * Relative errors of fmt1_erfc_like are of
 *      (2*t)**(m-1) / (2m-3)!! * machine_precision * fmt_val
 * Errors of the other choice are
 *      (2m-1)!! / (2*t)**(m-1) * machine_precision * fmt_val
 * Given m, the turn-over point for t should satisfy
 *      (2m-1)!! / (2*t)**(m-1) > (2m-1)**.5
 * t0 = .5 * ((2m-1)!!/(2m-1)**.5)**(1/(m-1))
 */
double TURNOVER_POINT[] = {
    0.,
    0.,
    0.866025403784,
    1.295010032056,
    1.705493613097,
    2.106432965305,
    2.501471934009,
    2.892473348218,
    3.280525047072,
    3.666320693281,
    4.05033123037,
    4.432891808508,
    4.814249856864,
    5.194593501454,
    5.574069276051,
    5.952793645111,
    6.330860773135,
    6.708347923415,
    7.08531930745,
    7.461828891625,
    7.837922483937,
    8.213639312398,
    8.589013237349,
    8.964073695432,
    9.338846443746,
    9.713354153046,
    10.08761688545,
    10.46165248270,
    10.83547688448,
    11.20910439128,
    11.58254788331,
    11.95581900374,
    12.32892831326,
    12.70188542111,
    13.07469909673,
    13.44737736550,
    13.81992759110,
    14.19235654675,
    14.56467047710,
    14.93687515212};

/*
 * Name
 *
 * fmtpse
 *
 * Synopsis
 *
 * double fmtpse(int m, double t)
 *
 * Description
 *
 * This function evaluates the auxiliary integral,
 *
 *             _ 1           2
 *            /     2 m  -t u
 * F (t)  =   |    u    e      du,
 *  m        _/  0
 *
 * by a power series expansion
 *
 *                    _                    2                     3                _
 *           exp(-t) |       t            t                     t                  |
 * F (t)  =  ------- | 1 + ----- + --------------- + ----------------------- + ... |
 *  m          2 b   |_    b + 1   (b + 1) (b + 2)   (b + 1) (b + 2) (b + 3)      _|,
 *
 * where b = m + 1 / 2. This power series expansion converges fast, when t is less than b + 1,
 * namely t < m + 3 / 2.
 *
 * Argument(s)
 *
 * int m:
 * F_m(t), see the Description section.
 *
 * double t:
 * F_m(t), see the Description section.
 *
 * Return Value
 * double:
 * F_m(t), see the Description section.
 *
 */

/*
 * Name
 *
 * fmt
 *
 * Synopsis
 *
 * double fmt(int m, double t)
 *
 * Description
 *
 * This function evaluates the auxiliary integral, see Eq. 2.11 in THO,
 *
 *             _ 1           2
 *            /     2 m  -t u
 * F (t)  =   |    u    e      du,
 *  m        _/  0
 *
 * where m replaces ν for more convenient typesetting.
 *
 * If t is less than SML16 or equals 0, then
 *
 *              1
 * F (t)  =  -------.
 *  m        2 m + 1
 *
 * If t is less than m + 3 / 2, the auxiliary integral is evaluated by
 * a power series expansion (see fmtpse.c for details).
 *
 * Otherwise F (t) is calculated first
 *            0
 *                    1
 *                    -
 *           1 /  π  \2       _
 * F (t)  =  - | --- |  erf( /t ).
 *  0        2 \  t  /
 *
 * Then the upward recurrence relation is used for F (t) of higher m
 *                                                  m
 *
 *            (2 m - 1) F     (t) - exp( -t )
 *                       m - 1
 *  F (t)  =  -------------------------------.
 *   m                      2 t
 *
 * Argument(s)
 *
 * int m:
 * F_m(t), see the Description section.
 *
 * double t:
 * F_m(t), see the Description section.
 *
 * Return Value
 *
 * double:
 * F_m(t), see the Description section.
 *
 */
void fmt1_gamma_inc_like(double *f, double t, int m)
{
    int i;
    double b = m + 0.5;
    double bi;
    double e = .5 * exp(-t);
    double x = e;
    double s = e;
    double tol = SML_FLOAT64 * e;
    for (bi = b + 1.; x > tol; bi += 1.)
    {
        x *= t / bi;
        s += x;
    }
    f[m] = s / b;
    for (i = m; i > 0; i--)
    {
        b -= 1.;
        f[i - 1] = (e + t * f[i]) / b;
    }
}

void gamma_inc_like(double *f, double t, int m)
{
    if (t < TURNOVER_POINT[m])
    {
        fmt1_gamma_inc_like(f, t, m);
    }
    else
    {
        int i;
        double tt = sqrt(t);
        f[0] = SQRTPIE4 / tt * erf(tt);
        if (m > 0)
        {
            double e = exp(-t);
            double b = .5 / t;
            for (i = 1; i <= m; i++)
                f[i] = b * ((2 * i - 1) * f[i - 1] - e);
        }
    }
}

void fmt1_lgamma_inc_like(long double *f, long double t, int m)
{
    long double b = m + 0.5l;
    long double bi;
    long double e = .5l * expl(-t);
    long double x = e;
    long double s = e;
    long double tol = SML_FLOAT80 * e;
    int i;
    for (bi = b + 1.; x > tol; bi += 1.)
    {
        x *= t / bi;
        s += x;
    }
    f[m] = s / b;
    for (i = m; i > 0; i--)
    {
        b -= 1;
        f[i - 1] = (e + t * f[i]) / b;
    }
}

void lgamma_inc_like(long double *f, long double t, int m)
{
    if (t < TURNOVER_POINT[m])
    {
        fmt1_lgamma_inc_like(f, t, m);
    }
    else
    {
        int i;
        long double tt = sqrtl(t);
        f[0] = SQRTPIE4l / tt * erfl(tt);
        if (m > 0)
        {
            long double e = expl(-t);
            long double b = .5l / t;
            for (i = 1; i <= m; i++)
                f[i] = b * ((2 * i - 1) * f[i - 1] - e);
        }
    }
}

inline double _pow(double base, int exponent)
{
    int i;
    double result = 1;
    for (i = 1; i <= exponent; i <<= 1)
    {
        if (i & exponent)
        {
            result *= base;
        }
        base *= base;
    }
    return result;
}

inline long double _powl(long double base, int exponent)
{
    int i;
    long double result = 1.l;
    for (i = 1; i <= exponent; i <<= 1)
    {
        if (i & exponent)
        {
            result *= base;
        }
        base *= base;
    }
    return result;
}

/* This function evaluates the auxiliary integral,
 *
 *     2  _ 1           2
 *  t s  /     2 m  -t u
 * e     |    u    e      du,
 *      _/  s
 *
 * by a power series expansion
 *
 * F[m] = e^{t s^2} int_l^1 u^{2m} e^{-t u^2} du
 *      = e^{t s^2} /(2m+1) int e^{-t u^2} d u^{2m+1}
 *      = e^{t s^2} /(2m+1) [e^{-t u^2} u^{2m+1}]_l^1 + (2t)/(2m+1) int u^{2m+2} e^{-t u^2} du
 *      = e^{t s^2} /(m+.5) (.5*e^{-t} - .5*e^{-t l^2} l^{2m+1}) + t F[m+1])
 */
void fmt1_erfc_like(double *f, double t, double lower, int m)
{
    int i;
    double lower2 = lower * lower;
    double b = m + 0.5;
    double bi;
    double e = .5 * exp(-t);
    double e1 = .5 * exp(-t * lower2) * lower;
    e1 *= _pow(lower2, m);
    double x = e;
    double x1 = e1;
    double s = e - e1;
    double div = 1.;
    double delta = s;
    double tol = SML_FLOAT64 * fabs(delta);
    for (bi = b + 1.; fabs(delta) > tol; bi += 1.)
    {
        div *= t / bi;
        x1 *= lower2;
        delta = (x - x1) * div;
        s += delta;
    }
    double val = s / b;
    f[m] = val;
    for (i = m; i > 0; i--)
    {
        b -= 1.;
        e1 /= lower2;
        val = (e - e1 + t * val) / b;
        f[i - 1] = val;
    }
}
void fmt_erfc_like(double *f, double t, double lower, int m)
{
    if (lower == 0)
    {
        return gamma_inc_like(f, t, m);
    }

    int i;
    double lower2 = lower * lower;
    // F[m] < .5*sqrt(pi/t) * erfc(low*tt)
    if (t * lower2 > ERFC_bound)
    {
        for (i = 0; i <= m; i++)
        {
            f[i] = 0;
        }
        return;
    }

    if (t < TURNOVER_POINT[m])
    {
        fmt1_erfc_like(f, t, lower, m);
    }
    else
    {
        double tt = sqrt(t);
        // erfc(a) - erfc(b) is more accurate than erf(b) - erf(a)
        double val = SQRTPIE4 / tt * (erfc(lower * tt) - erfc(tt));
        f[0] = val;
        if (m > 0)
        {
            double e = exp(-t);
            double e1 = exp(-t * lower2) * lower;
            double b = .5 / t;
            for (i = 0; i < m; i++)
            {
                val = b * ((2 * i + 1) * val - e + e1);
                e1 *= lower2;
                f[i + 1] = val;
            }
        }
    }
}

void fmt1_lerfc_like(long double *f, long double t, long double lower, int m)
{
    int i;
    long double lower2 = lower * lower;
    long double b = m + 0.5l;
    long double bi;
    long double e = .5l * expl(-t);
    long double e1 = .5l * expl(-t * lower2) * lower;
    e1 *= _powl(lower2, m);
    long double x = e;
    long double x1 = e1;
    long double s = e - e1;
    long double div = 1.l;
    long double delta = s;
    long double tol = SML_FLOAT80 * fabsl(delta);
    for (bi = b + 1.l; fabsl(delta) > tol; bi += 1.l)
    {
        div *= t / bi;
        x1 *= lower2;
        delta = (x - x1) * div;
        s += delta;
    }
    long double val = s / b;
    f[m] = val;
    for (i = m; i > 0; i--)
    {
        b -= 1.l;
        e1 /= lower2;
        val = (e - e1 + t * val) / b;
        f[i - 1] = val;
    }
}

void fmt_lerfc_like(long double *f, long double t, long double lower, int m)
{
    if (lower == 0)
    {
        return lgamma_inc_like(f, t, m);
    }

    int i;
    long double lower2 = lower * lower;
    // F[m] < .5*sqrt(pi/t) * erfc(low*tt)
    if (t * lower2 > ERFC_bound)
    {
        for (i = 0; i <= m; i++)
        {
            f[i] = 0;
        }
        return;
    }

    if (t < TURNOVER_POINT[m])
    {
        fmt1_lerfc_like(f, t, lower, m);
    }
    else
    {
        long double tt = sqrtl(t);
        // erfc(a) - erfc(b) is more accurate than erf(b) - erf(a)
        long double val = SQRTPIE4l / tt * (erfcl(lower * tt) - erfcl(tt));
        f[0] = val;
        if (m > 0)
        {
            long double e = expl(-t);
            long double e1 = expl(-t * lower2) * lower;
            long double b = .5l / t;
            for (i = 0; i < m; i++)
            {
                val = b * ((2 * i + 1) * val - e + e1);
                e1 *= lower2;
                f[i + 1] = val;
            }
        }
    }
}

/*
 * Copyright (C) 2020-  Qiming Sun <osirpt.sun@gmail.com>
 *
 * Rys-Wheeler scheme for improved accuracy
 */

// RYS-WHEELER File from libcint

int _CINTdiagonalize(int n, double *diag, double *diag_off1, double *eig, double *vec);
int _CINT_polynomial_roots(double *roots, double *cs, int nroots);

// (2*n*(n+.5)-.25) / ((2*n+1.5)*(2*n-.5))
static double JACOBI_ALPHA[] = {
    0.333333333333333333333333333333333333,
    0.523809523809523809523809523809523810,
    0.506493506493506493506493506493506494,
    0.503030303030303030303030303030303030,
    0.501754385964912280701754385964912281,
    0.501144164759725400457665903890160183,
    0.500805152979066022544283413848631240,
    0.500597371565113500597371565113500597,
    0.500460829493087557603686635944700461,
    0.500366300366300366300366300366300366,
    0.500298151460942158616577221228384019,
    0.500247402276100940128649183572488867,
    0.500208594075928243637880684188569045,
    0.500178253119429590017825311942959002,
    0.500154083204930662557781201848998459,
    0.500134517083669626042507398439601829,
    0.500118455342335939350864723999052357,
    0.500105108261509354635274332562539416,
    0.500093896713615023474178403755868545,
    0.500084388185654008438818565400843882,
    0.500076254384627116059173402470642062,
    0.500069242487190139869824124082537045,
    0.500063155235569028672476948339017305,
    0.500057836899942163100057836899942163,
    0.500053163211057947900053163211057948,
    0.500049034029616553888398548592723350,
    0.500045367933944288177116414118501043,
    0.500042098172939294434621537425275743,
    0.500039169604386995691343517430473952,
    0.500036536353671903544026306174643771,
    0.500034160005465600874496139919382387,
    0.500032008194097689008386146853594520,
    0.500030053495221494259782412694596382,
    0.500028272547356516822165677127509189,
    0.500026645350386357580602184918731681,
    0.500025154701413694219449615133068370,
    0.500023785738071452357166642880928595,
    0.500022525566517997927647880344190656,
    0.500021362956633198034607989745780816,
    0.500020288090890647190099411645364171,
    0.500019292356368406837211096963383108,
    0.500018368171632195731236912677712061,
    0.500017508841965192422173197464719683,
    0.500016708437761069340016708437761069,
    0.500015961691939345570630486831604150,
    0.500015263913056751228745001068473914,
    0.500014610911428654919493878028111394,
    0.500013998936080857854803034969342330,
};

// (n*n*(n-.5)*(n-.5)) / ((2*n-.5)**2*(2*n-1.5)*(2*n+.5))
static double JACOBI_BETA[] = {
    0,
    0.0888888888888888888888888888888888889,
    0.0653061224489795918367346938775510204,
    0.0635727908455181182453909726636999364,
    0.0630668677727501256913021618903971845,
    0.0628506250145487557904048045811122233,
    0.0627383202808533621388063732109100729,
    0.0626725320467338347287261718934771297,
    0.0626306844685688562397450409219758676,
    0.0626024168881311738454595597452740310,
    0.0625824265599124886179295184923702747,
    0.0625677689984038834439182682794918809,
    0.0625567021738527914561025858962869892,
    0.0625481417132150677511108031817980614,
    0.0625413838666524411762292054790023554,
    0.0625359556958903491628039209027981060,
    0.0625315298227085892971919513683760366,
    0.0625278737843751839315875074783323933,
    0.0625248188203958038426770641549301682,
    0.0625222400126509715550811441222400127,
    0.0625200432923554218218534834461769248,
    0.0625181567280224133007342386318247239,
    0.0625165245548401282337764651568207433,
    0.0625151030019811111861504383082116693,
    0.0625138573245990196466785257298989339,
    0.0625127596587629188827452983765522236,
    0.0625117874484888667690678686386608579,
    0.0625109222768887769076079260615228261,
    0.0625101489869806127933216619694767892,
    0.0625094550129262476820902302274736489,
    0.0625088298660401298247880731141415094,
    0.0625082647359430659414435305409292754,
    0.0625077521782950542645271337054302016,
    0.0625072858682741100226250759358014808,
    0.0625068604044429658749318401286927631,
    0.0625064711515671281343432808324685505,
    0.0625061141137874382619366175795073383,
    0.0625057858316275578773529320825966201,
    0.0625054832978509385509978861892195425,
    0.0625052038883250828781839823557093059,
    0.0625049453049100895427815298756695634,
    0.0625047055280393577559120272350957998,
    0.0625044827771571428430901562023013271,
    0.0625042754775595923421139265505510973,
    0.0625040822324815102880576155219607192,
    0.0625039017995013815508333080556297147,
    0.0625037330705176781129155364679885059,
    0.0625035750546917580575963715315712799,
};

// .5 * (2*n+3) / (2*(2*n+2.5)*(2*n+.5))
static double JACOBI_RN_PART2[] = {
    0.142857142857142857142857142857142857,
    0.0649350649350649350649350649350649351,
    0.0424242424242424242424242424242424242,
    0.0315789473684210526315789473684210526,
    0.0251716247139588100686498855835240275,
    0.0209339774557165861513687600644122383,
    0.0179211469534050179211469534050179211,
    0.0156682027649769585253456221198156682,
    0.0139194139194139194139194139194139194,
    0.0125223613595706618962432915921288014,
    0.0113805047006432459178624443344878773,
    0.0104297037964121818940342094284522320,
    0.00962566844919786096256684491978609626,
    0.00893682588597842835130970724191063174,
    0.00834005918751681463545870325531342480,
    0.00781805259417199715707178393745557925,
    0.00735757830565482446920327937775909186,
    0.00694835680751173708920187793427230047,
    0.00658227848101265822784810126582278481,
    0.00625285953942351685221900259264907732,
    0.00595485389835202880487467109818584684,
    0.00568397120121258052292535051155740811,
    0.00543666859456333140543666859456333141,
    0.00520999468367889420520999468367889421,
    0.00500147102088849661665195645778170050,
    0.00480900099809454677433989656111060702,
    0.00463079902332238780836911678033173360,
    0.00446533490011750881316098707403055229,
    0.00431128973328461819510412860796492510,
    0.00416752066680330668852907016465122634,
    0.00403303245630881505665450355290954484,
    0.00390695437879425377171365029752960269,
    0.00378852134577325417020073508623126944,
    0.00367705835331734612310151878497202238,
    0.00357196760074457916184534889570860794,
    0.00347271775843204414632986061557490129,
    0.00337883497769968914718205162859845925,
    0.00328989532151249732963042085024567400,
    0.00320551836072225603570703996753905457,
    0.00312536173168190762819770806806343327,
    0.00304911649094449138532750450020204989,
    0.00297650313408271176944356900234618482,
    0.00290726817042606516290726817042606516,
    0.00284118116520351157222665602553870710,
    0.00277803217632872363159019446225234301,
    0.00271762952572981502586131322871920750,
    0.00265979785536299241257664417504269676,
    0.00260437642636595516176668009128742113,
    0.00255121762659451101662156938538848087,
    0.00250018565735079337574572369235339258,
    0.00245115537469360557816329930272958759,
    0.00240401126450992513222061954804588227,
    0.00235864653367133252507439656122561446,
    0.00231496230221939046405436975682276734,
    0.00227286688371521592235395294551262363,
    0.00223227514272732660358349301673218625,
    0.00219310791998016667620191849266739135,
    0.00215529151699364465321912130422768721,
    0.00211875723315231905991275705510549274,
    0.00208344094908483564922430566317130706,
    0.00204928275103713700204928275103713700,
    0.00201622659160927141635885607368098456,
    0.00198421998281384266854152019373486446,
    0.00195321371791960027254144901203724733,
    0.00192316161897910947340605135281941366,
    0.00189402030731547542757864456501616326,
    0.00186574899456859737136697209668725901,
    0.00183830929218383092921838309292183831,
    0.00181166503747148908439231019876181167,
    0.00178578213457958129108248793647175045,
    0.00176062840890902599081518326541165462,
    0.00173617347366404444604092579953781865,
    0.00171238860737375502358902673423029879,
    0.00168924664134686242276514936794966272,
    0.00166672185613210150446482775367837787,
    0.00164478988615473925242687135163027703,
    0.00162342763178566565769766540632822565,
    0.00160261317817587914050936558975144184,
    0.00158232572025675473951336020301537543,
    0.00156254549336646059182623717693644031,
    0.00154325370901619943003758722223800191,
    0.00152443249535741012777516006541201253,
    0.00150606484195337511836587455471885287,
    0.00148813454849645577422621406243120680,
    0.00147062617714595319796692381124384014,
    0.00145352500819183169356668150998563279,
    0.00143681699877665295532730691232132154,
    0.00142048874443240640423739015288311063,
};

// (n+1)*(2*n+3)*(2*n+1)*(n+.5)/(4*(2*n+1.5)*(2*n+.5)**2*(2*n-.5))
static double JACOBI_SN[] = {
    0.133333333333333333333333333333333333,
    0.0816326530612244897959183673469387755,
    0.0741682559864378046196228014409832592,
    0.0709502262443438914027149321266968326,
    0.0691356875160036313694452850392234456,
    0.0679665136375911423170402376451525790,
    0.0671491414786433943522066127430112104,
    0.0665451022478544097547291059795993593,
    0.0660803289374717946146517575089003660,
    0.0657115478879081130488259944169887885,
    0.0654117584983313326913690986558324210,
    0.0651632314310966577667735269752989471,
    0.0649538394714156472799996802272518330,
    0.0647750047190328855039516771032524395,
    0.0646204875524200274682307182662247096,
    0.0644856401296682327127291998486377877,
    0.0643669288956803364001636106394598167,
    0.0642616193431845761716403159370115618,
    0.0641675621182470497538990689675621182,
    0.0640830443746643073673998205323313479,
    0.0640066842691658040936088633611538840,
    0.0639373546583592220572713848194757602,
    0.0638741269802850483858493608801293143,
    0.0638162293521948325559843283492718283,
    0.0637630148519381772604002043440832681,
    0.0637139372071136526684730199586351051,
    0.0636685319486830135170080728404399155,
    0.0636264016474624094503452630760745891,
    0.0635872042372870450559193721279473325,
    0.0635506436971407986552012076660438679,
    0.0635164625542647282953377810335249089,
    0.0634844358060809144874103701695775485,
    0.0634543659571873541138769710257378668,
    0.0634260789398024212554455436599970685,
    0.0633994207394466585362624705586466726,
    0.0633742545875900415711301817125560514,
    0.0633504586131360383892090527864154933,
    0.0633279238675595035319320689022355891,
    0.0633065526561241224022632641807825021,
    0.0632862571212214656620662989991154329,
    0.0632669580344788621187890031769872120,
    0.0632485837625994897816983723475668191,
    0.0632310693784614480670222280220691334,
    0.0632143558942142547231491793347102729,
    0.0631983895972736191236203448118033782,
    0.0631831214734580876576211401252492506,
    0.0631685067042097554837410137819071446,
    0.0631545042270307306418800612740449121,
    0.0631410763500519566499298347892141201,
    0.0631281884131127460009319915165060210,
    0.0631158084889316866582675155969963302,
    0.0631039071189426329431813657385193769,
    0.0630924570791929844168441760812401272,
    0.0630814331723869622592583712817914834,
    0.0630708120427293346371691454965353148,
    0.0630605720107052623408921603962253696,
    0.0630506929253359486693139231697881124,
    0.0630411560317907882669526183723252281,
    0.0630319438525254492239910205987482423,
    0.0630230400803605451462935505127575629,
    0.0630144294821244268441141487100133182,
    0.0630060978116620368437903104284681857,
    0.0629980317311645809853106304095146108,
    0.0629902187399059982519710116900037282,
    0.0629826471095851879522211025629876426,
    0.0629753058255704593910133559737027347,
    0.0629681845334270223004317456018676823,
    0.0629612734901814788868752070834879740,
    0.0629545635198408417968641138972612553,
    0.0629480459727389605947825152324343429,
    0.0629417126883315527433774503501116480,
    0.0629355559611032858765030867631851152,
    0.0629295685092873800533889095865830818,
    0.0629237434461307009797940084537341416,
    0.0629180742534659027450976347026882854,
    0.0629125547573773684532637358197768559,
    0.0629071791057699320890454947020834937,
    0.0629019417476690252459380084028850472,
    0.0628968374140983050099351803916073865,
    0.0628918611003962662746221735204718309,
    0.0628870080498470665701343133259403169,
    0.0628822737385130048545800855496113614,
    0.0628776538611669803523093451739050315,
    0.0628731443182329721334066277492113016,
    0.0628687412036512628117090270546644992,
    0.0628644407935929008720508221776268525,
    0.0628602395359548608299450549157781435,
    0.0628561340405736106069856843147540300,
};

static double JACOBI_COEF[] = {
    // n = 0
    1.0,
    // n = 1
    -0.333333333333333333333333333333333333,
    1.0,
    // n = 2
    0.0857142857142857142857142857142857143,
    -0.857142857142857142857142857142857143,
    1.0,
    // n = 3
    -0.021645021645021645021645021645021645,
    0.454545454545454545454545454545454545,
    -1.36363636363636363636363636363636364,
    1.0,
    // n = 4
    0.00543900543900543900543900543900543901,
    -0.195804195804195804195804195804195804,
    1.07692307692307692307692307692307692,
    -1.86666666666666666666666666666666667,
    1.0,
    // n = 5
    -0.0013639611162830977072463140574595683,
    0.0750178613955703738985472731602762563,
    -0.650154798761609907120743034055727554,
    1.95046439628482972136222910216718266,
    -2.36842105263157894736842105263157895,
    1.0,
    // n = 6
    0.000341696263085413711339138718328380463,
    -0.0266523085206622694844528200296136761,
    0.333153856508278368555660250370170952,
    -1.51029748283752860411899313501144165,
    3.07453416149068322981366459627329193,
    -2.86956521739130434782608695652173913,
    1.0,
    // n = 7
    -0.0000855506199428665440241695457740685901,
    0.00898281509400098712253780230627720196,
    -0.152707856598016781083142639206712433,
    0.967149758454106280193236714975845411,
    -2.90144927536231884057971014492753623,
    4.44888888888888888888888888888888889,
    -3.37037037037037037037037037037037037,
    1.0,
    // n = 8
    0.0000214114454806951862129456593984042634,
    -0.00291195658537454532496060967818297982,
    0.0645483709758024213699601811997227193,
    -0.542206316196740339507665522077670842,
    2.22691879866518353726362625139043382,
    -4.94870844147818563836361389197874181,
    6.07341490545050055617352614015572859,
    -3.87096774193548387096774193548387097,
    1.0,
    // n = 9
    -0.00000535749588218260503510068880185180269,
    0.000916131795853225461002217785116658261,
    -0.0256516902838903129080620979832664313,
    0.275328142380422691879866518353726363,
    -1.4749721913236929922135706340378198,
    4.4249165739710789766407119021134594,
    -7.77712609970674486803519061583577713,
    7.94805194805194805194805194805194805,
    -4.37142857142857142857142857142857143,
    1.0,
    // n = 10
    0.00000134030215763542648487272949235516339,
    -0.000281463453103439561823273193394584312,
    0.00971048913206866488290292517211315876,
    -0.129473188427582198438705668961508784,
    0.873944021886179839461263265490184289,
    -3.37925021795989537925021795989537925,
    7.93611793611793611793611793611793612,
    -11.5117315117315117315117315117315117,
    10.0727650727650727650727650727650728,
    -4.87179487179487179487179487179487179,
    1.0,
    // n = 11
    -0.000000335265599272389721967597110679879215,
    0.0000848221966159145996578020690020094413,
    -0.00353425819232977498574175287508372672,
    0.0572549827157423547690163965763563729,
    -0.474398428216150939514707285918381375,
    2.28765464273121675277092180098419463,
    -6.86296392819365025831276540295258389,
    13.1980075542185581890630103902934306,
    -16.277542650202888433177712814695231,
    12.4475326148610323312535450935904708,
    -5.37209302325581395348837209302325581,
    1.0,
    // n = 12
    0.0000000838560293215575238396495846570478035,
    -0.0000251568087964672571518948753971143411,
    0.00124526203542512922901879633215715988,
    -0.0240750660182191650943633957550384244,
    0.239890836395826680761692407701990015,
    -1.40735957352218319380192879185167475,
    5.22428932595355882547685687884333809,
    -12.744969564414176475339145352782649,
    20.7105755421730367724261111982718046,
    -22.199571169388091703777008081807686,
    15.0723404255319148936170212765957447,
    -5.87234042553191489361702127659574468,
    1.0,
    // n = 13
    -0.0000000209723962889049429370872310566846247,
    0.00000736131109740563497091761810089630328,
    -0.00042695604364952682831322184985198559,
    0.00970613405896590989698724338663513909,
    -0.114393722837812509500206797056771282,
    0.800756059864687566501447579397398975,
    -3.59126960181738666188528005305500146,
    10.7738088054521599856558401591650044,
    -22.086308051176927970594472326288259,
    31.0363152353139837495281800663527822,
    -29.4028249597711424995530126944394779,
    17.9471788715486194477791116446578631,
    -6.37254901960784313725490196078431373,
    1.0,
    // n = 14
    0.00000000524489773400058435716521147180895075,
    -0.000002129428480004237249009075857554434,
    0.000143026612906951268558442928432406151,
    -0.00377590258074351348994289331061552238,
    0.0519186604852233104867147830209634327,
    -0.426886763989613886224099327061254891,
    2.27026142667203748582816460300758283,
    -8.18292030712558566320481307457678206,
    20.5254917703733440385387394620634283,
    -36.2214560653647247738918931683472265,
    44.8002219755826859045504994450610433,
    -38.0123095550398547068913328624760367,
    21.0720411663807890222984562607204117,
    -6.87272727272727272727272727272727273,
    1.0,
    // n = 15
    -0.00000000131161433074471943038237967522787023,
    0.000000609900663796294535127806548980959656,
    -0.0000469623511123146792048411042715338935,
    0.00142452465040687860254684682956986144,
    -0.0225888908850233606975285711546078028,
    0.215347426437222705316439045007261053,
    -1.33776431574638347242030315837843988,
    5.68917351861374070139183870651050805,
    -17.0675205558412221041755161195315241,
    36.7007468161553076619199006753324931,
    -56.7895766523666339610760568344618577,
    62.6897924084566738531359068951851676,
    -48.1530289514232422350174357310842592,
    24.4469223907225691347011596788581624,
    -7.37288135593220338983050847457627119,
    1.0,
    // n = 16
    0.00000000032798890758409455440995755084412784,
    -0.0000001731781432044019247284575868456995,
    0.0000151530875303851684137400388489987062,
    -0.000523286622715967815887822674918755321,
    0.009475225632749845809111646292278891,
    -0.103595800251398314179620666128915875,
    0.742436568468354584953948107257230437,
    -3.67138962429406113438765547544784282,
    12.9416484256365654987164855509536459,
    -33.1576874696047952646853747449269883,
    62.3015496139416416289088357049417622,
    -85.7657695984131689956407348665432051,
    85.4550240563899328760913119141281935,
    -59.9499861072520144484579049736037788,
    28.0718188914910226385636221701795472,
    -7.87301587301587301587301587301587302,
    1.0,
    // n = 17
    -0.0000000000820160551915221514930984553086693956,
    0.0000000487995528389556801383935809086582904,
    -0.00000481488921344362710698816664965428465,
    0.000187780679324301457172538499336517101,
    -0.00384950392614817987203703923639860058,
    0.0478193932159296121881934429588181717,
    -0.391249580857605917903400896935785041,
    2.22281355278442043468195894193187765,
    -9.07648867386971677495133234622183373,
    27.2294660216091503248539970386655012,
    -60.7647031219067354617794460231272237,
    101.27450520317789243629907670521204,
    -125.492321664807388453674942873849701,
    113.90841504959439875025879430087896,
    -73.5281832595265431086326608714668416,
    31.9467278989667049368541905855338691,
    -8.37313432835820895522388059701492537,
    1.0,
    // n = 18
    0.0000000000205081991446447510877823245056378873,
    -0.0000000136584606303334042244630281207548329,
    0.00000150925989965184116680316460734340904,
    -0.0000660049662781071870281917321611517552,
    0.00152047154462068341547084525871224579,
    -0.0212866016246895678165918336219714411,
    0.197062327161898877817236520348856826,
    -1.27332580627688505666522059302338256,
    5.95279814434443763990990627238431349,
    -20.6208040294284441121062112703508899,
    53.7226210240372622920661819938088973,
    -106.049849294203426862260515104661719,
    158.690535356905852514904321515309022,
    -178.709956740392436986015328229548006,
    148.924963950327030821679440191290005,
    -89.0126221312299494566359872407710376,
    36.0716472749540722596448254745866503,
    -8.87323943661971830985915492957746479,
    1.0,
    // n = 19
    -5.12798623361071492952949812752845071e-12,
    0.00000000379983779910553976278135811249858198,
    -0.000000467380049289981390822107047837325583,
    0.0000227769877353984264460640167979390001,
    -0.000585693970338816680041646146232717145,
    0.00917587220197479465398578962431256861,
    -0.0953734595538592292823371467011882131,
    0.694863776749545813342742068822942696,
    -3.68277801677259281071653296476159629,
    14.5626189552118866044673362332076193,
    -43.6878568656356598134020086996228579,
    100.425333314513140090547474543288907,
    -177.563632816965262189083940496829662,
    240.940190991635940385803131566467326,
    -248.589085943751367064717516695561527,
    191.442169634843006819954869179340486,
    -106.528304071001350569168435269149141,
    40.4465753424657534246575342465753425,
    -9.37333333333333333333333333333333333,
    1.0,
    // n = 20
    1.2822073091109481189897035429838523e-12,
    -0.00000000105140999347097745757155690524675889,
    0.000000143166994110964763805993665264433668,
    -0.00000773101768199209724552365792427941808,
    0.000220610111711131632113335810053544823,
    -0.00384351839070060443504122833515509203,
    0.0445498722558479150425233284302067485,
    -0.363252804547682999577497908738608873,
    2.1643812937632778724825917062342112,
    -9.67605754858877166521629233375294418,
    33.0513755212321726880282827610824251,
    -87.2785241036866897822391882435509928,
    179.300446256486786617860941065555844,
    -286.88071401037885858857750570488935,
    355.944589605470065285827645967177527,
    -338.761057693481855237546311334279302,
    242.460031212068666551066412346107161,
    -126.200230149597238204833141542002301,
    45.0715107677132993588689791221436791,
    -9.87341772151898734177215189873417722,
    1.0,
    // n = 21
    -3.20599507156850184147209825339261597e-13,
    0.000000000289501354962635716284930472281353222,
    -0.0000000434252032443953574427395708422029833,
    0.00000258524709981633694642442911747248427,
    -0.0000814352836442146138123695172003832545,
    0.0015689864648785348927849860313940507,
    -0.0201590988214696604406313356760932575,
    0.182761060744093075423306065195350961,
    -1.21536105394821895156498533354908389,
    6.09269234234172507091727941720357742,
    -23.4728989189165407995339396494369404,
    70.4186967567496223986018189483108211,
    -165.841133666258168692359356218847948,
    307.699088002319002219977513230662501,
    -449.33835073354520959107827328922143,
    513.381977734648204981071038677570231,
    -453.34940775761272939860708657414468,
    303.041047966318669384095646105711684,
    -148.153401227978016143335649207236824,
    49.9464524765729585006693440428380187,
    -10.3734939759036144578313253012048193,
    1.0,
    // n = 22
    8.01607151768784300863003336108579705e-14,
    -0.0000000000793591080251096457854373302747493908,
    0.0000000130545732701305367317044408301962748,
    -0.000000852898786981861733138023467572823287,
    0.0000295163901637651435503837407170737773,
    -0.000625747471471821043268135303201964079,
    0.00886475584585079811296525012869449112,
    -0.0888423882573178887804869023886744604,
    0.655212613397719429756090905116474146,
    -3.65719981595851237262550086908149621,
    15.764456048789587543054132693567081,
    -53.2306308140947111843386298743823516,
    142.141213441984790372672355860216642,
    -301.776730076829247252750540133998408,
    510.146377034639917974887817845568738,
    -684.88617054765451056858502441795895,
    724.929918422416568646183745603686388,
    -597.001109289048938885092496379506437,
    374.310219316149731523192914396674671,
    -172.512818006305139421784501087514358,
    55.0713995943204868154158215010141988,
    -10.8735632183908045977011494252873563,
    1.0,
    // n = 23
    -2.00426531958487246480748457293477454e-14,
    0.0000000000216661081047124713445689082334249128,
    -0.00000000389267742281334068490754717927200934,
    0.000000277937167988872524902398868600021467,
    -0.0000105219070738644598713051000255722412,
    0.000244342064270852457011418433927177602,
    -0.00379840845366507001354114110923157909,
    0.0418659744947919255338655443138381739,
    -0.340509925890974327675439760419217148,
    2.10314954226778261211301028494222356,
    -10.072979386650958826435996627881176,
    37.9808010639523166139642989735259926,
    -113.942403191856949841892896920577978,
    273.81235967027777792774877690760431,
    -528.791064971700470601207955403574461,
    820.537859438845557829460620453822439,
    -1019.055083496630773433362383466844,
    1004.5231036963223132061486596384398,
    -774.917822851448641616171823149653563,
    457.455044784283337511680379241971876,
    -199.403481059815813787142729413167228,
    60.4463514014075811828620817384862329,
    -11.3736263736263736263736263736263736,
    1.0,
    // n = 24
    5.01123043685680053736246001314421841e-15,
    -5.89320699374359743193825297545760085e-12,
    0.00000000115212196727687329794392845670196097,
    -0.0000000895582809229889510268413720342990992,
    0.00000369427908807329422985720659641483784,
    -0.0000935884035645234538230492337758425586,
    0.00158958485448228472326724531913211376,
    -0.0191798260463906442433784105539237463,
    0.171179947464036499872152314193769435,
    -1.16357611348103241743162357360470727,
    6.15470523183388199746727206038279373,
    -25.7378582422144156257722286161462283,
    86.0726201361011073282165471474745245,
    -231.998816120690984675439062465192872,
    506.34662248563508560115668395180984,
    -896.291722560779346926185394581364545,
    1284.8052716546655557752375313454641,
    -1484.05314800752812859599629289101735,
    1368.62679205138705192741880344393822,
    -992.887146438417349193433271346242523,
    553.725523975271213973260862866173715,
    -228.950390865501222037724584413888319,
    66.0713073005093378607809847198641766,
    -11.8736842105263157894736842105263158,
    1.0,
    // n = 25
    -1.25293806923806915445249052291567931e-15,
    1.59749603827853817192692541671749112e-12,
    -0.000000000338669160115050092448508188344108117,
    0.0000000285610991697025577964908572170197846,
    -0.00000127912922710025026702855481964795749,
    0.0000352186913861602240188528760343070964,
    -0.000651012174107810201560613769119009963,
    0.0085633139824950418820665349630269772,
    -0.0834923113293266583501487158895130277,
    0.621553873229431789939995996066374762,
    -3.61155513708048787417766094556461967,
    16.6506762813451064328970082555251946,
    -61.6557650707778941102200812940099597,
    184.967295212333682330660243882029879,
    -452.142277185704556808280596156073037,
    903.245146837648873256082386343971194,
    -1475.05759866632174866416680027946909,
    1964.11412870542307709827557898175296,
    -2119.99620241220268639178951382157462,
    1836.52587093745581225120883914272965,
    -1257.3138654879505176181352821823303,
    664.434156558673037765681246681719263,
    -261.278547822226606816948650915010112,
    71.9462667916276163698844111215245236,
    -12.3737373737373737373737373737373737,
    1.0,
    // n = 26
    3.13264627327522625274529255993817349e-16,
    -4.31678656457326177628301314759480307e-13,
    0.0000000000989263587714705823731523846323809038,
    -0.00000000902208391995811711243149747847313842,
    0.000000437248852835113032913197931367430316,
    -0.0000130397324556604820037669249754464774,
    0.000261387364224830571075509723371449843,
    -0.0037341052032118653010787103338778549,
    0.0396126326974058710689433187918875774,
    -0.321561371308353541618481058428263863,
    2.04276092194306697228161388169954991,
    -10.3287651810800962061685065533553,
    42.100945031576479101230325625089538,
    -139.645596135505982988080895457989298,
    379.407479447525514626346771522103199,
    -847.779471317229425785767958435596114,
    1560.52955103352916480323819768487752,
    -2364.43871368716540121702757224981443,
    2938.65954415404842722687712551048365,
    -2976.28107459129798034926957804191232,
    2430.62954424956001728523682206756173,
    -1575.25120289344307740436950837828042,
    790.955942256221418358430778519749683,
    -296.512952266100396447411731464408577,
    78.0712294530423916178025569547245987,
    -12.8737864077669902912621359223300971,
    1.0,
    // n = 27
    -7.83231275623507836578685073508351521e-17,
    1.16309844430090913731934733415990201e-13,
    -0.0000000000287285315742324556917878791537495796,
    0.00000000282497227146619147635914145011870866,
    -0.00000014770569305094658290677796724906391,
    0.00000475612331624047996959825054541985791,
    -0.000103049338518543732674628761817430255,
    0.0015933013109405607898154139327156524,
    -0.0183229650758164490828772602262300026,
    0.161553463315531959560793621210354729,
    -1.11726974103478418348885693826529533,
    6.16674857064653607769823634756818853,
    -27.5269356486830885787109680442174213,
    100.367442288275261433146145022761982,
    -301.102326864825784299438435068285946,
    746.87220847620004887148062399696675,
    -1535.90655775347590695344805741311711,
    2620.07589263828242950882315676355271,
    -3701.37705467947835279817874526914589,
    4312.1305942851959757350048255696024,
    -4113.10918224126385377800460285100537,
    3176.79164482048834234886534366541065,
    -1954.43206901218204571568671248759936,
    934.728380831913152298806688581025782,
    -334.778604482351873695671899101714908,
    84.4461949265687583444592790387182911,
    -13.3738317757009345794392523364485981,
    1.0,
    // n = 28
    1.95824002707753632998638097971961596e-17,
    -3.12535108321574798265826404363250707e-14,
    8.29780712593781089395769103584430628e-12,
    -0.000000000877354806782491205187793198856604651,
    0.0000000493512078815151302918133674356840116,
    -0.00000171084187322585785011619673777037907,
    0.0000399455655551673779852887753470326386,
    -0.0006663447089312536239743775931515994,
    0.00827933300847082627788164159490862254,
    -0.0790053999501137670961254688141607118,
    0.592540499625853253220941016106205339,
    -3.55524299775511951932564609663723203,
    17.2996063260330634581679083615355167,
    -68.985507072427231513186489958615476,
    227.214170119502389507717407403376369,
    -621.574396418868605779732677724179033,
    1417.34000473737982487273721472993243,
    -2698.25155982089421205718956387088741,
    4287.22192282653191471309008481707666,
    -5671.57380971361974492627849058304594,
    6216.91744526300625886149757621603113,
    -5603.16833626491621007726146242002341,
    4104.6465719149967585449706061914125,
    -2403.30031167196911659734510855265312,
    1097.25147208427668000676660541189393,
    -376.200504714609147430891407569792205,
    91.071162906025291346392263823456484,
    -13.8738738738738738738738738738738739,
    1.0,
    // n = 29
    -4.89597679721040056646845079115739304e-18,
    8.3770163000269953692275193036702995e-15,
    -2.38465730674101801510676716177814526e-12,
    0.000000000270420138584431442913107396145641672,
    -0.0000000163217869359888978043982678387905152,
    0.000000607533180395142307163713302888313622,
    -0.00001524355979900538879792589741792496,
    0.000273546518151382416560582313005180875,
    -0.00366096423459266800830245995571933738,
    0.0376863965325715824384076760147578848,
    -0.305458161369264405027093795066984961,
    1.98481688404877000842280427011058193,
    -10.4850109309532850444943790790624219,
    45.521078226384877531635596555560238,
    -163.779540708686331859852939988259057,
    491.338622126058995579558819964777172,
    -1234.29016767957562195994010015345233,
    2602.7901396879464541508184286658362,
    -4610.65681887579086163859264506519555,
    6853.67905508563506459790798590772312,
    -8523.16497876034104187175736709037363,
    8820.13936826418567747704508022941103,
    -7533.48055978590066321506598818748849,
    5247.96085372525060693532616181949682,
    -2931.04196617633677515004918612259131,
    1280.08771584027769363696025679639702,
    -420.903653172218004845938666638935973,
    97.9461331281262023855328972681800693,
    -14.3739130434782608695652173913043478,
    1.0,
    // n = 30
    1.22408211097388525259474805746023739e-18,
    -2.24007026308221001224838894515223442e-15,
    6.82101395108532948729634433798855382e-13,
    -0.000000000082761635939835331112528977967594453,
    0.00000000534699283625578978509160432654922734,
    -0.00000021316678107206415276565195915176253,
    0.00000573289449095324047210654890142997713,
    -0.000110373968660989860517919490937421098,
    0.00158662579950172924494509268222542829,
    -0.0175669549304309107250783464293455916,
    0.153387253839920425752131456454128087,
    -1.07570281913710428449546735695102814,
    6.14631647021454150959910152866583833,
    -28.9349667674715338759588471964884081,
    113.213798542567192070219933871974486,
    -370.61252672325444024826019731883142,
    1019.93165116379498173160316399234857,
    -2367.11409949244396829687579236726886,
    4640.29509979867984261371683106916991,
    -7683.21976694973447624803185115862558,
    10726.9568284721292879924444691176196,
    -12583.3059195782236711641915375247337,
    12330.5756738361663247031771197520382,
    -10007.4237352873233939619988218277412,
    6645.00033486720321106164638080583169,
    -3547.61650530869461227291161881388892,
    1484.86211195047172685630916172074536,
    -469.013050036067938881238113974686865,
    105.071105365223012281835811247575953,
    -14.8739495798319327731092436974789916,
    1.0,
    // n = 31
    -3.06041089493638851367671673843280476e-19,
    5.9769824778107667672106277901592677e-16,
    -1.942519305288499199343454031801762e-13,
    0.0000000000251621000678370262954955412252721571,
    -0.00000000173618490468075481438919234454377884,
    0.0000000739614769394001550929795938775649787,
    -0.00000212695277622699233888598892696391408,
    0.0000438245764332484685210025190995311968,
    -0.000674898477072026415223438794132780431,
    0.00801497080287498036902606724796903296,
    -0.0751719893195958685137076412414779828,
    0.567206828502405189694339474822061143,
    -3.49366524802206095101585908404892733,
    17.7693189384014361600898925105626981,
    -75.3080659770346580118095444495276252,
    267.819719693040496423607736237745371,
    -803.459159079121489270823208713236112,
    2040.87219552183265991251884566196339,
    -4399.21339923595040025587395620467663,
    8053.75198409198885509147906349277215,
    -12514.2915445121672979113751601964613,
    16467.7030428946405906313450133595711,
    -18278.10591441794145894599605076908,
    17006.5855029801716183236658907155787,
    -13146.9348923747425985622665396311921,
    8338.91298887769387680235191942321326,
    -4263.78808933565343022020709002182397,
    1713.26216028511580878869257635398238,
    -520.65369546326896007344683489198945,
    112.446079419471880669219915339649264,
    -15.373983739837398373983739837398374,
    1.0,
    // n = 32
    7.65150919181261480994197715580459975e-20,
    -1.59151391189702388046793124840735675e-16,
    5.50929065835019766621982200490346661e-14,
    -7.60282110852327277938335436676678392e-12,
    0.000000000559078880801764951883940237184743146,
    -0.0000000253946051635290569255727521067914442,
    0.000000779152658426459701125527621458373857,
    -0.0000171413584853821134247616076720842249,
    0.000282118191738580616782534792936386201,
    -0.00358456055385490666029573619260349526,
    0.036015400512152720076339791535158276,
    -0.291553242241236305379893550522709854,
    1.9299557013577490214821214376992424,
    -10.5702189182055177176559266433989276,
    48.3489643110511643752039607577691689,
    -186.060152314252067043888345536794457,
    605.82085884580058120137031863290937,
    -1675.99638668214349736992287792918956,
    3950.56291146505252951481821226166111,
    -7946.08244212174150317774246392317042,
    13640.7748589756562471217912297347759,
    -19962.1095497204725567635969215630867,
    24836.5781606987274834151729140377939,
    -26156.3963238276453690072835519818312,
    23165.1063187090582656367697415158239,
    -17094.902948663664222151542731698208,
    10378.1273557121038452729953989570569,
    -5091.15681600971132032260151646949961,
    1967.03786073102482830645967681776121,
    -575.950589590935279431534472825043211,
    120.07105511811023622047244094488189,
    -15.8740157480314960629921259842519685,
    1.0,
    // n = 33
    -1.91299049265686120906591239027601834e-20,
    4.22962197926432013324473229490027655e-17,
    -1.55650088836926980903406148452330177e-14,
    2.2839056368671752331226462182905248e-12,
    -0.000000000178634048026396920019235543502008904,
    0.00000000863397898794251780092971793593043036,
    -0.000000282043313606122248163704119240394058,
    0.00000661097129584460170695803171801934644,
    -0.00011602254624207275995711345665123953,
    0.00157350838857713056804581975523739886,
    -0.0168945111194597176779656436878120719,
    0.146345959956878333651988108308709766,
    -1.03820793331727455540069824662483232,
    6.10466264790557438575610569015401407,
    -30.0388162039798104695935359356784819,
    124.643823559042661833600764054941747,
    -438.766362770339692664247850886952198,
    1316.29908831101907799274355266085659,
    -3376.41162969937592069249774777768929,
    7420.42100694955305472248793786135129,
    -13984.6395900203115262077657290463928,
    22593.0704642488424308420466075534639,
    -31238.6217412658413314391088400422101,
    36852.5189817252099185383110083976218,
    -36917.8603274374886595286271626678303,
    31191.8248480798373572343911129479219,
    -22017.7587162916498992242760797279449,
    12816.7666042424488931193724489261901,
    -6042.18997057144019247056129735091821,
    2248.00171318901132387743206162783708,
    -635.028732539268735558596627578485052,
    127.946032309604118586898633055210367,
    -16.3740458015267175572519083969465649,
    1.0,
    // n = 34
    4.78274259066368697716339778331887849e-21,
    -1.12203141176970096484253311996660889e-17,
    4.38153266296068226771009183346960773e-15,
    -6.82350686711743585158051634865666911e-13,
    0.0000000000566594766644572798390167875379526988,
    -0.00000000290851980210880703173619509361490521,
    0.000000100960891918655710753145802416238603,
    -0.00000251625607551111156030917230637394673,
    0.0000469910822101700083887737928215334552,
    -0.000678760076369122343393399229644372131,
    0.00777001666369916366779285960250794413,
    -0.0718474268123870718372534550257877432,
    0.544842986660601961432505367278890386,
    -3.42999615602335880951047994293110686,
    18.1027574901232826057497552543586195,
    -80.7341368525038350693207475711625791,
    306.171192378144584204420012462412926,
    -992.191136797623625817532232899584134,
    2757.66139767085550604206180921773305,
    -6590.14388063589936010051755261136773,
    13560.4883697700236832837572717195451,
    -24034.0362976411801866330006929663483,
    36660.7974392137663946209513741547998,
    -48030.9578044191953923729565829506362,
    53864.5049845658529887870479409863075,
    -51446.0986383200391811272212987379427,
    41552.6181309508008770642941259037229,
    -28108.2699865551189720462870117923157,
    15715.0782197558165161895150111384311,
    -7130.25327575127791115676724643304494,
    2558.02871757178614326810576355083816,
    -698.013124414088656756394803803401634,
    136.071010860484544695071010860484545,
    -16.8740740740740740740740740740740741,
    1.0,
    // n = 35
    -1.19574843638868947635745086627008247e-21,
    2.97143486442589334874826540268115494e-18,
    -1.22918355558417788193219912157577109e-15,
    2.02815286671389350518812855060002231e-13,
    -0.0000000000178477452270822628456555312452801963,
    0.000000000971313956913876926866897689326471127,
    -0.0000000357620138681927413982812331070200733,
    0.000000945924916271867346655636572402168313,
    -0.0000187608441727253690420034586859763382,
    0.000288034137004783607056641336296460251,
    -0.00350795259488983824594246343257899485,
    0.0345480179799756796948878974420658584,
    -0.279388319316325061880397779314097811,
    1.87834916217283156987282814708093451,
    -10.6042251642243983336206753065362811,
    50.6808830262586761737870895684802952,
    -206.401983292424447320665163161956041,
    720.01547469389419502057348361488052,
    -2160.04642408168258506172045084464156,
    5589.081714658009419953441678643532,
    -12496.6134748250877287164131891722049,
    24165.9250122924170363679767247058318,
    -40412.7836886327735217062782013579554,
    58374.0208835806728646868462908503801,
    -72657.0259933929651613655427237180263,
    77639.2220615113399152877513676301195,
    -70847.2539173670598020348259086217531,
    54806.3662379631972053476955142168278,
    -35588.5495051709072761998022819589791,
    19139.8793164530771739513758189119978,
    -8369.6421417710066286092456970835516,
    2899.05637380222598717030985277087588,
    -765.028765308920746614387322258981136,
    144.445990652733287822296906999947487,
    -17.3741007194244604316546762589928058,
    1.0,
    // n = 36
    2.98951935120536807534489402215319434e-22,
    -7.85645685496770730200638149021859471e-19,
    3.43719987404837194462779190197063519e-16,
    -5.99905951350575850069037279957274861e-14,
    5.5855529113248258611785006744593413e-12,
    -0.000000000321727847692309969603881638848858059,
    0.0000000125425113956411144210725372236077543,
    -0.000000351465978669064195315768900221975533,
    0.00000738957220151707470651404112716703558,
    -0.000120358260955428432474725428032027795,
    0.00155642235351309293994947566670890681,
    -0.0162919015185915962285620439917841414,
    0.140192993140054496532010342320606289,
    -1.00421319393860574746621562129960443,
    6.04918900158255366926077505211428384,
    -30.8995355437159408117182578524090545,
    134.749385848906411241424580110404808,
    -504.409465744569453844904845333066127,
    1627.72133945826936455030404851130704,
    -4542.80123473275176848889977692629362,
    10990.0845255650033168442998449486103,
    -23077.9010711051405306091685478131097,
    42081.7963505881262318190441278833132,
    -66599.0168331046867320962263589109826,
    91337.4814191604169987170763982582359,
    -108262.875935200755495622199943078334,
    110467.323635238779928790977769973594,
    -96494.8669070918762480703858927092887,
    71619.2421264974120464574357632251409,
    -44713.2836506626311143037348503619755,
    23165.0175749478151027212004846225602,
    -9775.61291634497961500344684649857378,
    3273.08468181193513895204693521157604,
    -836.200655306732147387282853378062317,
    153.070971581609879482219907751822645,
    -17.8741258741258741258741258741258741,
    1.0,
    // n = 37
    -7.47414901363988105724275873518853981e-23,
    2.0740763512850669933848655490148198e-19,
    -9.58223274293700950943807883644846747e-17,
    1.76632490228138875290641919885200084e-14,
    -1.73730670745819450910867088344228939e-12,
    0.000000000105744068260622105787747767772187348,
    -0.00000000435793735861957769307081709606590282,
    0.000000129157769848318692727604326462524614,
    -0.00000287376037912509091318919626379117267,
    0.0000495676708530138230059234571251300959,
    -0.000679337973164463132144340433441256683,
    0.00754329827344955815562871520249707096,
    -0.0689282545131876292336797816691942498,
    0.524915168985044253394946029634633133,
    -3.36612267095171235510409834876812358,
    18.3318266838726587798657677890383558,
    -85.3760476607779068175200072433036329,
    341.960747047714717680868906017296369,
    -1183.29274375240965800681621447254934,
    3549.87823125722897402044864341764802,
    -9256.99015689385093994563146245063599,
    21019.0659195441098578324152254250794,
    -41593.7541240872871605309527505240472,
    71734.1556632809735087417880769907481,
    -107728.421714182596740965061172360219,
    140618.568425288140562288271685391013,
    -159070.778761638168056887185164469471,
    155291.319308182055049246259730792349,
    -130081.689550360292865927061722546838,
    92780.5880096036208644452545498383072,
    -55773.1896283718941241637010401287903,
    27871.8478047654362492515586900696493,
    -11364.4141346811451373436414897010177,
    3682.17614154004469485027078570732276,
    -911.653794481380688277240001377932412,
    161.94595355383532723434201266713582,
    -18.3741496598639455782312925170068027,
    1.0,
    // n = 38
    1.86862030320122365202855761969134346e-23,
    -5.46758300716678040583555959521687096e-20,
    2.66362418832474985437622344946981897e-17,
    -5.17808542210331371690737838576932807e-15,
    5.37226362543218798129140507523567788e-13,
    -0.0000000000345018708388867183687381348165135757,
    0.00000000150083138149157224904010886451834054,
    -0.000000046971074444923052365562967540090482,
    0.00000110421167507606608936044276192162708,
    -0.0000201356246631517933942198385997473174,
    0.000291966557615701004216187659696336102,
    -0.00343281891984521180714790339279328508,
    0.0332461049737183013061824122062914892,
    -0.268628528187643874553953890626835233,
    1.82994301609307665866780758826481673,
    -10.601049196677133746765230166499628,
    52.5991574052871494975589343543459363,
    -224.835614006913697852310739004851257,
    831.891771825580682053549734317949651,
    -2674.36046134539451129590668500507285,
    7491.63795902523975279686680350780022,
    -18324.494241239436607886412878266466,
    39186.5241543629812449833121064831509,
    -73299.6239254557794109059828387936041,
    119891.672112115171110923349590048049,
    -171273.81730302167301560478512864007,
    213252.694092977965421390271679777342,
    -230688.44895592584938666117439573398,
    215858.477237330616211804384613151082,
    -173679.234558771760170417320953110066,
    119220.49151915688621867629658645691,
    -69098.7089925943666291217456683007789,
    33349.7241318424200050275091940757231,
    -13153.317769481905512472388241579516,
    4128.45575293220475918250991779163912,
    -991.513182898831784814018945059689728,
    171.07093648606604737988355038001689,
    -18.8741721854304635761589403973509934,
    1.0,
    // n = 39
    -4.67174774517396374989555898256376781e-24,
    1.43936548028809823134282172252789686e-20,
    -7.3839449138779439267886754365681109e-18,
    1.51173965536794438661120148438004457e-15,
    -1.65211548050925350822509876507247728e-13,
    0.0000000000111793147514459487389898349769904296,
    -0.000000000512554642998112740669443040005652121,
    0.00000001691430321893772044209162032018652,
    -0.000000419474719829655466963872183940625696,
    0.0000080742029405119957529974090307525665,
    -0.000123662792404683724427486633049947203,
    0.00153695184845821200359876243933505809,
    -0.0157481877805790708194829716610128416,
    0.134756031439355064458406597505466808,
    -0.973238004839786576644047648650593611,
    5.98485439757799791384558036813870784,
    -31.5652804517420212552823351674412494,
    143.647345799104064643022819398355632,
    -566.836986756464610638975760356050955,
    1947.24228025158184166874318813636281,
    -5841.72684075474552500622956440908844,
    15340.4696712502667038781475553181753,
    -35318.7557547389861321845722785232409,
    71354.1239450813719829931793569005765,
    -126514.404157945695005307055597341448,
    196742.808098682897130701992581988129,
    -267961.92415250476034543574555284356,
    318895.287792952904869515775455270848,
    -330491.480076333010501134530926371606,
    296902.509324473394188859515079045272,
    -229805.897047756242959738720710899448,
    152029.178850736678975480243050944056,
    -85063.9453093407608553282312308853644,
    39696.5078110256883991531745744131701,
    -15160.6504809448414869461202281560395,
    4614.11101593973436559229746074314245,
    -1075.90382061818532155438547989159347,
    180.445920303605313092979127134724858,
    -19.3741935483870967741935483870967742,
    1.0,
    // n = 40
    1.16798372301529094111678017907224592e-24,
    -3.78426726256954264921836778019407678e-21,
    2.04161218815626825925330941741470442e-18,
    -4.39627157849649765159212627883299686e-16,
    5.0541422182786521215982337469869346e-14,
    -3.59854925941440031057794242785469744e-12,
    0.000000000173657263503558560442284039889654717,
    -0.00000000603411282635441942987364982561635402,
    0.000000157641197588509207605449101694227249,
    -0.00000319815867525969006802166020692079333,
    0.000051658678812484151677676185131789025,
    -0.000677600851955960950577310999780609288,
    0.00733331066953788173686386940704594183,
    -0.0663382565182811455580916186360463661,
    0.507013817675434469622557371004068655,
    -3.30316588343030180898925882626558751,
    18.480413964756224838599179925175414,
    -89.3384717868429264924794580340030709,
    375.079774406665937416838359523711306,
    -1373.33618680335437113931996787202404,
    4399.95786002766996599635974322075395,
    -12366.89665652376459664482064877378,
    30551.2024168034226874830294462836404,
    -66415.6574278335275814848466223557399,
    127120.039349904774865625694909278406,
    -214184.29487200282067155219125938827,
    317399.80348679151027119159564456859,
    -412996.809288892936495428896638844665,
    470655.454741563054252907606234527524,
    -468092.902356400279002891775347588173,
    404358.219041206794686678827404780969,
    -301504.541960920983875313139418689142,
    192478.345983980806670400798825323872,
    -104090.853772222720623620012418356966,
    47019.0906635720717830136052583359603,
    -17405.8248667633259519727383440796474,
    5141.39193051890105388866097409238412,
    -1164.95070769254625878558330845780788,
    190.070904939310179065016224011537075,
    -19.8742138364779874213836477987421384,
    1.0,
    // n = 41
    -2.92007057375426737212483129020805757e-25,
    9.93700016248577186734080088057801991e-22,
    -5.63096675874193739149312049899421128e-19,
    1.27372468082742623795574385687249059e-16,
    -1.53847745377084126313083061569384399e-14,
    1.15112301929920500732477926289803838e-12,
    -0.0000000000583933313426323994624751662451914016,
    0.00000000213360249136541459574428492049737814,
    -0.0000000586385084710261444730387638983362758,
    0.00000125210462205779355551253360559388636,
    -0.0000212989586236357303758763611225233722,
    0.000294405086083415095628455502442498387,
    -0.0033600580476911505479334595387459055,
    0.0320808003753404312315000767653185993,
    -0.259022758586082000313593212401461283,
    1.78457748846548909181572151164868843,
    -10.5707432683701753059568342766609811,
    54.1727039154443030385488387618544038,
    -241.455480308837464971817681338551057,
    940.062090476939035032524884528612009,
    -3208.2631857046303990468990289938015,
    9624.7895571138911971406970869814045,
    -25435.490372922545446989157206610477,
    59300.3268307846397715795520188899333,
    -122070.353635710933997879184209097895,
    221918.920446308775521042402639723275,
    -356141.374592567929342970009666162239,
    503973.643291369711334391523112493734,
    -627676.264826524095025560351512833105,
    686153.061428632207931752906947180533,
    -655915.807874150110633065490708830204,
    545613.731245921800119414075560544638,
    -392430.511064775104252554766648209189,
    242044.552978413735629897415513091262,
    -126653.690583963640417400227959440204,
    55433.9341396478542116737229619578864,
    -19909.3707121270462309532385285905085,
    5712.61099663030760051416507206873161,
    -1258.77884416976602565715637377514507,
    199.945890332660137941546317113134931,
    -20.3742331288343558282208588957055215,
    1.0,
    // n = 42
    7.30044136548472071368824632852234026e-26,
    -2.60625756747804529478670393928247547e-22,
    1.54942012386569792775069549190343167e-19,
    -3.67729042730792308186165063411747783e-17,
    4.66096561661279250625964217874390315e-15,
    -3.66041166424657971491590565770687861e-13,
    0.0000000000194944651512526177241354672527873914,
    -0.00000000074807332206784770431517639172234693,
    0.0000000216006171747091024621007183109827676,
    -0.00000048481385214347096637159389986872434,
    0.00000867306464966135691945814560870417911,
    -0.00012615366763143791882848211794478806,
    0.00151612940410681006070317096095239853,
    -0.0152545943120900581492288278225056714,
    0.129906188070417717413670890901179249,
    -0.944880871390348638843344135198462399,
    5.91503045497385589437214423345005191,
    -32.0740154082539565609270280894029553,
    151.460628316754794871044299311069511,
    -625.663818821985667575409168135627113,
    2269.23454288127878662927248289190911,
    -7247.84552023637243116202012538066207,
    20433.4080364380605432442998672201118,
    -50935.4519169180639628698489443747714,
    112392.14523156831666984313299871348,
    -219646.363823979224577636294203200059,
    380157.168156887119461293586120923179,
    -582323.209364008781173414074617095463,
    788405.124366206693991278146478340287,
    -941507.389896486396817170635903353736,
    988848.721930829498126056617030697511,
    -909887.242813137666176276316040937953,
    729805.39267303750307888829515783565,
    -506951.065306678731742444550016398657,
    302434.810250999296065839395729712807,
    -153283.729916034425832127296220773696,
    65067.6240058283849874249281688339046,
    -22692.9662397224504472988827601042348,
    6330.14321423836775635179361202907602,
    -1357.51323009307653516169000537686479,
    210.070876428960261295590636908002177,
    -20.8742514970059880239520958083832335,
    1.0,
    // n = 43
    -1.82517349616343496855938197597058405e-26,
    6.82797404914741021738064797210595492e-23,
    -4.25382783261883656542814368662200992e-20,
    1.05806877623339194837416027298578127e-17,
    -1.4057199455672207314113843626811094e-15,
    1.15737608851701173552870645860744674e-13,
    -6.46377009435409887448304849458643738e-12,
    0.00000000026018450390790180414540007291945187,
    -0.00000000788359046840942466560562220945939165,
    0.000000185753879990954090977178222647719653,
    -0.00000349021763983003213046592765711767979,
    0.000053350469637401919708550608473084534,
    -0.00067422622498281846356313232736999585,
    0.00713849981589501025575611796455432529,
    -0.0640198793012806475317810579360824411,
    0.490819074643151631076988110843298715,
    -3.24178082365113859558107469984404555,
    18.5665628990928846837825187354704427,
    -92.7149315564225638336187364155397026,
    405.545397633000545929413391860291018,
    -1559.78999089615594588235919946265776,
    5291.69171127487981175652871269503289,
    -15875.0751338246394352695861380850987,
    42195.489558600563368528146343837784,
    -99503.5480725864348938695649597593134,
    208348.245556068739185939129895332766,
    -387471.171599747745725886798131139217,
    639828.356736690372571817263440867904,
    -937306.995323359402936376458651037656,
    1216287.66180798906188658651167965866,
    -1394951.38614136598623150882412977802,
    1409704.97034169772590608850497726377,
    -1250274.05107686286404766182881912084,
    968160.931859519448570240698213780756,
    -650257.342293707092323295991337613941,
    375614.489647917761404139920462099978,
    -184574.2562589142051344286933100147,
    76057.4406575977453960085655883177937,
    -25779.4693597331305447523769678298206,
    6996.42608331085627504934639653057069,
    -1461.27886550163453845967361446524578,
    220.445863178656700923907401640195162,
    -21.3742690058479532163742690058479532,
    1.0,
    // n = 44
    4.56308445663452990157752673034561541e-27,
    -1.786903873218081909457759467603343e-23,
    1.16535914265039241861803546612198019e-20,
    -3.03459520746162185808136435378163642e-18,
    4.22133869037964897758104077070695494e-16,
    -3.63973202637178622955876404229844115e-14,
    2.12924323542749494429187696474458807e-12,
    -0.000000000089802588324953028529584876820766253,
    0.00000000285198053421996659771873304636616825,
    -0.0000000704606955513168218259922282043406274,
    0.00000138881739389306051441232049802766131,
    -0.0000222812002673925639238617305874048174,
    0.00029571027746180783207646927225240524,
    -0.00329011804092891421781080888758368415,
    0.0310298169733110560489299832916291904,
    -0.250378523163958176394814347939352778,
    1.74204895854600739261795224745706943,
    -10.5206093967092211162025351415054389,
    55.458640962652894169696220960221528,
    -256.387742714967149433161761195903223,
    1043.62959374361628134652383563717017,
    -3752.70292941955401515544459365003351,
    11952.3191610371207692001633833695042,
    -33789.8414156469713726373701060281828,
    84923.9365366659253913359434845655127,
    -189952.315192216029038579987875681229,
    378328.857030650477142450790331579279,
    -670998.350205304619837554231908838722,
    1059218.8242526594356007106089418097,
    -1486622.91123180271663257629325166273,
    1851979.38941588982495753148396605442,
    -2042955.58240166376248620342440676336,
    1989246.92869765176873036573517384746,
    -1702684.08442372431113704032157537713,
    1274396.99909677346377904027580597805,
    -828489.974568088752850142125472209334,
    463837.697029317294729480978697469311,
    -221185.839975475999856190855446997583,
    88551.9450568484616968118477421137692,
    -29192.9489198401522077401695853122316,
    7713.95960381852123210855746953661816,
    -1570.20075043099077172700537470844742,
    231.070850536746490503715937241948803,
    -21.8742857142857142857142857142857143,
    1.0,
    // n = 45
    -1.14080711993820381120460780958456016e-27,
    4.67160515614694460688286898024877387e-24,
    -3.18603471649221622189411664452966378e-21,
    8.67663454458046884429164432860245103e-19,
    -1.26245032623645821684443424981165662e-16,
    1.13873019426528531159367969333011428e-14,
    -6.97040906792689796793706963796009344e-13,
    0.0000000000307693771712773067441793502589952696,
    -0.00000000102308179094497044924396339611159272,
    0.0000000264730771918375033239009874850051997,
    -0.000000546738710004054542331513025742949494,
    0.00000919515103188637184830271906931324148,
    -0.000127999167625026958844851618348918383,
    0.00149463643426762248866526735887429312,
    -0.0148040180156031179829702671736120462,
    0.125544879217379085607304173801045605,
    -0.918806273304609033779262401003620054,
    5.84203560940738043402964168338665371,
    -32.4557533855965579668313426854814095,
    158.308361819645230822567103938144741,
    -680.725955824474492537038546934022388,
    2589.28862407102667021928134867470769,
    -8736.79628756312593164899161201867542,
    26210.3888626893777949469748360560263,
    -70033.7872625405892499735657410220418,
    166880.510219882432669937010937178237,
    -354904.252503822368121585498373184485,
    673846.858178116963093185044779833855,
    -1142039.15574343199589169673173725088,
    1726531.0648535006398870841697588566,
    -2325452.01051454549462757551452266335,
    2785377.47425459838462795269190578133,
    -2959463.56639551078366719973514989266,
    2780102.13812911619071767247847414159,
    -2299259.18710941830698511630792154643,
    1665177.7715339017055556805062338653,
    -1048879.58222597094911762348006123753,
    569680.246992039756518161290355362999,
    -263851.903869997360913674702901431284,
    102711.580294381257045649592970953437,
    -32958.7159552223400773065466052363243,
    8485.30627573474880039057432926138432,
    -1684.40388491349574580329243713392942,
    241.945838462266830792538585361234732,
    -22.3743016759776536312849162011173184,
    1.0,
    // n = 46
    2.85210390369479387754290289864134973e-28,
    -1.22013005000063282081285386003876942e-24,
    8.69342660625450884829158375277623209e-22,
    -2.47356965036628291763389863045659724e-19,
    3.76070928628902370727410945351919087e-17,
    -3.54509528720845301472372717818409059e-15,
    2.26832384816383289108762119295021433e-13,
    -0.0000000000104691869915253825742505593520779123,
    0.0000000003640659776302951790195632014685094,
    -0.000000009855956074148252493457717519493895,
    0.000000213044271560667752582267609750323299,
    -0.00000375179262644500613638382959508361549,
    0.0000547136424689896728222641815949693926,
    -0.000669694983820433595344513582722425366,
    0.00695738677635672679607911333161630796,
    -0.0619287393058695313894674179770536654,
    0.476077183413872022556530775698600053,
    -3.18233411372909105986985812632754046,
    18.6040262553400672595249007607370341,
    -95.5871164072380127189245256725208639,
    433.450808631283142290815445261161917,
    -1740.85121515328351456636447121149583,
    6210.75354243375461063581404898393069,
    -19730.3938623402755166865281092359073,
    55920.2740938846283925947077705914856,
    -141603.828766718463080676557962754929,
    320691.023971685931094473381268592046,
    -649897.952143877847780554022137607919,
    1178678.55866094209665655024924047982,
    -1912411.30933372456335926664758800174,
    2773536.62771732822267979518890305111,
    -3590490.56829826519784248472894482766,
    4140818.73576064810763084176329202595,
    -4243132.67188899978581472736397010398,
    3850112.04249102833945524208135478706,
    -3080089.63399282267156419366508382965,
    2160641.90678760995700884164377750648,
    -1319903.42325048368347448675017878034,
    696075.38426157086886391353877849363,
    -313384.588585295975592411290185988474,
    118709.28877740483632408744125083171,
    -37103.3549385565251744663547179654667,
    9313.09109903527238314918542117607097,
    -1804.0132689786519417974345494371158,
    253.070826917851643872837605289375962,
    -22.8743169398907103825136612021857923,
    1.0,
    // n = 47
    -7.1304658658928377646678904958372695e-29,
    3.18375300912115206192421310639134083e-25,
    -2.36765098778309675005097314678636047e-22,
    7.03192343371579734765139024595549058e-20,
    -1.11606670497975012189152779475093572e-17,
    1.0984576525234029533016836895448654e-15,
    -7.33969431458819246069761374377705518e-14,
    3.53837790748334069506378368065383968e-12,
    -0.000000000128561063971894711920650807063756175,
    0.00000000363752186885184449610782577633333648,
    -0.0000000822079942360516856120368625451334044,
    0.00000151426413625281351636024610445689453,
    -0.0000231089874706407627931498427245378252,
    0.000296150562508365467795289522916000129,
    -0.00322318363534236913891487062771540881,
    0.0300756376456429341031159997193030905,
    -0.242545464884217210508999997736315246,
    1.70214170276143165378597681120832999,
    -10.4560133169630801589710004117083128,
    56.5041174838445825375971985264294171,
    -269.770940397227212012835855528747627,
    1142.06164662937652472332949291786888,
    -4300.23634809073909203435481371400522,
    14437.9916034930612027240415243054764,
    -43313.9748104791836081721245729164293,
    116293.602572788599907982136914548683,
    -279771.185676618124967166679304230993,
    603531.551491069288451183465417303338,
    -1167872.74249570550622371865385945711,
    2026997.51858450036137679904290549452,
    -3153870.71535690056227779918879193893,
    4394737.88205469750481332673848057065,
    -5475982.91652847228774358966620198088,
    6088680.30579039925700161368479800672,
    -6024532.66428953464674347552481769409,
    5286122.03545735979977201848326653987,
    -4094883.266903588577288183332107883,
    2785005.76131132625563805730510262165,
    -1651459.55670741802527309363004330898,
    846352.400190714732232864168044173331,
    -370680.924640490249813381015371245535,
    136731.145042035698892319103833115261,
    -41654.7550300177602477460953157683324,
    10200.0015736979194040308496053659802,
    -1929.15390265342049334334773100443303,
    264.445815869345281109986992339933516,
    -23.3743315508021390374331550802139037,
    1.0,
};

// (2*n*(n+.5)-.25) / ((2*n+1.5)*(2*n-.5))
static long double lJACOBI_ALPHA[] = {
    0.333333333333333333333333333333333333l,
    0.523809523809523809523809523809523810l,
    0.506493506493506493506493506493506494l,
    0.503030303030303030303030303030303030l,
    0.501754385964912280701754385964912281l,
    0.501144164759725400457665903890160183l,
    0.500805152979066022544283413848631240l,
    0.500597371565113500597371565113500597l,
    0.500460829493087557603686635944700461l,
    0.500366300366300366300366300366300366l,
    0.500298151460942158616577221228384019l,
    0.500247402276100940128649183572488867l,
    0.500208594075928243637880684188569045l,
    0.500178253119429590017825311942959002l,
    0.500154083204930662557781201848998459l,
    0.500134517083669626042507398439601829l,
    0.500118455342335939350864723999052357l,
    0.500105108261509354635274332562539416l,
    0.500093896713615023474178403755868545l,
    0.500084388185654008438818565400843882l,
    0.500076254384627116059173402470642062l,
    0.500069242487190139869824124082537045l,
    0.500063155235569028672476948339017305l,
    0.500057836899942163100057836899942163l,
    0.500053163211057947900053163211057948l,
    0.500049034029616553888398548592723350l,
    0.500045367933944288177116414118501043l,
    0.500042098172939294434621537425275743l,
    0.500039169604386995691343517430473952l,
    0.500036536353671903544026306174643771l,
    0.500034160005465600874496139919382387l,
    0.500032008194097689008386146853594520l,
    0.500030053495221494259782412694596382l,
    0.500028272547356516822165677127509189l,
    0.500026645350386357580602184918731681l,
    0.500025154701413694219449615133068370l,
    0.500023785738071452357166642880928595l,
    0.500022525566517997927647880344190656l,
    0.500021362956633198034607989745780816l,
    0.500020288090890647190099411645364171l,
    0.500019292356368406837211096963383108l,
    0.500018368171632195731236912677712061l,
    0.500017508841965192422173197464719683l,
    0.500016708437761069340016708437761069l,
    0.500015961691939345570630486831604150l,
    0.500015263913056751228745001068473914l,
    0.500014610911428654919493878028111394l,
    0.500013998936080857854803034969342330l,
};

// (n*n*(n-.5)*(n-.5)) / ((2*n-.5)**2*(2*n-1.5)*(2*n+.5))
static long double lJACOBI_BETA[] = {
    0l,
    0.0888888888888888888888888888888888889l,
    0.0653061224489795918367346938775510204l,
    0.0635727908455181182453909726636999364l,
    0.0630668677727501256913021618903971845l,
    0.0628506250145487557904048045811122233l,
    0.0627383202808533621388063732109100729l,
    0.0626725320467338347287261718934771297l,
    0.0626306844685688562397450409219758676l,
    0.0626024168881311738454595597452740310l,
    0.0625824265599124886179295184923702747l,
    0.0625677689984038834439182682794918809l,
    0.0625567021738527914561025858962869892l,
    0.0625481417132150677511108031817980614l,
    0.0625413838666524411762292054790023554l,
    0.0625359556958903491628039209027981060l,
    0.0625315298227085892971919513683760366l,
    0.0625278737843751839315875074783323933l,
    0.0625248188203958038426770641549301682l,
    0.0625222400126509715550811441222400127l,
    0.0625200432923554218218534834461769248l,
    0.0625181567280224133007342386318247239l,
    0.0625165245548401282337764651568207433l,
    0.0625151030019811111861504383082116693l,
    0.0625138573245990196466785257298989339l,
    0.0625127596587629188827452983765522236l,
    0.0625117874484888667690678686386608579l,
    0.0625109222768887769076079260615228261l,
    0.0625101489869806127933216619694767892l,
    0.0625094550129262476820902302274736489l,
    0.0625088298660401298247880731141415094l,
    0.0625082647359430659414435305409292754l,
    0.0625077521782950542645271337054302016l,
    0.0625072858682741100226250759358014808l,
    0.0625068604044429658749318401286927631l,
    0.0625064711515671281343432808324685505l,
    0.0625061141137874382619366175795073383l,
    0.0625057858316275578773529320825966201l,
    0.0625054832978509385509978861892195425l,
    0.0625052038883250828781839823557093059l,
    0.0625049453049100895427815298756695634l,
    0.0625047055280393577559120272350957998l,
    0.0625044827771571428430901562023013271l,
    0.0625042754775595923421139265505510973l,
    0.0625040822324815102880576155219607192l,
    0.0625039017995013815508333080556297147l,
    0.0625037330705176781129155364679885059l,
    0.0625035750546917580575963715315712799l,
};

// .5 * (2*n+3) / (2*(2*n+2.5)*(2*n+.5))
static long double lJACOBI_RN_PART2[] = {
    0.142857142857142857142857142857142857l,
    0.0649350649350649350649350649350649351l,
    0.0424242424242424242424242424242424242l,
    0.0315789473684210526315789473684210526l,
    0.0251716247139588100686498855835240275l,
    0.0209339774557165861513687600644122383l,
    0.0179211469534050179211469534050179211l,
    0.0156682027649769585253456221198156682l,
    0.0139194139194139194139194139194139194l,
    0.0125223613595706618962432915921288014l,
    0.0113805047006432459178624443344878773l,
    0.0104297037964121818940342094284522320l,
    0.00962566844919786096256684491978609626l,
    0.00893682588597842835130970724191063174l,
    0.00834005918751681463545870325531342480l,
    0.00781805259417199715707178393745557925l,
    0.00735757830565482446920327937775909186l,
    0.00694835680751173708920187793427230047l,
    0.00658227848101265822784810126582278481l,
    0.00625285953942351685221900259264907732l,
    0.00595485389835202880487467109818584684l,
    0.00568397120121258052292535051155740811l,
    0.00543666859456333140543666859456333141l,
    0.00520999468367889420520999468367889421l,
    0.00500147102088849661665195645778170050l,
    0.00480900099809454677433989656111060702l,
    0.00463079902332238780836911678033173360l,
    0.00446533490011750881316098707403055229l,
    0.00431128973328461819510412860796492510l,
    0.00416752066680330668852907016465122634l,
    0.00403303245630881505665450355290954484l,
    0.00390695437879425377171365029752960269l,
    0.00378852134577325417020073508623126944l,
    0.00367705835331734612310151878497202238l,
    0.00357196760074457916184534889570860794l,
    0.00347271775843204414632986061557490129l,
    0.00337883497769968914718205162859845925l,
    0.00328989532151249732963042085024567400l,
    0.00320551836072225603570703996753905457l,
    0.00312536173168190762819770806806343327l,
    0.00304911649094449138532750450020204989l,
    0.00297650313408271176944356900234618482l,
    0.00290726817042606516290726817042606516l,
    0.00284118116520351157222665602553870710l,
    0.00277803217632872363159019446225234301l,
    0.00271762952572981502586131322871920750l,
    0.00265979785536299241257664417504269676l,
    0.00260437642636595516176668009128742113l,
    0.00255121762659451101662156938538848087l,
    0.00250018565735079337574572369235339258l,
    0.00245115537469360557816329930272958759l,
    0.00240401126450992513222061954804588227l,
    0.00235864653367133252507439656122561446l,
    0.00231496230221939046405436975682276734l,
    0.00227286688371521592235395294551262363l,
    0.00223227514272732660358349301673218625l,
    0.00219310791998016667620191849266739135l,
    0.00215529151699364465321912130422768721l,
    0.00211875723315231905991275705510549274l,
    0.00208344094908483564922430566317130706l,
    0.00204928275103713700204928275103713700l,
    0.00201622659160927141635885607368098456l,
    0.00198421998281384266854152019373486446l,
    0.00195321371791960027254144901203724733l,
    0.00192316161897910947340605135281941366l,
    0.00189402030731547542757864456501616326l,
    0.00186574899456859737136697209668725901l,
    0.00183830929218383092921838309292183831l,
    0.00181166503747148908439231019876181167l,
    0.00178578213457958129108248793647175045l,
    0.00176062840890902599081518326541165462l,
    0.00173617347366404444604092579953781865l,
    0.00171238860737375502358902673423029879l,
    0.00168924664134686242276514936794966272l,
    0.00166672185613210150446482775367837787l,
    0.00164478988615473925242687135163027703l,
    0.00162342763178566565769766540632822565l,
    0.00160261317817587914050936558975144184l,
    0.00158232572025675473951336020301537543l,
    0.00156254549336646059182623717693644031l,
    0.00154325370901619943003758722223800191l,
    0.00152443249535741012777516006541201253l,
    0.00150606484195337511836587455471885287l,
    0.00148813454849645577422621406243120680l,
    0.00147062617714595319796692381124384014l,
    0.00145352500819183169356668150998563279l,
    0.00143681699877665295532730691232132154l,
    0.00142048874443240640423739015288311063l,
};

// (n+1)*(2*n+3)*(2*n+1)*(n+.5)/(4*(2*n+1.5)*(2*n+.5)**2*(2*n-.5))
static long double lJACOBI_SN[] = {
    0.133333333333333333333333333333333333l,
    0.0816326530612244897959183673469387755l,
    0.0741682559864378046196228014409832592l,
    0.0709502262443438914027149321266968326l,
    0.0691356875160036313694452850392234456l,
    0.0679665136375911423170402376451525790l,
    0.0671491414786433943522066127430112104l,
    0.0665451022478544097547291059795993593l,
    0.0660803289374717946146517575089003660l,
    0.0657115478879081130488259944169887885l,
    0.0654117584983313326913690986558324210l,
    0.0651632314310966577667735269752989471l,
    0.0649538394714156472799996802272518330l,
    0.0647750047190328855039516771032524395l,
    0.0646204875524200274682307182662247096l,
    0.0644856401296682327127291998486377877l,
    0.0643669288956803364001636106394598167l,
    0.0642616193431845761716403159370115618l,
    0.0641675621182470497538990689675621182l,
    0.0640830443746643073673998205323313479l,
    0.0640066842691658040936088633611538840l,
    0.0639373546583592220572713848194757602l,
    0.0638741269802850483858493608801293143l,
    0.0638162293521948325559843283492718283l,
    0.0637630148519381772604002043440832681l,
    0.0637139372071136526684730199586351051l,
    0.0636685319486830135170080728404399155l,
    0.0636264016474624094503452630760745891l,
    0.0635872042372870450559193721279473325l,
    0.0635506436971407986552012076660438679l,
    0.0635164625542647282953377810335249089l,
    0.0634844358060809144874103701695775485l,
    0.0634543659571873541138769710257378668l,
    0.0634260789398024212554455436599970685l,
    0.0633994207394466585362624705586466726l,
    0.0633742545875900415711301817125560514l,
    0.0633504586131360383892090527864154933l,
    0.0633279238675595035319320689022355891l,
    0.0633065526561241224022632641807825021l,
    0.0632862571212214656620662989991154329l,
    0.0632669580344788621187890031769872120l,
    0.0632485837625994897816983723475668191l,
    0.0632310693784614480670222280220691334l,
    0.0632143558942142547231491793347102729l,
    0.0631983895972736191236203448118033782l,
    0.0631831214734580876576211401252492506l,
    0.0631685067042097554837410137819071446l,
    0.0631545042270307306418800612740449121l,
    0.0631410763500519566499298347892141201l,
    0.0631281884131127460009319915165060210l,
    0.0631158084889316866582675155969963302l,
    0.0631039071189426329431813657385193769l,
    0.0630924570791929844168441760812401272l,
    0.0630814331723869622592583712817914834l,
    0.0630708120427293346371691454965353148l,
    0.0630605720107052623408921603962253696l,
    0.0630506929253359486693139231697881124l,
    0.0630411560317907882669526183723252281l,
    0.0630319438525254492239910205987482423l,
    0.0630230400803605451462935505127575629l,
    0.0630144294821244268441141487100133182l,
    0.0630060978116620368437903104284681857l,
    0.0629980317311645809853106304095146108l,
    0.0629902187399059982519710116900037282l,
    0.0629826471095851879522211025629876426l,
    0.0629753058255704593910133559737027347l,
    0.0629681845334270223004317456018676823l,
    0.0629612734901814788868752070834879740l,
    0.0629545635198408417968641138972612553l,
    0.0629480459727389605947825152324343429l,
    0.0629417126883315527433774503501116480l,
    0.0629355559611032858765030867631851152l,
    0.0629295685092873800533889095865830818l,
    0.0629237434461307009797940084537341416l,
    0.0629180742534659027450976347026882854l,
    0.0629125547573773684532637358197768559l,
    0.0629071791057699320890454947020834937l,
    0.0629019417476690252459380084028850472l,
    0.0628968374140983050099351803916073865l,
    0.0628918611003962662746221735204718309l,
    0.0628870080498470665701343133259403169l,
    0.0628822737385130048545800855496113614l,
    0.0628776538611669803523093451739050315l,
    0.0628731443182329721334066277492113016l,
    0.0628687412036512628117090270546644992l,
    0.0628644407935929008720508221776268525l,
    0.0628602395359548608299450549157781435l,
    0.0628561340405736106069856843147540300l,
};

static long double lJACOBI_COEF[] = {
    // n = 0
    1.0l,
    // n = 1
    -0.333333333333333333333333333333333333l,
    1.0l,
    // n = 2
    0.0857142857142857142857142857142857143l,
    -0.857142857142857142857142857142857143l,
    1.0l,
    // n = 3
    -0.021645021645021645021645021645021645l,
    0.454545454545454545454545454545454545l,
    -1.36363636363636363636363636363636364l,
    1.0l,
    // n = 4
    0.00543900543900543900543900543900543901l,
    -0.195804195804195804195804195804195804l,
    1.07692307692307692307692307692307692l,
    -1.86666666666666666666666666666666667l,
    1.0l,
    // n = 5
    -0.0013639611162830977072463140574595683l,
    0.0750178613955703738985472731602762563l,
    -0.650154798761609907120743034055727554l,
    1.95046439628482972136222910216718266l,
    -2.36842105263157894736842105263157895l,
    1.0l,
    // n = 6
    0.000341696263085413711339138718328380463l,
    -0.0266523085206622694844528200296136761l,
    0.333153856508278368555660250370170952l,
    -1.51029748283752860411899313501144165l,
    3.07453416149068322981366459627329193l,
    -2.86956521739130434782608695652173913l,
    1.0l,
    // n = 7
    -0.0000855506199428665440241695457740685901l,
    0.00898281509400098712253780230627720196l,
    -0.152707856598016781083142639206712433l,
    0.967149758454106280193236714975845411l,
    -2.90144927536231884057971014492753623l,
    4.44888888888888888888888888888888889l,
    -3.37037037037037037037037037037037037l,
    1.0l,
    // n = 8
    0.0000214114454806951862129456593984042634l,
    -0.00291195658537454532496060967818297982l,
    0.0645483709758024213699601811997227193l,
    -0.542206316196740339507665522077670842l,
    2.22691879866518353726362625139043382l,
    -4.94870844147818563836361389197874181l,
    6.07341490545050055617352614015572859l,
    -3.87096774193548387096774193548387097l,
    1.0l,
    // n = 9
    -0.00000535749588218260503510068880185180269l,
    0.000916131795853225461002217785116658261l,
    -0.0256516902838903129080620979832664313l,
    0.275328142380422691879866518353726363l,
    -1.4749721913236929922135706340378198l,
    4.4249165739710789766407119021134594l,
    -7.77712609970674486803519061583577713l,
    7.94805194805194805194805194805194805l,
    -4.37142857142857142857142857142857143l,
    1.0l,
    // n = 10
    0.00000134030215763542648487272949235516339l,
    -0.000281463453103439561823273193394584312l,
    0.00971048913206866488290292517211315876l,
    -0.129473188427582198438705668961508784l,
    0.873944021886179839461263265490184289l,
    -3.37925021795989537925021795989537925l,
    7.93611793611793611793611793611793612l,
    -11.5117315117315117315117315117315117l,
    10.0727650727650727650727650727650728l,
    -4.87179487179487179487179487179487179l,
    1.0l,
    // n = 11
    -0.000000335265599272389721967597110679879215l,
    0.0000848221966159145996578020690020094413l,
    -0.00353425819232977498574175287508372672l,
    0.0572549827157423547690163965763563729l,
    -0.474398428216150939514707285918381375l,
    2.28765464273121675277092180098419463l,
    -6.86296392819365025831276540295258389l,
    13.1980075542185581890630103902934306l,
    -16.277542650202888433177712814695231l,
    12.4475326148610323312535450935904708l,
    -5.37209302325581395348837209302325581l,
    1.0l,
    // n = 12
    0.0000000838560293215575238396495846570478035l,
    -0.0000251568087964672571518948753971143411l,
    0.00124526203542512922901879633215715988l,
    -0.0240750660182191650943633957550384244l,
    0.239890836395826680761692407701990015l,
    -1.40735957352218319380192879185167475l,
    5.22428932595355882547685687884333809l,
    -12.744969564414176475339145352782649l,
    20.7105755421730367724261111982718046l,
    -22.199571169388091703777008081807686l,
    15.0723404255319148936170212765957447l,
    -5.87234042553191489361702127659574468l,
    1.0l,
    // n = 13
    -0.0000000209723962889049429370872310566846247l,
    0.00000736131109740563497091761810089630328l,
    -0.00042695604364952682831322184985198559l,
    0.00970613405896590989698724338663513909l,
    -0.114393722837812509500206797056771282l,
    0.800756059864687566501447579397398975l,
    -3.59126960181738666188528005305500146l,
    10.7738088054521599856558401591650044l,
    -22.086308051176927970594472326288259l,
    31.0363152353139837495281800663527822l,
    -29.4028249597711424995530126944394779l,
    17.9471788715486194477791116446578631l,
    -6.37254901960784313725490196078431373l,
    1.0l,
    // n = 14
    0.00000000524489773400058435716521147180895075l,
    -0.000002129428480004237249009075857554434l,
    0.000143026612906951268558442928432406151l,
    -0.00377590258074351348994289331061552238l,
    0.0519186604852233104867147830209634327l,
    -0.426886763989613886224099327061254891l,
    2.27026142667203748582816460300758283l,
    -8.18292030712558566320481307457678206l,
    20.5254917703733440385387394620634283l,
    -36.2214560653647247738918931683472265l,
    44.8002219755826859045504994450610433l,
    -38.0123095550398547068913328624760367l,
    21.0720411663807890222984562607204117l,
    -6.87272727272727272727272727272727273l,
    1.0l,
    // n = 15
    -0.00000000131161433074471943038237967522787023l,
    0.000000609900663796294535127806548980959656l,
    -0.0000469623511123146792048411042715338935l,
    0.00142452465040687860254684682956986144l,
    -0.0225888908850233606975285711546078028l,
    0.215347426437222705316439045007261053l,
    -1.33776431574638347242030315837843988l,
    5.68917351861374070139183870651050805l,
    -17.0675205558412221041755161195315241l,
    36.7007468161553076619199006753324931l,
    -56.7895766523666339610760568344618577l,
    62.6897924084566738531359068951851676l,
    -48.1530289514232422350174357310842592l,
    24.4469223907225691347011596788581624l,
    -7.37288135593220338983050847457627119l,
    1.0l,
    // n = 16
    0.00000000032798890758409455440995755084412784l,
    -0.0000001731781432044019247284575868456995l,
    0.0000151530875303851684137400388489987062l,
    -0.000523286622715967815887822674918755321l,
    0.009475225632749845809111646292278891l,
    -0.103595800251398314179620666128915875l,
    0.742436568468354584953948107257230437l,
    -3.67138962429406113438765547544784282l,
    12.9416484256365654987164855509536459l,
    -33.1576874696047952646853747449269883l,
    62.3015496139416416289088357049417622l,
    -85.7657695984131689956407348665432051l,
    85.4550240563899328760913119141281935l,
    -59.9499861072520144484579049736037788l,
    28.0718188914910226385636221701795472l,
    -7.87301587301587301587301587301587302l,
    1.0l,
    // n = 17
    -0.0000000000820160551915221514930984553086693956l,
    0.0000000487995528389556801383935809086582904l,
    -0.00000481488921344362710698816664965428465l,
    0.000187780679324301457172538499336517101l,
    -0.00384950392614817987203703923639860058l,
    0.0478193932159296121881934429588181717l,
    -0.391249580857605917903400896935785041l,
    2.22281355278442043468195894193187765l,
    -9.07648867386971677495133234622183373l,
    27.2294660216091503248539970386655012l,
    -60.7647031219067354617794460231272237l,
    101.27450520317789243629907670521204l,
    -125.492321664807388453674942873849701l,
    113.90841504959439875025879430087896l,
    -73.5281832595265431086326608714668416l,
    31.9467278989667049368541905855338691l,
    -8.37313432835820895522388059701492537l,
    1.0l,
    // n = 18
    0.0000000000205081991446447510877823245056378873l,
    -0.0000000136584606303334042244630281207548329l,
    0.00000150925989965184116680316460734340904l,
    -0.0000660049662781071870281917321611517552l,
    0.00152047154462068341547084525871224579l,
    -0.0212866016246895678165918336219714411l,
    0.197062327161898877817236520348856826l,
    -1.27332580627688505666522059302338256l,
    5.95279814434443763990990627238431349l,
    -20.6208040294284441121062112703508899l,
    53.7226210240372622920661819938088973l,
    -106.049849294203426862260515104661719l,
    158.690535356905852514904321515309022l,
    -178.709956740392436986015328229548006l,
    148.924963950327030821679440191290005l,
    -89.0126221312299494566359872407710376l,
    36.0716472749540722596448254745866503l,
    -8.87323943661971830985915492957746479l,
    1.0l,
    // n = 19
    -5.12798623361071492952949812752845071e-12l,
    0.00000000379983779910553976278135811249858198l,
    -0.000000467380049289981390822107047837325583l,
    0.0000227769877353984264460640167979390001l,
    -0.000585693970338816680041646146232717145l,
    0.00917587220197479465398578962431256861l,
    -0.0953734595538592292823371467011882131l,
    0.694863776749545813342742068822942696l,
    -3.68277801677259281071653296476159629l,
    14.5626189552118866044673362332076193l,
    -43.6878568656356598134020086996228579l,
    100.425333314513140090547474543288907l,
    -177.563632816965262189083940496829662l,
    240.940190991635940385803131566467326l,
    -248.589085943751367064717516695561527l,
    191.442169634843006819954869179340486l,
    -106.528304071001350569168435269149141l,
    40.4465753424657534246575342465753425l,
    -9.37333333333333333333333333333333333l,
    1.0l,
    // n = 20
    1.2822073091109481189897035429838523e-12l,
    -0.00000000105140999347097745757155690524675889l,
    0.000000143166994110964763805993665264433668l,
    -0.00000773101768199209724552365792427941808l,
    0.000220610111711131632113335810053544823l,
    -0.00384351839070060443504122833515509203l,
    0.0445498722558479150425233284302067485l,
    -0.363252804547682999577497908738608873l,
    2.1643812937632778724825917062342112l,
    -9.67605754858877166521629233375294418l,
    33.0513755212321726880282827610824251l,
    -87.2785241036866897822391882435509928l,
    179.300446256486786617860941065555844l,
    -286.88071401037885858857750570488935l,
    355.944589605470065285827645967177527l,
    -338.761057693481855237546311334279302l,
    242.460031212068666551066412346107161l,
    -126.200230149597238204833141542002301l,
    45.0715107677132993588689791221436791l,
    -9.87341772151898734177215189873417722l,
    1.0l,
    // n = 21
    -3.20599507156850184147209825339261597e-13l,
    0.000000000289501354962635716284930472281353222l,
    -0.0000000434252032443953574427395708422029833l,
    0.00000258524709981633694642442911747248427l,
    -0.0000814352836442146138123695172003832545l,
    0.0015689864648785348927849860313940507l,
    -0.0201590988214696604406313356760932575l,
    0.182761060744093075423306065195350961l,
    -1.21536105394821895156498533354908389l,
    6.09269234234172507091727941720357742l,
    -23.4728989189165407995339396494369404l,
    70.4186967567496223986018189483108211l,
    -165.841133666258168692359356218847948l,
    307.699088002319002219977513230662501l,
    -449.33835073354520959107827328922143l,
    513.381977734648204981071038677570231l,
    -453.34940775761272939860708657414468l,
    303.041047966318669384095646105711684l,
    -148.153401227978016143335649207236824l,
    49.9464524765729585006693440428380187l,
    -10.3734939759036144578313253012048193l,
    1.0l,
    // n = 22
    8.01607151768784300863003336108579705e-14l,
    -0.0000000000793591080251096457854373302747493908l,
    0.0000000130545732701305367317044408301962748l,
    -0.000000852898786981861733138023467572823287l,
    0.0000295163901637651435503837407170737773l,
    -0.000625747471471821043268135303201964079l,
    0.00886475584585079811296525012869449112l,
    -0.0888423882573178887804869023886744604l,
    0.655212613397719429756090905116474146l,
    -3.65719981595851237262550086908149621l,
    15.764456048789587543054132693567081l,
    -53.2306308140947111843386298743823516l,
    142.141213441984790372672355860216642l,
    -301.776730076829247252750540133998408l,
    510.146377034639917974887817845568738l,
    -684.88617054765451056858502441795895l,
    724.929918422416568646183745603686388l,
    -597.001109289048938885092496379506437l,
    374.310219316149731523192914396674671l,
    -172.512818006305139421784501087514358l,
    55.0713995943204868154158215010141988l,
    -10.8735632183908045977011494252873563l,
    1.0l,
    // n = 23
    -2.00426531958487246480748457293477454e-14l,
    0.0000000000216661081047124713445689082334249128l,
    -0.00000000389267742281334068490754717927200934l,
    0.000000277937167988872524902398868600021467l,
    -0.0000105219070738644598713051000255722412l,
    0.000244342064270852457011418433927177602l,
    -0.00379840845366507001354114110923157909l,
    0.0418659744947919255338655443138381739l,
    -0.340509925890974327675439760419217148l,
    2.10314954226778261211301028494222356l,
    -10.072979386650958826435996627881176l,
    37.9808010639523166139642989735259926l,
    -113.942403191856949841892896920577978l,
    273.81235967027777792774877690760431l,
    -528.791064971700470601207955403574461l,
    820.537859438845557829460620453822439l,
    -1019.055083496630773433362383466844l,
    1004.5231036963223132061486596384398l,
    -774.917822851448641616171823149653563l,
    457.455044784283337511680379241971876l,
    -199.403481059815813787142729413167228l,
    60.4463514014075811828620817384862329l,
    -11.3736263736263736263736263736263736l,
    1.0l,
    // n = 24
    5.01123043685680053736246001314421841e-15l,
    -5.89320699374359743193825297545760085e-12l,
    0.00000000115212196727687329794392845670196097l,
    -0.0000000895582809229889510268413720342990992l,
    0.00000369427908807329422985720659641483784l,
    -0.0000935884035645234538230492337758425586l,
    0.00158958485448228472326724531913211376l,
    -0.0191798260463906442433784105539237463l,
    0.171179947464036499872152314193769435l,
    -1.16357611348103241743162357360470727l,
    6.15470523183388199746727206038279373l,
    -25.7378582422144156257722286161462283l,
    86.0726201361011073282165471474745245l,
    -231.998816120690984675439062465192872l,
    506.34662248563508560115668395180984l,
    -896.291722560779346926185394581364545l,
    1284.8052716546655557752375313454641l,
    -1484.05314800752812859599629289101735l,
    1368.62679205138705192741880344393822l,
    -992.887146438417349193433271346242523l,
    553.725523975271213973260862866173715l,
    -228.950390865501222037724584413888319l,
    66.0713073005093378607809847198641766l,
    -11.8736842105263157894736842105263158l,
    1.0l,
    // n = 25
    -1.25293806923806915445249052291567931e-15l,
    1.59749603827853817192692541671749112e-12l,
    -0.000000000338669160115050092448508188344108117l,
    0.0000000285610991697025577964908572170197846l,
    -0.00000127912922710025026702855481964795749l,
    0.0000352186913861602240188528760343070964l,
    -0.000651012174107810201560613769119009963l,
    0.0085633139824950418820665349630269772l,
    -0.0834923113293266583501487158895130277l,
    0.621553873229431789939995996066374762l,
    -3.61155513708048787417766094556461967l,
    16.6506762813451064328970082555251946l,
    -61.6557650707778941102200812940099597l,
    184.967295212333682330660243882029879l,
    -452.142277185704556808280596156073037l,
    903.245146837648873256082386343971194l,
    -1475.05759866632174866416680027946909l,
    1964.11412870542307709827557898175296l,
    -2119.99620241220268639178951382157462l,
    1836.52587093745581225120883914272965l,
    -1257.3138654879505176181352821823303l,
    664.434156558673037765681246681719263l,
    -261.278547822226606816948650915010112l,
    71.9462667916276163698844111215245236l,
    -12.3737373737373737373737373737373737l,
    1.0l,
    // n = 26
    3.13264627327522625274529255993817349e-16l,
    -4.31678656457326177628301314759480307e-13l,
    0.0000000000989263587714705823731523846323809038l,
    -0.00000000902208391995811711243149747847313842l,
    0.000000437248852835113032913197931367430316l,
    -0.0000130397324556604820037669249754464774l,
    0.000261387364224830571075509723371449843l,
    -0.0037341052032118653010787103338778549l,
    0.0396126326974058710689433187918875774l,
    -0.321561371308353541618481058428263863l,
    2.04276092194306697228161388169954991l,
    -10.3287651810800962061685065533553l,
    42.100945031576479101230325625089538l,
    -139.645596135505982988080895457989298l,
    379.407479447525514626346771522103199l,
    -847.779471317229425785767958435596114l,
    1560.52955103352916480323819768487752l,
    -2364.43871368716540121702757224981443l,
    2938.65954415404842722687712551048365l,
    -2976.28107459129798034926957804191232l,
    2430.62954424956001728523682206756173l,
    -1575.25120289344307740436950837828042l,
    790.955942256221418358430778519749683l,
    -296.512952266100396447411731464408577l,
    78.0712294530423916178025569547245987l,
    -12.8737864077669902912621359223300971l,
    1.0l,
    // n = 27
    -7.83231275623507836578685073508351521e-17l,
    1.16309844430090913731934733415990201e-13l,
    -0.0000000000287285315742324556917878791537495796l,
    0.00000000282497227146619147635914145011870866l,
    -0.00000014770569305094658290677796724906391l,
    0.00000475612331624047996959825054541985791l,
    -0.000103049338518543732674628761817430255l,
    0.0015933013109405607898154139327156524l,
    -0.0183229650758164490828772602262300026l,
    0.161553463315531959560793621210354729l,
    -1.11726974103478418348885693826529533l,
    6.16674857064653607769823634756818853l,
    -27.5269356486830885787109680442174213l,
    100.367442288275261433146145022761982l,
    -301.102326864825784299438435068285946l,
    746.87220847620004887148062399696675l,
    -1535.90655775347590695344805741311711l,
    2620.07589263828242950882315676355271l,
    -3701.37705467947835279817874526914589l,
    4312.1305942851959757350048255696024l,
    -4113.10918224126385377800460285100537l,
    3176.79164482048834234886534366541065l,
    -1954.43206901218204571568671248759936l,
    934.728380831913152298806688581025782l,
    -334.778604482351873695671899101714908l,
    84.4461949265687583444592790387182911l,
    -13.3738317757009345794392523364485981l,
    1.0l,
    // n = 28
    1.95824002707753632998638097971961596e-17l,
    -3.12535108321574798265826404363250707e-14l,
    8.29780712593781089395769103584430628e-12l,
    -0.000000000877354806782491205187793198856604651l,
    0.0000000493512078815151302918133674356840116l,
    -0.00000171084187322585785011619673777037907l,
    0.0000399455655551673779852887753470326386l,
    -0.0006663447089312536239743775931515994l,
    0.00827933300847082627788164159490862254l,
    -0.0790053999501137670961254688141607118l,
    0.592540499625853253220941016106205339l,
    -3.55524299775511951932564609663723203l,
    17.2996063260330634581679083615355167l,
    -68.985507072427231513186489958615476l,
    227.214170119502389507717407403376369l,
    -621.574396418868605779732677724179033l,
    1417.34000473737982487273721472993243l,
    -2698.25155982089421205718956387088741l,
    4287.22192282653191471309008481707666l,
    -5671.57380971361974492627849058304594l,
    6216.91744526300625886149757621603113l,
    -5603.16833626491621007726146242002341l,
    4104.6465719149967585449706061914125l,
    -2403.30031167196911659734510855265312l,
    1097.25147208427668000676660541189393l,
    -376.200504714609147430891407569792205l,
    91.071162906025291346392263823456484l,
    -13.8738738738738738738738738738738739l,
    1.0l,
    // n = 29
    -4.89597679721040056646845079115739304e-18l,
    8.3770163000269953692275193036702995e-15l,
    -2.38465730674101801510676716177814526e-12l,
    0.000000000270420138584431442913107396145641672l,
    -0.0000000163217869359888978043982678387905152l,
    0.000000607533180395142307163713302888313622l,
    -0.00001524355979900538879792589741792496l,
    0.000273546518151382416560582313005180875l,
    -0.00366096423459266800830245995571933738l,
    0.0376863965325715824384076760147578848l,
    -0.305458161369264405027093795066984961l,
    1.98481688404877000842280427011058193l,
    -10.4850109309532850444943790790624219l,
    45.521078226384877531635596555560238l,
    -163.779540708686331859852939988259057l,
    491.338622126058995579558819964777172l,
    -1234.29016767957562195994010015345233l,
    2602.7901396879464541508184286658362l,
    -4610.65681887579086163859264506519555l,
    6853.67905508563506459790798590772312l,
    -8523.16497876034104187175736709037363l,
    8820.13936826418567747704508022941103l,
    -7533.48055978590066321506598818748849l,
    5247.96085372525060693532616181949682l,
    -2931.04196617633677515004918612259131l,
    1280.08771584027769363696025679639702l,
    -420.903653172218004845938666638935973l,
    97.9461331281262023855328972681800693l,
    -14.3739130434782608695652173913043478l,
    1.0l,
    // n = 30
    1.22408211097388525259474805746023739e-18l,
    -2.24007026308221001224838894515223442e-15l,
    6.82101395108532948729634433798855382e-13l,
    -0.000000000082761635939835331112528977967594453l,
    0.00000000534699283625578978509160432654922734l,
    -0.00000021316678107206415276565195915176253l,
    0.00000573289449095324047210654890142997713l,
    -0.000110373968660989860517919490937421098l,
    0.00158662579950172924494509268222542829l,
    -0.0175669549304309107250783464293455916l,
    0.153387253839920425752131456454128087l,
    -1.07570281913710428449546735695102814l,
    6.14631647021454150959910152866583833l,
    -28.9349667674715338759588471964884081l,
    113.213798542567192070219933871974486l,
    -370.61252672325444024826019731883142l,
    1019.93165116379498173160316399234857l,
    -2367.11409949244396829687579236726886l,
    4640.29509979867984261371683106916991l,
    -7683.21976694973447624803185115862558l,
    10726.9568284721292879924444691176196l,
    -12583.3059195782236711641915375247337l,
    12330.5756738361663247031771197520382l,
    -10007.4237352873233939619988218277412l,
    6645.00033486720321106164638080583169l,
    -3547.61650530869461227291161881388892l,
    1484.86211195047172685630916172074536l,
    -469.013050036067938881238113974686865l,
    105.071105365223012281835811247575953l,
    -14.8739495798319327731092436974789916l,
    1.0l,
    // n = 31
    -3.06041089493638851367671673843280476e-19l,
    5.9769824778107667672106277901592677e-16l,
    -1.942519305288499199343454031801762e-13l,
    0.0000000000251621000678370262954955412252721571l,
    -0.00000000173618490468075481438919234454377884l,
    0.0000000739614769394001550929795938775649787l,
    -0.00000212695277622699233888598892696391408l,
    0.0000438245764332484685210025190995311968l,
    -0.000674898477072026415223438794132780431l,
    0.00801497080287498036902606724796903296l,
    -0.0751719893195958685137076412414779828l,
    0.567206828502405189694339474822061143l,
    -3.49366524802206095101585908404892733l,
    17.7693189384014361600898925105626981l,
    -75.3080659770346580118095444495276252l,
    267.819719693040496423607736237745371l,
    -803.459159079121489270823208713236112l,
    2040.87219552183265991251884566196339l,
    -4399.21339923595040025587395620467663l,
    8053.75198409198885509147906349277215l,
    -12514.2915445121672979113751601964613l,
    16467.7030428946405906313450133595711l,
    -18278.10591441794145894599605076908l,
    17006.5855029801716183236658907155787l,
    -13146.9348923747425985622665396311921l,
    8338.91298887769387680235191942321326l,
    -4263.78808933565343022020709002182397l,
    1713.26216028511580878869257635398238l,
    -520.65369546326896007344683489198945l,
    112.446079419471880669219915339649264l,
    -15.373983739837398373983739837398374l,
    1.0l,
    // n = 32
    7.65150919181261480994197715580459975e-20l,
    -1.59151391189702388046793124840735675e-16l,
    5.50929065835019766621982200490346661e-14l,
    -7.60282110852327277938335436676678392e-12l,
    0.000000000559078880801764951883940237184743146l,
    -0.0000000253946051635290569255727521067914442l,
    0.000000779152658426459701125527621458373857l,
    -0.0000171413584853821134247616076720842249l,
    0.000282118191738580616782534792936386201l,
    -0.00358456055385490666029573619260349526l,
    0.036015400512152720076339791535158276l,
    -0.291553242241236305379893550522709854l,
    1.9299557013577490214821214376992424l,
    -10.5702189182055177176559266433989276l,
    48.3489643110511643752039607577691689l,
    -186.060152314252067043888345536794457l,
    605.82085884580058120137031863290937l,
    -1675.99638668214349736992287792918956l,
    3950.56291146505252951481821226166111l,
    -7946.08244212174150317774246392317042l,
    13640.7748589756562471217912297347759l,
    -19962.1095497204725567635969215630867l,
    24836.5781606987274834151729140377939l,
    -26156.3963238276453690072835519818312l,
    23165.1063187090582656367697415158239l,
    -17094.902948663664222151542731698208l,
    10378.1273557121038452729953989570569l,
    -5091.15681600971132032260151646949961l,
    1967.03786073102482830645967681776121l,
    -575.950589590935279431534472825043211l,
    120.07105511811023622047244094488189l,
    -15.8740157480314960629921259842519685l,
    1.0l,
    // n = 33
    -1.91299049265686120906591239027601834e-20l,
    4.22962197926432013324473229490027655e-17l,
    -1.55650088836926980903406148452330177e-14l,
    2.2839056368671752331226462182905248e-12l,
    -0.000000000178634048026396920019235543502008904l,
    0.00000000863397898794251780092971793593043036l,
    -0.000000282043313606122248163704119240394058l,
    0.00000661097129584460170695803171801934644l,
    -0.00011602254624207275995711345665123953l,
    0.00157350838857713056804581975523739886l,
    -0.0168945111194597176779656436878120719l,
    0.146345959956878333651988108308709766l,
    -1.03820793331727455540069824662483232l,
    6.10466264790557438575610569015401407l,
    -30.0388162039798104695935359356784819l,
    124.643823559042661833600764054941747l,
    -438.766362770339692664247850886952198l,
    1316.29908831101907799274355266085659l,
    -3376.41162969937592069249774777768929l,
    7420.42100694955305472248793786135129l,
    -13984.6395900203115262077657290463928l,
    22593.0704642488424308420466075534639l,
    -31238.6217412658413314391088400422101l,
    36852.5189817252099185383110083976218l,
    -36917.8603274374886595286271626678303l,
    31191.8248480798373572343911129479219l,
    -22017.7587162916498992242760797279449l,
    12816.7666042424488931193724489261901l,
    -6042.18997057144019247056129735091821l,
    2248.00171318901132387743206162783708l,
    -635.028732539268735558596627578485052l,
    127.946032309604118586898633055210367l,
    -16.3740458015267175572519083969465649l,
    1.0l,
    // n = 34
    4.78274259066368697716339778331887849e-21l,
    -1.12203141176970096484253311996660889e-17l,
    4.38153266296068226771009183346960773e-15l,
    -6.82350686711743585158051634865666911e-13l,
    0.0000000000566594766644572798390167875379526988l,
    -0.00000000290851980210880703173619509361490521l,
    0.000000100960891918655710753145802416238603l,
    -0.00000251625607551111156030917230637394673l,
    0.0000469910822101700083887737928215334552l,
    -0.000678760076369122343393399229644372131l,
    0.00777001666369916366779285960250794413l,
    -0.0718474268123870718372534550257877432l,
    0.544842986660601961432505367278890386l,
    -3.42999615602335880951047994293110686l,
    18.1027574901232826057497552543586195l,
    -80.7341368525038350693207475711625791l,
    306.171192378144584204420012462412926l,
    -992.191136797623625817532232899584134l,
    2757.66139767085550604206180921773305l,
    -6590.14388063589936010051755261136773l,
    13560.4883697700236832837572717195451l,
    -24034.0362976411801866330006929663483l,
    36660.7974392137663946209513741547998l,
    -48030.9578044191953923729565829506362l,
    53864.5049845658529887870479409863075l,
    -51446.0986383200391811272212987379427l,
    41552.6181309508008770642941259037229l,
    -28108.2699865551189720462870117923157l,
    15715.0782197558165161895150111384311l,
    -7130.25327575127791115676724643304494l,
    2558.02871757178614326810576355083816l,
    -698.013124414088656756394803803401634l,
    136.071010860484544695071010860484545l,
    -16.8740740740740740740740740740740741l,
    1.0l,
    // n = 35
    -1.19574843638868947635745086627008247e-21l,
    2.97143486442589334874826540268115494e-18l,
    -1.22918355558417788193219912157577109e-15l,
    2.02815286671389350518812855060002231e-13l,
    -0.0000000000178477452270822628456555312452801963l,
    0.000000000971313956913876926866897689326471127l,
    -0.0000000357620138681927413982812331070200733l,
    0.000000945924916271867346655636572402168313l,
    -0.0000187608441727253690420034586859763382l,
    0.000288034137004783607056641336296460251l,
    -0.00350795259488983824594246343257899485l,
    0.0345480179799756796948878974420658584l,
    -0.279388319316325061880397779314097811l,
    1.87834916217283156987282814708093451l,
    -10.6042251642243983336206753065362811l,
    50.6808830262586761737870895684802952l,
    -206.401983292424447320665163161956041l,
    720.01547469389419502057348361488052l,
    -2160.04642408168258506172045084464156l,
    5589.081714658009419953441678643532l,
    -12496.6134748250877287164131891722049l,
    24165.9250122924170363679767247058318l,
    -40412.7836886327735217062782013579554l,
    58374.0208835806728646868462908503801l,
    -72657.0259933929651613655427237180263l,
    77639.2220615113399152877513676301195l,
    -70847.2539173670598020348259086217531l,
    54806.3662379631972053476955142168278l,
    -35588.5495051709072761998022819589791l,
    19139.8793164530771739513758189119978l,
    -8369.6421417710066286092456970835516l,
    2899.05637380222598717030985277087588l,
    -765.028765308920746614387322258981136l,
    144.445990652733287822296906999947487l,
    -17.3741007194244604316546762589928058l,
    1.0l,
    // n = 36
    2.98951935120536807534489402215319434e-22l,
    -7.85645685496770730200638149021859471e-19l,
    3.43719987404837194462779190197063519e-16l,
    -5.99905951350575850069037279957274861e-14l,
    5.5855529113248258611785006744593413e-12l,
    -0.000000000321727847692309969603881638848858059l,
    0.0000000125425113956411144210725372236077543l,
    -0.000000351465978669064195315768900221975533l,
    0.00000738957220151707470651404112716703558l,
    -0.000120358260955428432474725428032027795l,
    0.00155642235351309293994947566670890681l,
    -0.0162919015185915962285620439917841414l,
    0.140192993140054496532010342320606289l,
    -1.00421319393860574746621562129960443l,
    6.04918900158255366926077505211428384l,
    -30.8995355437159408117182578524090545l,
    134.749385848906411241424580110404808l,
    -504.409465744569453844904845333066127l,
    1627.72133945826936455030404851130704l,
    -4542.80123473275176848889977692629362l,
    10990.0845255650033168442998449486103l,
    -23077.9010711051405306091685478131097l,
    42081.7963505881262318190441278833132l,
    -66599.0168331046867320962263589109826l,
    91337.4814191604169987170763982582359l,
    -108262.875935200755495622199943078334l,
    110467.323635238779928790977769973594l,
    -96494.8669070918762480703858927092887l,
    71619.2421264974120464574357632251409l,
    -44713.2836506626311143037348503619755l,
    23165.0175749478151027212004846225602l,
    -9775.61291634497961500344684649857378l,
    3273.08468181193513895204693521157604l,
    -836.200655306732147387282853378062317l,
    153.070971581609879482219907751822645l,
    -17.8741258741258741258741258741258741l,
    1.0l,
    // n = 37
    -7.47414901363988105724275873518853981e-23l,
    2.0740763512850669933848655490148198e-19l,
    -9.58223274293700950943807883644846747e-17l,
    1.76632490228138875290641919885200084e-14l,
    -1.73730670745819450910867088344228939e-12l,
    0.000000000105744068260622105787747767772187348l,
    -0.00000000435793735861957769307081709606590282l,
    0.000000129157769848318692727604326462524614l,
    -0.00000287376037912509091318919626379117267l,
    0.0000495676708530138230059234571251300959l,
    -0.000679337973164463132144340433441256683l,
    0.00754329827344955815562871520249707096l,
    -0.0689282545131876292336797816691942498l,
    0.524915168985044253394946029634633133l,
    -3.36612267095171235510409834876812358l,
    18.3318266838726587798657677890383558l,
    -85.3760476607779068175200072433036329l,
    341.960747047714717680868906017296369l,
    -1183.29274375240965800681621447254934l,
    3549.87823125722897402044864341764802l,
    -9256.99015689385093994563146245063599l,
    21019.0659195441098578324152254250794l,
    -41593.7541240872871605309527505240472l,
    71734.1556632809735087417880769907481l,
    -107728.421714182596740965061172360219l,
    140618.568425288140562288271685391013l,
    -159070.778761638168056887185164469471l,
    155291.319308182055049246259730792349l,
    -130081.689550360292865927061722546838l,
    92780.5880096036208644452545498383072l,
    -55773.1896283718941241637010401287903l,
    27871.8478047654362492515586900696493l,
    -11364.4141346811451373436414897010177l,
    3682.17614154004469485027078570732276l,
    -911.653794481380688277240001377932412l,
    161.94595355383532723434201266713582l,
    -18.3741496598639455782312925170068027l,
    1.0l,
    // n = 38
    1.86862030320122365202855761969134346e-23l,
    -5.46758300716678040583555959521687096e-20l,
    2.66362418832474985437622344946981897e-17l,
    -5.17808542210331371690737838576932807e-15l,
    5.37226362543218798129140507523567788e-13l,
    -0.0000000000345018708388867183687381348165135757l,
    0.00000000150083138149157224904010886451834054l,
    -0.000000046971074444923052365562967540090482l,
    0.00000110421167507606608936044276192162708l,
    -0.0000201356246631517933942198385997473174l,
    0.000291966557615701004216187659696336102l,
    -0.00343281891984521180714790339279328508l,
    0.0332461049737183013061824122062914892l,
    -0.268628528187643874553953890626835233l,
    1.82994301609307665866780758826481673l,
    -10.601049196677133746765230166499628l,
    52.5991574052871494975589343543459363l,
    -224.835614006913697852310739004851257l,
    831.891771825580682053549734317949651l,
    -2674.36046134539451129590668500507285l,
    7491.63795902523975279686680350780022l,
    -18324.494241239436607886412878266466l,
    39186.5241543629812449833121064831509l,
    -73299.6239254557794109059828387936041l,
    119891.672112115171110923349590048049l,
    -171273.81730302167301560478512864007l,
    213252.694092977965421390271679777342l,
    -230688.44895592584938666117439573398l,
    215858.477237330616211804384613151082l,
    -173679.234558771760170417320953110066l,
    119220.49151915688621867629658645691l,
    -69098.7089925943666291217456683007789l,
    33349.7241318424200050275091940757231l,
    -13153.317769481905512472388241579516l,
    4128.45575293220475918250991779163912l,
    -991.513182898831784814018945059689728l,
    171.07093648606604737988355038001689l,
    -18.8741721854304635761589403973509934l,
    1.0l,
    // n = 39
    -4.67174774517396374989555898256376781e-24l,
    1.43936548028809823134282172252789686e-20l,
    -7.3839449138779439267886754365681109e-18l,
    1.51173965536794438661120148438004457e-15l,
    -1.65211548050925350822509876507247728e-13l,
    0.0000000000111793147514459487389898349769904296l,
    -0.000000000512554642998112740669443040005652121l,
    0.00000001691430321893772044209162032018652l,
    -0.000000419474719829655466963872183940625696l,
    0.0000080742029405119957529974090307525665l,
    -0.000123662792404683724427486633049947203l,
    0.00153695184845821200359876243933505809l,
    -0.0157481877805790708194829716610128416l,
    0.134756031439355064458406597505466808l,
    -0.973238004839786576644047648650593611l,
    5.98485439757799791384558036813870784l,
    -31.5652804517420212552823351674412494l,
    143.647345799104064643022819398355632l,
    -566.836986756464610638975760356050955l,
    1947.24228025158184166874318813636281l,
    -5841.72684075474552500622956440908844l,
    15340.4696712502667038781475553181753l,
    -35318.7557547389861321845722785232409l,
    71354.1239450813719829931793569005765l,
    -126514.404157945695005307055597341448l,
    196742.808098682897130701992581988129l,
    -267961.92415250476034543574555284356l,
    318895.287792952904869515775455270848l,
    -330491.480076333010501134530926371606l,
    296902.509324473394188859515079045272l,
    -229805.897047756242959738720710899448l,
    152029.178850736678975480243050944056l,
    -85063.9453093407608553282312308853644l,
    39696.5078110256883991531745744131701l,
    -15160.6504809448414869461202281560395l,
    4614.11101593973436559229746074314245l,
    -1075.90382061818532155438547989159347l,
    180.445920303605313092979127134724858l,
    -19.3741935483870967741935483870967742l,
    1.0l,
    // n = 40
    1.16798372301529094111678017907224592e-24l,
    -3.78426726256954264921836778019407678e-21l,
    2.04161218815626825925330941741470442e-18l,
    -4.39627157849649765159212627883299686e-16l,
    5.0541422182786521215982337469869346e-14l,
    -3.59854925941440031057794242785469744e-12l,
    0.000000000173657263503558560442284039889654717l,
    -0.00000000603411282635441942987364982561635402l,
    0.000000157641197588509207605449101694227249l,
    -0.00000319815867525969006802166020692079333l,
    0.000051658678812484151677676185131789025l,
    -0.000677600851955960950577310999780609288l,
    0.00733331066953788173686386940704594183l,
    -0.0663382565182811455580916186360463661l,
    0.507013817675434469622557371004068655l,
    -3.30316588343030180898925882626558751l,
    18.480413964756224838599179925175414l,
    -89.3384717868429264924794580340030709l,
    375.079774406665937416838359523711306l,
    -1373.33618680335437113931996787202404l,
    4399.95786002766996599635974322075395l,
    -12366.89665652376459664482064877378l,
    30551.2024168034226874830294462836404l,
    -66415.6574278335275814848466223557399l,
    127120.039349904774865625694909278406l,
    -214184.29487200282067155219125938827l,
    317399.80348679151027119159564456859l,
    -412996.809288892936495428896638844665l,
    470655.454741563054252907606234527524l,
    -468092.902356400279002891775347588173l,
    404358.219041206794686678827404780969l,
    -301504.541960920983875313139418689142l,
    192478.345983980806670400798825323872l,
    -104090.853772222720623620012418356966l,
    47019.0906635720717830136052583359603l,
    -17405.8248667633259519727383440796474l,
    5141.39193051890105388866097409238412l,
    -1164.95070769254625878558330845780788l,
    190.070904939310179065016224011537075l,
    -19.8742138364779874213836477987421384l,
    1.0l,
    // n = 41
    -2.92007057375426737212483129020805757e-25l,
    9.93700016248577186734080088057801991e-22l,
    -5.63096675874193739149312049899421128e-19l,
    1.27372468082742623795574385687249059e-16l,
    -1.53847745377084126313083061569384399e-14l,
    1.15112301929920500732477926289803838e-12l,
    -0.0000000000583933313426323994624751662451914016l,
    0.00000000213360249136541459574428492049737814l,
    -0.0000000586385084710261444730387638983362758l,
    0.00000125210462205779355551253360559388636l,
    -0.0000212989586236357303758763611225233722l,
    0.000294405086083415095628455502442498387l,
    -0.0033600580476911505479334595387459055l,
    0.0320808003753404312315000767653185993l,
    -0.259022758586082000313593212401461283l,
    1.78457748846548909181572151164868843l,
    -10.5707432683701753059568342766609811l,
    54.1727039154443030385488387618544038l,
    -241.455480308837464971817681338551057l,
    940.062090476939035032524884528612009l,
    -3208.2631857046303990468990289938015l,
    9624.7895571138911971406970869814045l,
    -25435.490372922545446989157206610477l,
    59300.3268307846397715795520188899333l,
    -122070.353635710933997879184209097895l,
    221918.920446308775521042402639723275l,
    -356141.374592567929342970009666162239l,
    503973.643291369711334391523112493734l,
    -627676.264826524095025560351512833105l,
    686153.061428632207931752906947180533l,
    -655915.807874150110633065490708830204l,
    545613.731245921800119414075560544638l,
    -392430.511064775104252554766648209189l,
    242044.552978413735629897415513091262l,
    -126653.690583963640417400227959440204l,
    55433.9341396478542116737229619578864l,
    -19909.3707121270462309532385285905085l,
    5712.61099663030760051416507206873161l,
    -1258.77884416976602565715637377514507l,
    199.945890332660137941546317113134931l,
    -20.3742331288343558282208588957055215l,
    1.0l,
    // n = 42
    7.30044136548472071368824632852234026e-26l,
    -2.60625756747804529478670393928247547e-22l,
    1.54942012386569792775069549190343167e-19l,
    -3.67729042730792308186165063411747783e-17l,
    4.66096561661279250625964217874390315e-15l,
    -3.66041166424657971491590565770687861e-13l,
    0.0000000000194944651512526177241354672527873914l,
    -0.00000000074807332206784770431517639172234693l,
    0.0000000216006171747091024621007183109827676l,
    -0.00000048481385214347096637159389986872434l,
    0.00000867306464966135691945814560870417911l,
    -0.00012615366763143791882848211794478806l,
    0.00151612940410681006070317096095239853l,
    -0.0152545943120900581492288278225056714l,
    0.129906188070417717413670890901179249l,
    -0.944880871390348638843344135198462399l,
    5.91503045497385589437214423345005191l,
    -32.0740154082539565609270280894029553l,
    151.460628316754794871044299311069511l,
    -625.663818821985667575409168135627113l,
    2269.23454288127878662927248289190911l,
    -7247.84552023637243116202012538066207l,
    20433.4080364380605432442998672201118l,
    -50935.4519169180639628698489443747714l,
    112392.14523156831666984313299871348l,
    -219646.363823979224577636294203200059l,
    380157.168156887119461293586120923179l,
    -582323.209364008781173414074617095463l,
    788405.124366206693991278146478340287l,
    -941507.389896486396817170635903353736l,
    988848.721930829498126056617030697511l,
    -909887.242813137666176276316040937953l,
    729805.39267303750307888829515783565l,
    -506951.065306678731742444550016398657l,
    302434.810250999296065839395729712807l,
    -153283.729916034425832127296220773696l,
    65067.6240058283849874249281688339046l,
    -22692.9662397224504472988827601042348l,
    6330.14321423836775635179361202907602l,
    -1357.51323009307653516169000537686479l,
    210.070876428960261295590636908002177l,
    -20.8742514970059880239520958083832335l,
    1.0l,
    // n = 43
    -1.82517349616343496855938197597058405e-26l,
    6.82797404914741021738064797210595492e-23l,
    -4.25382783261883656542814368662200992e-20l,
    1.05806877623339194837416027298578127e-17l,
    -1.4057199455672207314113843626811094e-15l,
    1.15737608851701173552870645860744674e-13l,
    -6.46377009435409887448304849458643738e-12l,
    0.00000000026018450390790180414540007291945187l,
    -0.00000000788359046840942466560562220945939165l,
    0.000000185753879990954090977178222647719653l,
    -0.00000349021763983003213046592765711767979l,
    0.000053350469637401919708550608473084534l,
    -0.00067422622498281846356313232736999585l,
    0.00713849981589501025575611796455432529l,
    -0.0640198793012806475317810579360824411l,
    0.490819074643151631076988110843298715l,
    -3.24178082365113859558107469984404555l,
    18.5665628990928846837825187354704427l,
    -92.7149315564225638336187364155397026l,
    405.545397633000545929413391860291018l,
    -1559.78999089615594588235919946265776l,
    5291.69171127487981175652871269503289l,
    -15875.0751338246394352695861380850987l,
    42195.489558600563368528146343837784l,
    -99503.5480725864348938695649597593134l,
    208348.245556068739185939129895332766l,
    -387471.171599747745725886798131139217l,
    639828.356736690372571817263440867904l,
    -937306.995323359402936376458651037656l,
    1216287.66180798906188658651167965866l,
    -1394951.38614136598623150882412977802l,
    1409704.97034169772590608850497726377l,
    -1250274.05107686286404766182881912084l,
    968160.931859519448570240698213780756l,
    -650257.342293707092323295991337613941l,
    375614.489647917761404139920462099978l,
    -184574.2562589142051344286933100147l,
    76057.4406575977453960085655883177937l,
    -25779.4693597331305447523769678298206l,
    6996.42608331085627504934639653057069l,
    -1461.27886550163453845967361446524578l,
    220.445863178656700923907401640195162l,
    -21.3742690058479532163742690058479532l,
    1.0l,
    // n = 44
    4.56308445663452990157752673034561541e-27l,
    -1.786903873218081909457759467603343e-23l,
    1.16535914265039241861803546612198019e-20l,
    -3.03459520746162185808136435378163642e-18l,
    4.22133869037964897758104077070695494e-16l,
    -3.63973202637178622955876404229844115e-14l,
    2.12924323542749494429187696474458807e-12l,
    -0.000000000089802588324953028529584876820766253l,
    0.00000000285198053421996659771873304636616825l,
    -0.0000000704606955513168218259922282043406274l,
    0.00000138881739389306051441232049802766131l,
    -0.0000222812002673925639238617305874048174l,
    0.00029571027746180783207646927225240524l,
    -0.00329011804092891421781080888758368415l,
    0.0310298169733110560489299832916291904l,
    -0.250378523163958176394814347939352778l,
    1.74204895854600739261795224745706943l,
    -10.5206093967092211162025351415054389l,
    55.458640962652894169696220960221528l,
    -256.387742714967149433161761195903223l,
    1043.62959374361628134652383563717017l,
    -3752.70292941955401515544459365003351l,
    11952.3191610371207692001633833695042l,
    -33789.8414156469713726373701060281828l,
    84923.9365366659253913359434845655127l,
    -189952.315192216029038579987875681229l,
    378328.857030650477142450790331579279l,
    -670998.350205304619837554231908838722l,
    1059218.8242526594356007106089418097l,
    -1486622.91123180271663257629325166273l,
    1851979.38941588982495753148396605442l,
    -2042955.58240166376248620342440676336l,
    1989246.92869765176873036573517384746l,
    -1702684.08442372431113704032157537713l,
    1274396.99909677346377904027580597805l,
    -828489.974568088752850142125472209334l,
    463837.697029317294729480978697469311l,
    -221185.839975475999856190855446997583l,
    88551.9450568484616968118477421137692l,
    -29192.9489198401522077401695853122316l,
    7713.95960381852123210855746953661816l,
    -1570.20075043099077172700537470844742l,
    231.070850536746490503715937241948803l,
    -21.8742857142857142857142857142857143l,
    1.0l,
    // n = 45
    -1.14080711993820381120460780958456016e-27l,
    4.67160515614694460688286898024877387e-24l,
    -3.18603471649221622189411664452966378e-21l,
    8.67663454458046884429164432860245103e-19l,
    -1.26245032623645821684443424981165662e-16l,
    1.13873019426528531159367969333011428e-14l,
    -6.97040906792689796793706963796009344e-13l,
    0.0000000000307693771712773067441793502589952696l,
    -0.00000000102308179094497044924396339611159272l,
    0.0000000264730771918375033239009874850051997l,
    -0.000000546738710004054542331513025742949494l,
    0.00000919515103188637184830271906931324148l,
    -0.000127999167625026958844851618348918383l,
    0.00149463643426762248866526735887429312l,
    -0.0148040180156031179829702671736120462l,
    0.125544879217379085607304173801045605l,
    -0.918806273304609033779262401003620054l,
    5.84203560940738043402964168338665371l,
    -32.4557533855965579668313426854814095l,
    158.308361819645230822567103938144741l,
    -680.725955824474492537038546934022388l,
    2589.28862407102667021928134867470769l,
    -8736.79628756312593164899161201867542l,
    26210.3888626893777949469748360560263l,
    -70033.7872625405892499735657410220418l,
    166880.510219882432669937010937178237l,
    -354904.252503822368121585498373184485l,
    673846.858178116963093185044779833855l,
    -1142039.15574343199589169673173725088l,
    1726531.0648535006398870841697588566l,
    -2325452.01051454549462757551452266335l,
    2785377.47425459838462795269190578133l,
    -2959463.56639551078366719973514989266l,
    2780102.13812911619071767247847414159l,
    -2299259.18710941830698511630792154643l,
    1665177.7715339017055556805062338653l,
    -1048879.58222597094911762348006123753l,
    569680.246992039756518161290355362999l,
    -263851.903869997360913674702901431284l,
    102711.580294381257045649592970953437l,
    -32958.7159552223400773065466052363243l,
    8485.30627573474880039057432926138432l,
    -1684.40388491349574580329243713392942l,
    241.945838462266830792538585361234732l,
    -22.3743016759776536312849162011173184l,
    1.0l,
    // n = 46
    2.85210390369479387754290289864134973e-28l,
    -1.22013005000063282081285386003876942e-24l,
    8.69342660625450884829158375277623209e-22l,
    -2.47356965036628291763389863045659724e-19l,
    3.76070928628902370727410945351919087e-17l,
    -3.54509528720845301472372717818409059e-15l,
    2.26832384816383289108762119295021433e-13l,
    -0.0000000000104691869915253825742505593520779123l,
    0.0000000003640659776302951790195632014685094l,
    -0.000000009855956074148252493457717519493895l,
    0.000000213044271560667752582267609750323299l,
    -0.00000375179262644500613638382959508361549l,
    0.0000547136424689896728222641815949693926l,
    -0.000669694983820433595344513582722425366l,
    0.00695738677635672679607911333161630796l,
    -0.0619287393058695313894674179770536654l,
    0.476077183413872022556530775698600053l,
    -3.18233411372909105986985812632754046l,
    18.6040262553400672595249007607370341l,
    -95.5871164072380127189245256725208639l,
    433.450808631283142290815445261161917l,
    -1740.85121515328351456636447121149583l,
    6210.75354243375461063581404898393069l,
    -19730.3938623402755166865281092359073l,
    55920.2740938846283925947077705914856l,
    -141603.828766718463080676557962754929l,
    320691.023971685931094473381268592046l,
    -649897.952143877847780554022137607919l,
    1178678.55866094209665655024924047982l,
    -1912411.30933372456335926664758800174l,
    2773536.62771732822267979518890305111l,
    -3590490.56829826519784248472894482766l,
    4140818.73576064810763084176329202595l,
    -4243132.67188899978581472736397010398l,
    3850112.04249102833945524208135478706l,
    -3080089.63399282267156419366508382965l,
    2160641.90678760995700884164377750648l,
    -1319903.42325048368347448675017878034l,
    696075.38426157086886391353877849363l,
    -313384.588585295975592411290185988474l,
    118709.28877740483632408744125083171l,
    -37103.3549385565251744663547179654667l,
    9313.09109903527238314918542117607097l,
    -1804.0132689786519417974345494371158l,
    253.070826917851643872837605289375962l,
    -22.8743169398907103825136612021857923l,
    1.0l,
    // n = 47
    -7.1304658658928377646678904958372695e-29l,
    3.18375300912115206192421310639134083e-25l,
    -2.36765098778309675005097314678636047e-22l,
    7.03192343371579734765139024595549058e-20l,
    -1.11606670497975012189152779475093572e-17l,
    1.0984576525234029533016836895448654e-15l,
    -7.33969431458819246069761374377705518e-14l,
    3.53837790748334069506378368065383968e-12l,
    -0.000000000128561063971894711920650807063756175l,
    0.00000000363752186885184449610782577633333648l,
    -0.0000000822079942360516856120368625451334044l,
    0.00000151426413625281351636024610445689453l,
    -0.0000231089874706407627931498427245378252l,
    0.000296150562508365467795289522916000129l,
    -0.00322318363534236913891487062771540881l,
    0.0300756376456429341031159997193030905l,
    -0.242545464884217210508999997736315246l,
    1.70214170276143165378597681120832999l,
    -10.4560133169630801589710004117083128l,
    56.5041174838445825375971985264294171l,
    -269.770940397227212012835855528747627l,
    1142.06164662937652472332949291786888l,
    -4300.23634809073909203435481371400522l,
    14437.9916034930612027240415243054764l,
    -43313.9748104791836081721245729164293l,
    116293.602572788599907982136914548683l,
    -279771.185676618124967166679304230993l,
    603531.551491069288451183465417303338l,
    -1167872.74249570550622371865385945711l,
    2026997.51858450036137679904290549452l,
    -3153870.71535690056227779918879193893l,
    4394737.88205469750481332673848057065l,
    -5475982.91652847228774358966620198088l,
    6088680.30579039925700161368479800672l,
    -6024532.66428953464674347552481769409l,
    5286122.03545735979977201848326653987l,
    -4094883.266903588577288183332107883l,
    2785005.76131132625563805730510262165l,
    -1651459.55670741802527309363004330898l,
    846352.400190714732232864168044173331l,
    -370680.924640490249813381015371245535l,
    136731.145042035698892319103833115261l,
    -41654.7550300177602477460953157683324l,
    10200.0015736979194040308496053659802l,
    -1929.15390265342049334334773100443303l,
    264.445815869345281109986992339933516l,
    -23.3743315508021390374331550802139037l,
    1.0l,
};

static int JACOBI_COEF_ORDER[] = {
0,
0, 1,
0, 1, 2,
0, 1, 3, 2,
0, 1, 4, 2, 3,
0, 1, 2, 5, 3, 4,
0, 1, 2, 6, 3, 5, 4,
0, 1, 2, 3, 7, 4, 6, 5,
0, 1, 2, 3, 8, 4, 7, 5, 6,
0, 1, 2, 3, 9, 4, 8, 5, 6, 7,
0, 1, 2, 3, 4, 10, 5, 9, 6, 8, 7,
0, 1, 2, 3, 4, 11, 5, 10, 6, 9, 7, 8,
0, 1, 2, 3, 4, 12, 5, 6, 11, 7, 10, 8, 9,
0, 1, 2, 3, 4, 5, 13, 6, 12, 7, 11, 8, 10, 9,
0, 1, 2, 3, 4, 5, 14, 6, 13, 7, 8, 12, 9, 11, 10,
0, 1, 2, 3, 4, 5, 15, 6, 7, 14, 8, 13, 9, 12, 10, 11,
0, 1, 2, 3, 4, 5, 6, 16, 7, 15, 8, 14, 9, 13, 10, 12, 11,
0, 1, 2, 3, 4, 5, 6, 17, 7, 16, 8, 9, 15, 10, 14, 11, 13, 12,
0, 1, 2, 3, 4, 5, 6, 18, 7, 8, 17, 9, 16, 10, 15, 11, 14, 12, 13,
0, 1, 2, 3, 4, 5, 6, 7, 19, 8, 18, 9, 17, 10, 11, 16, 12, 15, 13, 14,
0, 1, 2, 3, 4, 5, 6, 7, 20, 8, 9, 19, 10, 18, 11, 17, 12, 16, 13, 15, 14,
0, 1, 2, 3, 4, 5, 6, 7, 21, 8, 9, 20, 10, 19, 11, 18, 12, 17, 13, 14, 16, 15,
0, 1, 2, 3, 4, 5, 6, 7, 8, 22, 9, 21, 10, 11, 20, 12, 19, 13, 18, 14, 17, 15, 16,
0, 1, 2, 3, 4, 5, 6, 7, 8, 23, 9, 10, 22, 11, 21, 12, 20, 13, 19, 14, 18, 15, 17, 16,
0, 1, 2, 3, 4, 5, 6, 7, 8, 24, 9, 10, 23, 11, 22, 12, 21, 13, 14, 20, 15, 19, 16, 18, 17,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 25, 10, 24, 11, 12, 23, 13, 22, 14, 21, 15, 20, 16, 19, 17, 18,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 26, 10, 11, 25, 12, 24, 13, 23, 14, 22, 15, 16, 21, 17, 20, 18, 19,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 27, 10, 11, 26, 12, 25, 13, 14, 24, 15, 23, 16, 22, 17, 21, 18, 20, 19,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 28, 11, 27, 12, 13, 26, 14, 25, 15, 24, 16, 23, 17, 22, 18, 21, 19, 20,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 29, 11, 12, 28, 13, 27, 14, 26, 15, 16, 25, 17, 24, 18, 23, 19, 22, 20, 21,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 11, 12, 29, 13, 28, 14, 15, 27, 16, 26, 17, 25, 18, 24, 19, 23, 20, 22, 21,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 31, 12, 30, 13, 14, 29, 15, 28, 16, 27, 17, 26, 18, 19, 25, 20, 24, 21, 23, 22,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 12, 13, 31, 14, 30, 15, 29, 16, 17, 28, 18, 27, 19, 26, 20, 25, 21, 24, 22, 23,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 33, 12, 13, 32, 14, 15, 31, 16, 30, 17, 29, 18, 28, 19, 27, 20, 26, 21, 25, 22, 23, 24,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 34, 13, 33, 14, 15, 32, 16, 31, 17, 30, 18, 19, 29, 20, 28, 21, 27, 22, 26, 23, 25, 24,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 35, 13, 14, 34, 15, 33, 16, 17, 32, 18, 31, 19, 30, 20, 29, 21, 28, 22, 27, 23, 26, 24, 25,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 36, 13, 14, 35, 15, 16, 34, 17, 33, 18, 32, 19, 31, 20, 21, 30, 22, 29, 23, 28, 24, 27, 25, 26,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 37, 14, 15, 36, 16, 35, 17, 34, 18, 19, 33, 20, 32, 21, 31, 22, 30, 23, 29, 24, 28, 25, 27, 26,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 14, 15, 37, 16, 36, 17, 18, 35, 19, 34, 20, 33, 21, 32, 22, 31, 23, 30, 24, 25, 29, 26, 28, 27,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 39, 15, 38, 16, 17, 37, 18, 36, 19, 35, 20, 34, 21, 22, 33, 23, 32, 24, 31, 25, 30, 26, 29, 27, 28,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 40, 15, 16, 39, 17, 38, 18, 37, 19, 20, 36, 21, 35, 22, 34, 23, 33, 24, 32, 25, 31, 26, 30, 27, 29, 28,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 41, 15, 16, 40, 17, 39, 18, 19, 38, 20, 37, 21, 36, 22, 35, 23, 24, 34, 25, 33, 26, 32, 27, 31, 28, 30, 29,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 42, 16, 41, 17, 18, 40, 19, 39, 20, 38, 21, 22, 37, 23, 36, 24, 35, 25, 34, 26, 33, 27, 32, 28, 31, 29, 30,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 43, 16, 17, 42, 18, 41, 19, 40, 20, 21, 39, 22, 38, 23, 37, 24, 36, 25, 35, 26, 27, 34, 28, 33, 29, 32, 30, 31,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 44, 16, 17, 43, 18, 42, 19, 20, 41, 21, 40, 22, 39, 23, 24, 38, 25, 37, 26, 36, 27, 35, 28, 34, 29, 33, 30, 32, 31,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 45, 17, 44, 18, 19, 43, 20, 42, 21, 41, 22, 23, 40, 24, 39, 25, 38, 26, 37, 27, 36, 28, 35, 29, 34, 30, 33, 31, 32,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 46, 17, 18, 45, 19, 44, 20, 21, 43, 22, 42, 23, 41, 24, 40, 25, 39, 26, 27, 38, 28, 37, 29, 36, 30, 35, 31, 34, 32, 33,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 47, 17, 18, 46, 19, 45, 20, 21, 44, 22, 43, 23, 42, 24, 25, 41, 26, 40, 27, 39, 28, 38, 29, 37, 30, 36, 31, 35, 32, 34, 33,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 48, 18, 47, 19, 20, 46, 21, 45, 22, 23, 44, 24, 43, 25, 42, 26, 41, 27, 40, 28, 39, 29, 30, 38, 31, 37, 32, 36, 33, 35, 34,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 49, 18, 19, 48, 20, 47, 21, 22, 46, 23, 45, 24, 44, 25, 43, 26, 27, 42, 28, 41, 29, 40, 30, 39, 31, 38, 32, 37, 33, 36, 34, 35,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 50, 18, 19, 49, 20, 21, 48, 22, 47, 23, 46, 24, 25, 45, 26, 44, 27, 43, 28, 42, 29, 41, 30, 40, 31, 39, 32, 33, 38, 34, 37, 35, 36,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 51, 19, 50, 20, 21, 49, 22, 48, 23, 24, 47, 25, 46, 26, 45, 27, 44, 28, 29, 43, 30, 42, 31, 41, 32, 40, 33, 39, 34, 38, 35, 37, 36,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 52, 19, 20, 51, 21, 50, 22, 23, 49, 24, 48, 25, 47, 26, 27, 46, 28, 45, 29, 44, 30, 43, 31, 42, 32, 41, 33, 40, 34, 39, 35, 38, 36, 37,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 53, 19, 20, 52, 21, 22, 51, 23, 50, 24, 49, 25, 26, 48, 27, 47, 28, 46, 29, 45, 30, 44, 31, 32, 43, 33, 42, 34, 41, 35, 40, 36, 39, 37, 38,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 54, 20, 53, 21, 22, 52, 23, 51, 24, 25, 50, 26, 49, 27, 48, 28, 47, 29, 30, 46, 31, 45, 32, 44, 33, 43, 34, 42, 35, 41, 36, 40, 37, 39, 38,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 55, 20, 21, 54, 22, 53, 23, 24, 52, 25, 51, 26, 50, 27, 28, 49, 29, 48, 30, 47, 31, 46, 32, 45, 33, 44, 34, 35, 43, 36, 42, 37, 41, 38, 40, 39,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 56, 20, 21, 55, 22, 23, 54, 24, 53, 25, 52, 26, 27, 51, 28, 50, 29, 49, 30, 48, 31, 32, 47, 33, 46, 34, 45, 35, 44, 36, 43, 37, 42, 38, 41, 39, 40,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 57, 21, 56, 22, 23, 55, 24, 54, 25, 26, 53, 27, 52, 28, 51, 29, 30, 50, 31, 49, 32, 48, 33, 47, 34, 46, 35, 45, 36, 44, 37, 43, 38, 42, 39, 41, 40,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 58, 21, 22, 57, 23, 56, 24, 25, 55, 26, 54, 27, 53, 28, 29, 52, 30, 51, 31, 50, 32, 49, 33, 48, 34, 35, 47, 36, 46, 37, 45, 38, 44, 39, 43, 40, 42, 41,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 59, 21, 22, 58, 23, 24, 57, 25, 56, 26, 27, 55, 28, 54, 29, 53, 30, 52, 31, 32, 51, 33, 50, 34, 49, 35, 48, 36, 47, 37, 46, 38, 45, 39, 44, 40, 43, 41, 42,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 60, 22, 59, 23, 24, 58, 25, 26, 57, 27, 56, 28, 55, 29, 54, 30, 31, 53, 32, 52, 33, 51, 34, 50, 35, 49, 36, 48, 37, 38, 47, 39, 46, 40, 45, 41, 44, 42, 43,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 61, 22, 23, 60, 24, 59, 25, 26, 58, 27, 57, 28, 29, 56, 30, 55, 31, 54, 32, 53, 33, 52, 34, 35, 51, 36, 50, 37, 49, 38, 48, 39, 47, 40, 46, 41, 45, 42, 44, 43,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 62, 22, 23, 61, 24, 25, 60, 26, 59, 27, 28, 58, 29, 57, 30, 56, 31, 55, 32, 33, 54, 34, 53, 35, 52, 36, 51, 37, 50, 38, 49, 39, 48, 40, 47, 41, 42, 46, 43, 45, 44,
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 63, 23, 62, 24, 25, 61, 26, 27, 60, 28, 59, 29, 58, 30, 31, 57, 32, 56, 33, 55, 34, 54, 35, 53, 36, 37, 52, 38, 51, 39, 50, 40, 49, 41, 48, 42, 47, 43, 46, 44, 45,
};

/*
 * Note: t cannot be 0
 */
static void laguerre_moments(int n, double t, double lower,
                             double *alpha, double *beta, double *moments)
{
    int i;
    double tt = sqrt(t);
    double t_inv = .5 / t;
    double t2_inv = .5 / (t * t);
    double e0 = exp(-t) * t_inv;
    double l00 = 0.;
    double l01 = 1.;
    double fac0, fac1, l02;

    alpha[0] = t_inv;
    beta[0] = 0;
    if (lower == 0)
    {
        moments[0] = SQRTPIE4 / tt * erf(tt);
        moments[1] = -l01 * e0;
        for (i = 1; i < n - 1; i++)
        {
            alpha[i] = (i * 4 + 1) * t_inv;
            beta[i] = i * (i * 2 - 1) * t2_inv;
            fac0 = (i * 4 - 1) * t_inv;
            fac1 = (i - 1) * (i * 2 - 1) * t2_inv;
            l02 = (1. - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            moments[i + 1] = -l01 * e0;
        }
    }
    else
    {
        double lower2 = lower * lower;
        double l10 = 0.;
        double l11 = 1.;
        double l12;
        double et = exp(-t * lower2) * lower * t_inv;
        moments[0] = SQRTPIE4 / tt * (erfc(lower * tt) - erfc(tt));
        moments[1] = l11 * et - l01 * e0;
        for (i = 1; i < n - 1; i++)
        {
            alpha[i] = (i * 4 + 1) * t_inv;
            beta[i] = i * (i * 2 - 1) * t2_inv;
            fac0 = (i * 4 - 1) * t_inv;
            fac1 = (i - 1) * (i * 2 - 1) * t2_inv;
            l12 = (lower2 - fac0) * l11 - fac1 * l10;
            l10 = l11;
            l11 = l12;
            l02 = (1. - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            moments[i + 1] = l11 * et - l01 * e0;
        }
    }
}

static void naive_jacobi_moments(int n, double t, double lower, double *mus)
{
    int i, j, k;
    double s;
    double fmt[MXRYSROOTS * 2];
    double *coef;
    int *order;

    fmt_erfc_like(fmt, t, lower, n - 1);

    for (i = 0; i < n; i++)
    {
        coef = JACOBI_COEF + i * (i + 1) / 2;
        order = JACOBI_COEF_ORDER + i * (i + 1) / 2;
        s = 0;
        for (j = 0; j <= i; j++)
        {
            k = order[j];
            s += coef[k] * fmt[k];
        }
        mus[i] = s;
    }
}

// Flocke's recipe JCP, 131, 064107
static void flocke_jacobi_moments(int n, double t, double *mus)
{
    if (t < SMALLX_LIMIT)
    {
        return naive_jacobi_moments(n, t, 0., mus);
    }

    double t_inv = .5 / t;
    double mu1 = 1.; // DBL_EPSILON; // can be arbitrary number != 0
    double mu2 = 0.;
    double mu0, rn;
    int i;

    // Miller algorithm
    for (i = n - 1 + FLOCKE_EXTRA_ORDER_FOR_DP; i >= n; i--)
    {
        rn = (2 * i + 3) * t_inv + JACOBI_RN_PART2[i];
        mu0 = (mu2 - rn * mu1) / JACOBI_SN[i];
        mu2 = mu1;
        mu1 = mu0;
    }
    for (; i >= 0; i--)
    {
        rn = (2 * i + 3) * t_inv + JACOBI_RN_PART2[i];
        mu0 = (mu2 - rn * mu1) / JACOBI_SN[i];
        mus[i] = mu0;
        mu2 = mu1;
        mu1 = mu0;
    }

    double tt = sqrt(t);
    double norm = SQRTPIE4 * erf(tt) / tt / mu0; // fmt[0]/mu0
    for (i = 0; i < n; i++)
    {
        mus[i] *= norm;
    }
}

/*
 * This recursion may cause large errors if "b" of the three-term is small.
 * It hapens when the lower limit of SR integrals is closed to 1. For example
 *  nroots = 12
 *  x = 0.4
 *  lower = 0.93
 * In this case, sigma_{kk} decays as ~ b^n. Wheeler recursion formula here is
 * not a proper choice.
 */
static void wheeler_recursion(int n, double *alpha, double *beta, double *moments,
                              double *a, double *b)
{
    int i, j, nc;
    double a0 = alpha[0] + moments[1] / moments[0];
    double b0 = 0;
    double a1, b1;
    a[0] = a0;
    b[0] = b0;
    double buf[MXRYSROOTS * 4];
    double *s0 = moments;
    double *sm = buf;
    double *sk = buf + n * 2;
    double *swap;
    for (i = 2; i < n * 2; i++)
    {
        sm[i] = 0.;
    }

    for (i = 1; i < n; i++)
    {
        nc = 2 * (n - i);
        for (j = 0; j < nc; j++)
        {
            sk[j] = (s0[2 + j] - (a0 - alpha[i + j]) * s0[1 + j] - b0 * sm[2 + j] + beta[i + j] * s0[j]);
        }
        a1 = alpha[i] - s0[1] / s0[0] + sk[1] / sk[0];
        b1 = sk[0] / s0[0];
        a[i] = a1;
        b[i] = b1;
        a0 = a1;
        b0 = b1;
        swap = sm;
        sm = s0;
        s0 = sk;
        sk = swap;
    }
}

static int rys_wheeler_partial(int n, double *alpha, double *beta, double *moments,
                               double *roots, double *weights)
{
    double a[MXRYSROOTS + MXRYSROOTS + MXRYSROOTS * MXRYSROOTS];
    double *b = a + n;
    double *c0 = b + n;
    double mu0 = moments[0];
    int first_seen = 1;
    int i;

    wheeler_recursion(n, alpha, beta, moments, a, b);

    for (i = 1; i < n; i++)
    {
        if (b[i] < 1e-14)
        {
            // very likely we will get numerical issues
            if (!first_seen || b[i] < 0.)
            {
                std::cerr << "libcint rys_wheeler singular value n=" << n << " i=" << i << " b=" << b[i] << "\n";
                for (i = 0; i < n; i++)
                {
                    roots[i] = 0;
                    weights[i] = 0;
                }
                return i;
            }
            first_seen = 0;
        }
        b[i] = sqrt(b[i]);
    }

    int error = _CINTdiagonalize(n, a, b + 1, roots, c0);

    for (i = 0; i < n; i++)
    {
        roots[i] = roots[i] / (1 - roots[i]);

        // This has to do with the c++ implementation of LAPACKE
        // In the original C implementaion the LAPACK function was called using COL_MAJOR ordering resulting in a transposed matrix
        // The C++ implementation uses ROW_MAJOR ordering and the matrix is not transposed. Thus c0 is indexed only using i
        weights[i] = c0[i] * c0[i] * mu0;
    }
    return error;
}

static void llaguerre_moments(int n, double t, double lower,
                              long double *alpha, long double *beta, long double *moments)
{
    int i;
    long double tt = sqrtl(t);
    long double t_inv = .5l / t;
    long double t2_inv = .5l / (t * t);
    long double e0 = expl(-t) * t_inv;
    long double l00 = 0.l;
    long double l01 = 1.l;
    long double fac0, fac1, l02;

    alpha[0] = t_inv;
    beta[0] = 0;
    if (lower == 0)
    {
        moments[0] = SQRTPIE4l / tt * erfl(tt);
        moments[1] = -l01 * e0;
        for (i = 1; i < n - 1; i++)
        {
            alpha[i] = (i * 4 + 1) * t_inv;
            beta[i] = i * (i * 2 - 1) * t2_inv;
            fac0 = (i * 4 - 1) * t_inv;
            fac1 = (i - 1) * (i * 2 - 1) * t2_inv;
            l02 = (1. - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            moments[i + 1] = -l01 * e0;
        }
    }
    else
    {
        long double lower2 = lower * lower;
        long double l10 = 0.l;
        long double l11 = 1.l;
        long double l12;
        long double et = expl(-t * lower2) * lower * t_inv;
        moments[0] = SQRTPIE4l / tt * (erfcl(lower * tt) - erfcl(tt));
        moments[1] = l11 * et - l01 * e0;
        for (i = 1; i < n - 1; i++)
        {
            alpha[i] = (i * 4 + 1) * t_inv;
            beta[i] = i * (i * 2 - 1) * t2_inv;
            fac0 = (i * 4 - 1) * t_inv;
            fac1 = (i - 1) * (i * 2 - 1) * t2_inv;
            l12 = (lower2 - fac0) * l11 - fac1 * l10;
            l10 = l11;
            l11 = l12;
            l02 = (1. - fac0) * l01 - fac1 * l00;
            l00 = l01;
            l01 = l02;
            moments[i + 1] = l11 * et - l01 * e0;
        }
    }
}

static void lnaive_jacobi_moments(int n, double t, double lower, long double *mus)
{
    int i, j, k;
    long double s;
    long double fmt[MXRYSROOTS * 2];
    long double *coef;
    int *order;

    fmt_lerfc_like(fmt, t, lower, n - 1);

    for (i = 0; i < n; i++)
    {
        coef = lJACOBI_COEF + i * (i + 1) / 2;
        order = JACOBI_COEF_ORDER + i * (i + 1) / 2;
        s = 0;
        for (j = 0; j <= i; j++)
        {
            k = order[j];
            s += coef[k] * fmt[k];
        }
        mus[i] = s;
    }
}

// Flocke's recipe JCP, 131, 064107
static void lflocke_jacobi_moments(int n, double t, long double *mus)
{
    if (t < SMALLX_LIMIT)
    {
        return lnaive_jacobi_moments(n, t, 0., mus);
    }

    long double t_inv = .5l / t;
    long double mu1 = 1.l; // DBL_EPSILON; // can be arbitrary number != 0
    long double mu2 = 0.l;
    long double mu0 = 0.l, rn;
    int i;

    // Miller algorithm
    for (i = n - 1 + FLOCKE_EXTRA_ORDER_FOR_LP; i >= n; i--)
    {
        rn = (2 * i + 3) * t_inv + lJACOBI_RN_PART2[i];
        mu0 = (mu2 - rn * mu1) / lJACOBI_SN[i];
        mu2 = mu1;
        mu1 = mu0;
    }
    for (; i >= 0; i--)
    {
        rn = (2 * i + 3) * t_inv + lJACOBI_RN_PART2[i];
        mu0 = (mu2 - rn * mu1) / lJACOBI_SN[i];
        mus[i] = mu0;
        mu2 = mu1;
        mu1 = mu0;
    }

    long double tt = sqrtl(t);
    long double norm = SQRTPIE4l * erfl(tt) / tt / mu0; // fmt[0]/mu0
    for (i = 0; i < n; i++)
    {
        mus[i] *= norm;
    }
}

static void lwheeler_recursion(int n, long double *alpha, long double *beta, long double *moments,
                               long double *a, long double *b)
{
    int i, j, nc;
    long double a0 = alpha[0] + moments[1] / moments[0];
    long double b0 = 0;
    long double a1, b1;
    a[0] = a0;
    b[0] = b0;
    long double buf[MXRYSROOTS * 4];
    long double *s0 = moments;
    long double *sm = buf;
    long double *sk = buf + n * 2;
    long double *swap;
    for (i = 2; i < n * 2; i++)
    {
        sm[i] = 0.;
    }

    for (i = 1; i < n; i++)
    {
        nc = 2 * (n - i);
        for (j = 0; j < nc; j++)
        {
            sk[j] = (s0[2 + j] - (a0 - alpha[i + j]) * s0[1 + j] - b0 * sm[2 + j] + beta[i + j] * s0[j]);
        }
        a1 = alpha[i] - s0[1] / s0[0] + sk[1] / sk[0];
        b1 = sk[0] / s0[0];
        a[i] = a1;
        b[i] = b1;
        a0 = a1;
        b0 = b1;
        swap = sm;
        sm = s0;
        s0 = sk;
        sk = swap;
    }
}

static int lrys_wheeler_partial(int n, long double *alpha, long double *beta, long double *moments,
                                double *roots, double *weights)
{
    long double a[MXRYSROOTS + MXRYSROOTS];
    long double *b = a + n;
    double da[MXRYSROOTS + MXRYSROOTS + MXRYSROOTS * MXRYSROOTS];
    double *db = da + n;
    double *c0 = db + n;
    double mu0 = moments[0];
    int first_seen = 1;
    int i;

    lwheeler_recursion(n, alpha, beta, moments, a, b);

    da[0] = a[0];
    for (i = 1; i < n; i++)
    {
        if (b[i] < 1e-19)
        {
            // very likely we will get numerical issues
            if (!first_seen || b[i] < 0.)
            {
                std::cerr << "libcint lrys_wheeler singular value n=" << n << " i=" << i << " b=" << (double)b[i] << "\n";
                for (i = 0; i < n; i++)
                {
                    roots[i] = 0;
                    weights[i] = 0;
                }
                return i;
            }
            first_seen = 0;
        }
        da[i] = a[i];
        db[i] = sqrtl(b[i]);
    }

    int error = _CINTdiagonalize(n, da, db + 1, roots, c0);

    for (i = 0; i < n; i++)
    {
        roots[i] = roots[i] / (1 - roots[i]);
        weights[i] = c0[i * n] * c0[i * n] * mu0;
    }
    return error;
}

int CINTrys_laguerre(int n, double x, double lower, double *roots, double *weights)
{
    double moments[MXRYSROOTS * 6];
    double *alpha = moments + n * 2;
    double *beta = alpha + n * 2;

    laguerre_moments(n * 2, x, lower, alpha, beta, moments);

    return rys_wheeler_partial(n, alpha, beta, moments, roots, weights);
}

int CINTrys_jacobi(int n, double x, double lower, double *roots, double *weights)
{
    double moments[MXRYSROOTS * 2];
    double *alpha = JACOBI_ALPHA;
    double *beta = JACOBI_BETA;

    if (lower == 0)
    {
        flocke_jacobi_moments(n * 2, x, moments);
    }
    else
    {
        naive_jacobi_moments(n * 2, x, lower, moments);
    }
    return rys_wheeler_partial(n, alpha, beta, moments, roots, weights);
}

int CINTlrys_laguerre(int n, double x, double lower, double *roots, double *weights)
{
    long double moments[MXRYSROOTS * 6];
    long double *alpha = moments + n * 2;
    long double *beta = alpha + n * 2;

    llaguerre_moments(n * 2, x, lower, alpha, beta, moments);

    return lrys_wheeler_partial(n, alpha, beta, moments, roots, weights);
}

int CINTlrys_jacobi(int n, double x, double lower, double *roots, double *weights)
{
    long double moments[MXRYSROOTS * 2];
    long double *alpha = lJACOBI_ALPHA;
    long double *beta = lJACOBI_BETA;

    if (lower == 0)
    {
        lflocke_jacobi_moments(n * 2, x, moments);
    }
    else
    {
        lnaive_jacobi_moments(n * 2, x, lower, moments);
    }
    return lrys_wheeler_partial(n, alpha, beta, moments, roots, weights);
}

//---------------------------------------------------------

//  CODE FROM eigh.c of libcit

#define MAX(x, y) ((x) > (y) ? (x) : (y))
#define MIN(x, y) ((x) < (y) ? (x) : (y))
#define MAXTRY 6
#define MAXRQITER 6
#define ITMAX 1000
#define FAIL_THRESHOLD 1e16
#define RTOL1 1.5e-8
#define RTOL2 7.45e-11
#define MINGAP 0.001

static int _dlarrk(int n, int iw, double gl, double gu, double *diag, double *e2,
                   double reltol, double *w, double *werr)
{
    int i, it;
    double mid, tmp1, left, right;
    double tnorm;
    int negcnt;
    int info;

    if (n <= 0)
    {
        return 0;
    }

    tnorm = MAX(fabs(gl), fabs(gu));
    info = -1;
    left = gl - tnorm * 2. * DBL_EPSILON * n;
    right = gu + tnorm * 2. * DBL_EPSILON * n;

    for (it = 0; it < ITMAX; it++)
    {
        tmp1 = fabs(right - left);
        if (tmp1 <= 0 ||
            tmp1 < reltol * MAX(fabs(right), fabs(left)))
        {
            info = 0;
            break;
        }

        /*     Count number of negative pivots for mid-point */

        mid = (left + right) * .5;
        negcnt = 0;
        tmp1 = diag[0] - mid;
        if (tmp1 <= 0.)
        {
            ++negcnt;
        }

        for (i = 1; i < n; ++i)
        {
            tmp1 = diag[i] - e2[i - 1] / tmp1 - mid;
            if (tmp1 <= 0.)
            {
                ++negcnt;
            }
        }
        if (negcnt >= iw)
        {
            right = mid;
        }
        else
        {
            left = mid;
        }
    }

    /*     Converged or maximum number of iterations reached */

    *w = (left + right) * .5;
    *werr = fabs(right - left) * .5;
    return info;
}

static void _dlarrc(int n, double vl, double vu,
                    double *diag, double *e2, int *lcnt, int *rcnt)
{
    int i;
    int left_count = 0;
    int right_count = 0;
    double tmp, lpivot, rpivot;

    lpivot = diag[0] - vl;
    rpivot = diag[0] - vu;
    if (lpivot <= 0.)
    {
        ++left_count;
    }
    if (rpivot <= 0.)
    {
        ++right_count;
    }
    for (i = 0; i < n - 1; ++i)
    {
        tmp = e2[i];
        lpivot = diag[i + 1] - vl - tmp / lpivot;
        rpivot = diag[i + 1] - vu - tmp / rpivot;
        if (lpivot <= 0.)
        {
            ++left_count;
        }
        if (rpivot <= 0.)
        {
            ++right_count;
        }
    }
    *lcnt = left_count;
    *rcnt = right_count;
}

static int _dlasq4(int i0, int n0, int n0init,
                   double *qvecp, double *qvec1p, double *evecp, double *evec1p,
                   double *dmin, double *dn, double *tau)
{
    /* an approximation to the smallest eigenvalue using values of d from the previous transform. */
    double a2, b1, b2;
    double gap1, gap2;
    double s = 0.;
    int i;

    if (n0init == n0)
    {

        /*        No eigenvalues deflated. */

        if (dmin[0] == dn[0])
        {

            /*           Cases 2 and 3. */

            if (dmin[1] == dn[1])
            {
                b1 = sqrt(qvecp[n0 - 1] * evecp[n0 - 2]);
                b2 = sqrt(qvecp[n0 - 2] * evecp[n0 - 3]);
                a2 = qvecp[n0 - 2] + evecp[n0 - 2];
                gap2 = dmin[2] - a2 - dmin[2] * .25;
                if (gap2 > b2)
                {
                    gap1 = a2 - dn[0] - b2 / gap2 * b2;
                }
                else
                {
                    gap1 = a2 - dn[0] - (b1 + b2);
                }
                if (gap1 > b1)
                {
                    s = MAX(dn[0] - b1 / gap1 * b1, dmin[0] * .5);
                }
                else
                {
                    s = 0.;
                    if (dn[0] > b1)
                    {
                        s = dn[0] - b1;
                    }
                    if (a2 > b1 + b2)
                    {
                        s = MIN(s, a2 - (b1 + b2));
                    }
                    s = MAX(s, dmin[0] * .333);
                }
            }
            else
            {

                /*              Case 4. */

                if (evecp[n0 - 2] > qvecp[n0 - 2])
                {
                    return 0;
                }

                b2 = evecp[n0 - 2] / qvecp[n0 - 2];
                a2 = b2;

                /*              Approximate contribution to norm squared from I < NN-1. */

                for (i = n0 - 3; i >= i0; i--)
                {
                    b1 = b2;
                    if (evecp[i] > qvecp[i])
                    {
                        return 0;
                    }
                    b2 *= evecp[i] / qvecp[i];
                    a2 += b2;
                    if (.563 < a2 || MAX(b1, b2) < a2 * .01)
                    {
                        break;
                    }
                }
                a2 *= 1.05;

                /*              Rayleigh quotient residual bound. */

                if (a2 < .563)
                {
                    s = dn[0] * (1. - sqrt(a2)) / (a2 + 1.);
                }
                else
                {
                    s = dmin[0] * .25;
                }
            }
        }
        else if (dmin[0] == dn[1])
        {

            /*              Case 4. */

            if (evec1p[n0 - 2] > qvec1p[n0 - 1] || evecp[n0 - 3] > qvecp[n0 - 3])
            {
                return 0;
            }
            a2 = evec1p[n0 - 2] / qvec1p[n0 - 1];
            b2 = evecp[n0 - 3] / qvecp[n0 - 3];

            /*              Approximate contribution to norm squared from I < NN-1. */

            a2 += b2;
            for (i = n0 - 4; i >= i0; i--)
            {
                if (b2 == 0.)
                {
                    break;
                }
                b1 = b2;
                if (evecp[i] > qvecp[i])
                {
                    return 0;
                }
                b2 *= evecp[i] / qvecp[i];
                a2 += b2;
                if (MAX(b2, b1) * 100. < a2 || .563 < a2)
                {
                    break;
                }
            }
            a2 *= 1.05;

            /*              Rayleigh quotient residual bound. */

            if (a2 < .563)
            {
                s = dn[1] * (1. - sqrt(a2)) / (a2 + 1.);
            }
            else
            {
                s = dmin[0] * .25;
            }
        }
        else if (dmin[0] == dn[2])
        {

            /*           Case 5. */

            if (evec1p[n0 - 3] > qvec1p[n0 - 2] || evec1p[n0 - 2] > qvec1p[n0 - 1])
            {
                return 0;
            }
            a2 = evec1p[n0 - 3] / qvec1p[n0 - 2] * (evec1p[n0 - 2] / qvec1p[n0 - 1] + 1.);

            /*           Approximate contribution to norm squared from I < NN-2. */

            if (n0 - i0 > 3)
            {
                b2 = evecp[n0 - 4] / qvecp[n0 - 4];
                a2 += b2;
                for (i = n0 - 5; i >= i0; i--)
                {
                    b1 = b2;
                    if (evecp[i] > qvecp[i])
                    {
                        return 0;
                    }
                    b2 *= evecp[i] / qvecp[i];
                    a2 += b2;
                    if (.563 < a2 || MAX(b2, b1) < a2 * .01)
                    {
                        break;
                    }
                }
                a2 *= 1.05;
            }

            if (a2 < .563)
            {
                s = dn[2] * (1. - sqrt(a2)) / (a2 + 1.);
            }
            else
            {
                s = dmin[0] * .25;
            }
        }
        else
        { // dmin == 0 or the smallest diag located at the forth or farther place

            /*           Case 6, no information to guide us. */

            s = dmin[0] * .25;
        }
    }
    else if (n0init == n0 + 1)
    {

        /*        One eigenvalue just deflated. Use DMIN1, DN1 for DMIN and DN. */

        if (dmin[1] == dn[1] && dmin[2] == dn[2])
        {

            if (evecp[n0 - 2] > qvecp[n0 - 2])
            {
                return 0;
            }
            s = dmin[1] * .333;
            b1 = evecp[n0 - 2] / qvecp[n0 - 2];
            b2 = b1;
            if (b2 != 0.)
            {
                for (i = n0 - 3; i >= i0; i--)
                {
                    a2 = b1;
                    if (evecp[i] > qvecp[i])
                    {
                        return 0;
                    }
                    b1 *= evecp[i] / qvecp[i];
                    b2 += b1;
                    if (MAX(b1, a2) * 100. < b2)
                    {
                        break;
                    }
                }
            }
            a2 = dmin[1] / (b2 * 1.05 + 1.);
            b2 = sqrt(b2 * 1.05);
            gap2 = dmin[2] * .5 - a2;
            if (gap2 > 0. && gap2 > b2 * a2)
            {
                s = MAX(s, a2 * (1. - a2 * 1.01 * (b2 / gap2) * b2));
            }
            else
            {
                s = MAX(s, a2 * (1. - b2 * 1.01));
            }
        }
        else if (dmin[1] == dn[1])
        {
            s = dmin[1] * .5;
        }
        else
        {
            s = dmin[1] * .25;
        }
    }
    else if (n0init == n0 + 2)
    {

        /*        Two eigenvalues deflated. Use DMIN2, DN2 for DMIN and DN. */

        if (dmin[2] == dn[2] && evecp[n0 - 2] * 2. < qvecp[n0 - 2])
        {
            if (evecp[n0 - 2] > qvecp[n0 - 2])
            {
                return 0;
            }
            b1 = evecp[n0 - 2] / qvecp[n0 - 2];
            b2 = b1;
            if (b2 != 0.)
            {
                for (i = n0 - 2; i > i0; i--)
                {
                    if (evecp[i - 1] > qvecp[i - 1])
                    {
                        return 0;
                    }
                    b1 *= evecp[i - 1] / qvecp[i - 1];
                    b2 += b1;
                    if (b1 * 100. < b2)
                    {
                        break;
                    }
                }
            }
            s = dmin[2] * .333;
            a2 = dmin[2] / (b2 * 1.05 + 1.);
            b2 = sqrt(b2 * 1.05);
            gap2 = qvecp[n0 - 2] + evecp[n0 - 3] - sqrt(qvecp[n0 - 3] * evecp[n0 - 3]) - a2;
            if (gap2 > 0. && gap2 > b2 * a2)
            {
                s = MAX(s, a2 * (1. - a2 * 1.01 * (b2 / gap2) * b2));
            }
            else
            {
                s = MAX(s, a2 * (1. - b2 * 1.01));
            }
        }
        else
        {
            s = dmin[2] * .25;
        }
    }
    else if (n0init > n0 + 2)
    {

        /*        Case 12, more than two eigenvalues deflated. No information. */

        s = 0.;
    }

    *tau = s;
    return 0;
}

static void _dlasq5(int i0, int n0,
                    double *qvecp, double *qvec1p, double *evecp, double *evec1p,
                    double tau, double tol, double *dmin, double *dn)
{
    double diag = qvecp[i0] - tau;
    double diag_min = diag;
    double temp;
    int j;

    for (j = i0; j < n0 - 3; j++)
    {
        qvec1p[j] = diag + evecp[j];
        temp = qvecp[j + 1] / qvec1p[j];
        diag = diag * temp - tau;
        if (diag < tol)
        {
            diag = 0.;
        }
        diag_min = MIN(diag_min, diag);
        evec1p[j] = evecp[j] * temp;
    }
    dn[2] = diag;

    j = n0 - 3;
    qvec1p[j] = diag + evecp[j];
    temp = qvecp[j + 1] / qvec1p[j];
    evec1p[j] = evecp[j] * temp;
    diag = diag * temp - tau;
    dn[1] = diag;

    j = n0 - 2;
    qvec1p[j] = diag + evecp[j];
    temp = qvecp[j + 1] / qvec1p[j];
    evec1p[j] = evecp[j] * temp;
    diag = diag * temp - tau;
    dn[0] = diag;

    qvec1p[n0 - 1] = diag;

    dmin[2] = diag_min;
    dmin[1] = MIN(dmin[2], dn[1]);
    dmin[0] = MIN(dmin[1], dn[0]);
}

static int _dlasq2(int n, double *work, double *diag, double *diag_off)
{
    int i, j, itry, iwhilb, iter;
    int i0, n0, n1, n2, n0init, nbig;
    double emax, qmin, temp, diag_sum, tol, tol2, s, t;
    double dmin[3] = {0., 0., 0.};
    double dn[3] = {0., 0., 0.};
    double sigma, tau;
    double *qvec, *qvec1, *evec, *evec1;
    double *qvecp, *qvec1p, *evecp, *evec1p, *swap;
    qvec = work;
    qvec1 = work + n * 1;
    evec = work + n * 2;
    evec1 = work + n * 3;

    assert(n > 2);

    for (i = 0, j = n - 1; i < n - 1; ++i, --j)
    {
        temp = fabs(diag[i]);

        qvec1[i] = 0.;
        evec1[i] = 0.;
        evec[j - 1] = diag_off[i] * diag_off[i] * temp;
        qvec[j] = temp;
    }
    // qvec[n - 1] = fabs(diag[n-1]);
    qvec[0] = fabs(diag[n - 1]);
    qvec1[n - 1] = 0.;
    evec[n - 1] = 0.;
    evec1[n - 1] = 0.;

    /*     Reverse the qd-array, if warranted. */

    if (qvec[0] < qvec[n - 1] * 1.5)
    {
        for (i = 0, j = n - 1; i < n / 2; i++, --j)
        {
            temp = qvec[i];
            qvec[i] = qvec[j];
            qvec[j] = temp;

            temp = evec[i];
            evec[i] = evec[j - 1];
            evec[j - 1] = temp;
        }
    }

    /*        dqd maps Z to ZZ plus Li's test. */
    diag_sum = qvec[0];
    for (i = 0; i < n - 1; i++)
    {
        temp = diag_sum + evec[i];
        qvec1[i] = temp;
        evec1[i] = qvec[i + 1] * (evec[i] / temp);
        diag_sum = qvec[i + 1] * (diag_sum / temp);
    }
    qvec1[n - 1] = diag_sum;
    diag_sum = qvec1[0];
    for (i = 0; i < n - 1; i++)
    {
        temp = diag_sum + evec1[i];
        qvec[i] = temp;
        evec[i] = qvec1[i + 1] * (evec1[i] / temp);
        diag_sum = qvec1[i + 1] * (diag_sum / temp);
    }
    qvec[n - 1] = diag_sum;

    n0 = n;
    tau = 0.;

    for (itry = 0; n0 > 0; ++itry)
    {
        if (itry >= n)
        {
            return 3;
        }

        /*        E(N0) holds the value of SIGMA when submatrix in I0:N0 */
        /*        splits from the rest of the array, but is negated. */

        sigma = -evec[n0 - 1];
        if (sigma < 0.)
        {
            return 1;
        }

        /*        Find last unreduced submatrix's top index I0, find QMAX and */
        /*        EMIN. Find Gershgorin-type bound if Q's much greater than E's. */

        emax = 0.;
        qmin = qvec[n0 - 1];
        for (i = n0 - 1; i > 0; i--)
        {
            if (evec[i - 1] <= 0.)
            {
                break;
            }
            if (qmin >= emax * 4.)
            {
                qmin = MIN(qmin, qvec[i]);
                emax = MAX(emax, evec[i - 1]);
            }
        }

        i0 = i;
        qvecp = qvec;
        qvec1p = qvec1;
        evecp = evec;
        evec1p = evec1;

        if (qmin < 0 || emax < 0)
        {
            std::cerr << "dlasq2: qmin < 0 or emax < 0" << std::endl;
            return 1;
        }

        /*        Put -(initial shift) into DMIN. */

        dmin[0] = -MAX(0., qmin - 2. * sqrt(qmin * emax));

        /*        Now I0:N0 is unreduced. */

        nbig = (n0 - i0) * 10;
        for (iwhilb = 0; iwhilb < nbig; ++iwhilb)
        {
            /*           While submatrix unfinished take a good dqds step. */

            n0init = n0;
            tol = DBL_EPSILON * 100.;
            tol2 = tol * tol;

            while (n0 > i0)
            {
                n1 = n0 - 1;
                n2 = n0 - 2;
                if (n1 == i0 || evecp[n2] < tol2 * (sigma + qvecp[n1]) || evec1p[n2] < tol2 * qvecp[n2])
                {
                    qvec[n1] = qvecp[n1] + sigma;
                    --n0;
                    continue;
                }
                if (n2 == i0 || evecp[n1 - 2] < tol2 * sigma || evec1p[n1 - 2] < tol2 * qvecp[n1 - 2])
                {
                    if (qvecp[n1] > qvecp[n2])
                    {
                        s = qvecp[n1];
                        qvecp[n1] = qvecp[n2];
                        qvecp[n2] = s;
                    }
                    t = (qvecp[n2] - qvecp[n1] + evecp[n2]) * .5;
                    if (evecp[n2] > qvecp[n1] * tol2 && t != 0.)
                    {
                        s = qvecp[n1] * (evecp[n2] / t);
                        s = qvecp[n1] * (evecp[n2] / (t + sqrt(t * (t + s))));
                        t = qvecp[n2] + (s + evecp[n2]);
                        qvecp[n1] *= qvecp[n2] / t;
                        qvecp[n2] = t;
                    }
                    qvec[n2] = qvecp[n2] + sigma;
                    qvec[n1] = qvecp[n1] + sigma;
                    n0 += -2;
                    continue;
                }
                break;
            }
            if (n0 <= i0)
            {
                break;
            }

            if (dmin[0] <= 0.)
            {
                tau = -dmin[0];
            }
            else
            {
                _dlasq4(i0, n0, n0init, qvecp, qvec1p, evecp, evec1p, dmin, dn, &tau);
            }

            /*     Call dqds until DMIN > 0. */

            tol = DBL_EPSILON * sigma;
            for (iter = 0; iter < 3; iter++)
            {

                _dlasq5(i0, n0, qvecp, qvec1p, evecp, evec1p, tau, tol, dmin, dn);

                if (dmin[0] >= 0.)
                {
                    break;
                }
                else if (dmin[1] > 0.)
                {
                    tau += dmin[0];
                }
                else
                {
                    tau *= .25;
                }
            }
            if (dmin[0] < 0)
            {
                tau = 0.;
                _dlasq5(i0, n0, qvecp, qvec1p, evecp, evec1p, tau, tol, dmin, dn);
            }

            sigma += tau;

            // swap vec, vec1
            swap = qvecp;
            qvecp = qvec1p;
            qvec1p = swap;
            swap = evecp;
            evecp = evec1p;
            evec1p = swap;
        }

        if (iwhilb == nbig)
        {
            // TODO: not converged. raise error
            std::cerr << "dlasq2: Maximum number of iterations exceeded" << std::endl;
            return 2;
        }
    }
    return 0;
}

static int _compute_eigenvalues(int n, double *diag, double *diag_off1,
                                double *w, double *werr, double *wgap, double *work)
{
    double gl, gu;
    double eabs, eold, tmp, tmp1, dmax;
    double eps, rtol, rtl;
    double sigma, tau;
    double sgndef, spectral_diameter;
    double isleft, isrght, dpivot;
    int idum, ip, i;
    int lcnt, rcnt, norep;
    int iinfo;

    if (n <= 0)
    {
        return 0;
    }

    if (n == 1)
    {
        w[0] = diag[0];
        werr[0] = 0.;
        wgap[0] = 0.;
        /*        store the shift for the initial RRR, which is zero in this case */
        diag_off1[0] = 0.;
        return 0;
    }

    eps = 2 * DBL_EPSILON;
    rtl = 2.1e-8; // sqrt(eps)
    rtol = 16. * DBL_EPSILON;

    /*     Init WERR, WGAP. Compute Gerschgorin intervals and spectral diameter. */
    /*        Set interval [VL,VU] that contains all eigenvalues */
    gl = diag[0];
    gu = diag[0];
    eold = 0.;
    diag_off1[n - 1] = 0.;
    for (i = 0; i < n; ++i)
    {
        werr[i] = 0.;
        wgap[i] = 0.;
        eabs = fabs(diag_off1[i]);
        tmp1 = eabs + eold;
        gl = MIN(gl, diag[i] - tmp1);
        gu = MAX(gu, diag[i] + tmp1);
        eold = eabs;
    }
    /*     Compute spectral diameter. The Gerschgorin bounds give an */
    /*     estimate that is wrong by at most a factor of SQRT(2) */
    spectral_diameter = gu - gl;
    /* will hold the shift for the initial RRR, for now set it =0 */
    diag_off1[n - 1] = 0.;

    if (n == 1)
    {
        w[0] = diag[0];
        werr[0] = 0.;
        wgap[0] = 0.;
        return 0;
    }

    double *e2 = work;
    work += n;
    for (i = 0; i < n - 1; ++i)
    {
        e2[i] = diag_off1[i] * diag_off1[i];
    }

    /*           Case of DQDS */
    /*           Find approximations to the extremal eigenvalues of the block */
    iinfo = _dlarrk(n, 1, gl, gu, diag, e2, rtl, &tmp, &tmp1);
    if (iinfo != 0)
    {
        return -1;
    }
    isleft = MAX(gl, tmp - tmp1 - eps * 100. * fabs(tmp - tmp1));
    iinfo = _dlarrk(n, n, gl, gu, diag, e2, rtl, &tmp, &tmp1);
    if (iinfo != 0)
    {
        return -1;
    }
    isrght = MIN(gu, tmp + tmp1 + eps * 100. * fabs(tmp + tmp1));
    /*           Improve the estimate of the spectral diameter */
    spectral_diameter = isrght - isleft;
    /*        Decide whether the base representation for the current block */
    /*        L_JBLK D_JBLK L_JBLK^T = T_JBLK - sigma_JBLK I */
    /*        should be on the left or the right end of the current block. */
    /*        The strategy is to shift to the end which is "more populated" */
    /*        Furthermore, decide whether to use DQDS for the computation of */
    /*        the eigenvalue approximations at the end of DLARRE or bisection. */
    /*        dqds is chosen if all eigenvalues are desired or the number of */
    /*        eigenvalues to be computed is large compared to the blocksize. */
    /*           If all the eigenvalues have to be computed, we use dqd */
    /*           INDL is the local index of the first eigenvalue to compute */

    if (n > 1)
    {
        /*        Compute the negcount at the 1/4 and 3/4 points */
        _dlarrc(n, isleft + spectral_diameter * .25, isrght - spectral_diameter * .25,
                diag, e2, &lcnt, &rcnt);
    }

    if (n == 1)
    {
        sigma = gl;
        sgndef = 1.;
    }
    else if (lcnt - 1 >= n - rcnt)
    {
        sigma = MAX(isleft, gl);
        sgndef = 1.;
    }
    else
    {
        sigma = MIN(isrght, gu);
        sgndef = -1.;
    }
    /*        An initial SIGMA has been chosen that will be used for computing */
    /*        T - SIGMA I = L D L^T */
    /*        Define the increment TAU of the shift in case the initial shift */
    /*        needs to be refined to obtain a factorization with not too much */
    /*        element growth. */
    /*           The initial SIGMA was to the outer end of the spectrum */
    /*           the matrix is definite and we need not retreat. */
    tau = MAX(spectral_diameter * n, 2. * fabs(sigma)) * eps;

    for (idum = 0; idum < MAXTRY; ++idum)
    {
        /*           Compute L D L^T factorization of tridiagonal matrix T - sigma I. */
        /*           Store D in WORK(1:IN), L in WORK(IN+1:2*IN), and reciprocals of */
        /*           pivots in WORK(2*IN+1:3*IN) */
        dpivot = diag[0] - sigma;
        work[0] = dpivot;
        dmax = fabs(work[0]);
        for (i = 0; i < n - 1; ++i)
        {
            work[n * 2 + i] = 1. / work[i];
            tmp = diag_off1[i] * work[n * 2 + i];
            work[n + i] = tmp;
            dpivot = diag[i + 1] - sigma - tmp * diag_off1[i];
            work[i + 1] = dpivot;
            dmax = MAX(dmax, fabs(dpivot));
        }
        /*           check for element growth */
        norep = dmax > spectral_diameter * 64.;
        if (!norep)
        {
            /*              Ensure the definiteness of the representation */
            /*              All entries of D (of L D L^T) must have the same sign */
            for (i = 0; i < n; ++i)
            {
                tmp = sgndef * work[i];
                if (tmp < 0.)
                {
                    norep = 1;
                    break;
                }
            }
        }
        if (norep)
        {
            /*              Note that in the case of IRANGE=ALLRNG, we use the Gerschgorin */
            /*              shift which makes the matrix definite. So we should end up */
            /*              here really only in the case of IRANGE = VALRNG or INDRNG. */
            if (idum == MAXTRY - 1)
            {
                if (sgndef == 1.)
                {
                    /*                    The fudged Gerschgorin shift should succeed */
                    sigma = gl - spectral_diameter * 2. * eps * n;
                }
                else
                {
                    sigma = gu + spectral_diameter * 2. * eps * n;
                }
            }
            else if (idum == MAXTRY)
            {
                /*        if the program reaches this point, no base representation could be */
                /*        found in MAXTRY iterations. */
                return -2;
            }
            else
            {
                sigma -= sgndef * tau;
                tau *= 2.;
            }
        }
        else
        {
            break;
        }
    }

    /*        At this point, we have found an initial base representation */
    /*        T - SIGMA I = L D L^T with not too much element growth. */
    /*        Store the shift. */
    diag_off1[n - 1] = sigma;
    /*        Store D and L. */
    for (ip = 0; ip < n; ip++)
    {
        diag[ip] = work[ip];
    }
    for (ip = 0; ip < n - 1; ip++)
    {
        diag_off1[ip] = work[n + ip];
    }

    /*           Call dqds to get all eigs (and then possibly delete unwanted */
    /*           eigenvalues). */
    /*           Note that dqds finds the eigenvalues of the L D L^T representation */
    /*           of T to high relative accuracy. High relative accuracy */
    /*           might be lost when the shift of the RRR is subtracted to obtain */
    /*           the eigenvalues of T. However, T is not guaranteed to define its */
    /*           eigenvalues to high relative accuracy anyway. */
    /*           Set RTOL to the order of the tolerance used in DLASQ2 */
    /*           This is an ESTIMATED error, the worst case bound is 4*N*EPS */
    /*           which is usually too large and requires unnecessary work to be */
    /*           done by bisection when computing the eigenvectors */
    iinfo = _dlasq2(n, work, diag, diag_off1);
    if (iinfo != 0)
    {
        return -5;
    }
    else
    {
        for (i = 0; i < n; ++i)
        {
            if (work[i] < 0.)
            {
                std::cerr << "dlarre: negative eigenvalues\n";
                return -6;
            }
        }
    }
    if (sgndef > 0.)
    {
        for (i = 0; i < n; ++i)
        {
            w[i] = work[n - 1 - i];
        }
    }
    else
    {
        for (i = 0; i < n; ++i)
        {
            w[i] = -work[i];
        }
    }

    for (i = 0; i < n; ++i)
    {
        werr[i] = rtol * fabs(w[i]);
    }

    /*              compute the right gap between the intervals */
    for (i = 0; i < n - 1; ++i)
    {
        wgap[i] = MAX(0., w[i + 1] - werr[i + 1] - (w[i] + werr[i]));
    }
    wgap[-1] = MAX(0., w[0] - werr[0] - gl);
    wgap[n - 1] = MAX(0., gu - sigma - (w[n - 1] + werr[n - 1]));

    return 0;
}

static int _dlarrf(int n, double *diag, double *diag_off1, double *ld, int clstrt,
                   double *w, double *wgap, double *werr, double clgapl,
                   double *sigma, double *dplus, double *lplus)
{
    int i, ktry;
    double s, tmp, max1, growthbound, lsigma;

    /*     Use a small fudge to make sure that we really shift to the outside */
    lsigma = w[clstrt] - werr[clstrt];
    lsigma -= fabs(lsigma) * 4. * DBL_EPSILON;

    growthbound = diag[0] * 8.;

    for (ktry = 0; ktry < 2; ++ktry)
    {
        /*     Compute the element growth when shifting to both ends of the cluster */
        /*     accept the shift if there is no element growth at one of the two ends */
        /*     Left end */
        s = -lsigma;
        dplus[0] = diag[0] + s;
        max1 = fabs(dplus[0]);
        for (i = 0; i < n - 1; ++i)
        {
            tmp = ld[i] / dplus[i];
            lplus[i] = tmp;
            s = s * tmp * diag_off1[i] - lsigma;
            dplus[i + 1] = diag[i + 1] + s;
            max1 = MAX(max1, fabs(dplus[i + 1]));
        }
        *sigma = lsigma;
        if (max1 <= growthbound)
        {
            return 0;
        }

        /*        If we are here, shifts failed the RRR test. */
        /*        Back off to the outside */
        lsigma = lsigma - MIN(clgapl * .25, wgap[clstrt]);
    }

    if (max1 > FAIL_THRESHOLD)
    {
        std::cerr << "dlarrf max1 = " << max1 << std::endl;
        return 1;
    }
    return 0;
}

static int _dlaneg(int n, double *diag, double *lld, double sigma, int twist_index)
{
    int j;
    int negcnt;
    double p, t;
    double dplus, dminus;

    negcnt = 0;
    /*     I) upper part: L D L^T - SIGMA I = L+ D+ L+^T */
    t = -sigma;
    for (j = 0; j < twist_index - 1; ++j)
    {
        dplus = diag[j] + t;
        if (dplus < 0.)
        {
            ++negcnt;
        }
        t = t / dplus * lld[j] - sigma;
    }

    /*     II) lower part: L D L^T - SIGMA I = U- D- U-^T */
    p = diag[n - 1] - sigma;
    for (j = n - 2; j >= twist_index - 1; --j)
    {
        dminus = lld[j] + p;
        if (dminus < 0.)
        {
            ++negcnt;
        }
        p = p / dminus * diag[j] - sigma;
    }

    /*     III) Twist index */
    /*       T was shifted by SIGMA initially. */
    if (t + sigma + p < 0.)
    {
        ++negcnt;
    }
    return negcnt;
}

/* DLARRB provides limited bisection to locate eigenvalues for more accuracy. */
static int _dlarrb(int n, double *diag, double *lld,
                   int ifirst, int ilast, double rtol1, double rtol2,
                   double *w, double *wgap, double *werr, int twist_index)
{
    int i, iter, negcnt;
    double mid, back, left, right, width;
    double cvrgd = MAX(rtol1 * wgap[ifirst],
                       rtol2 * MAX(fabs(w[ifirst]), fabs(w[ilast - 1])));

    for (i = ifirst; i < ilast; ++i)
    {
        if (werr[i] < cvrgd)
        {
            continue;
        }

        /*        Make sure that [LEFT,RIGHT] contains the desired eigenvalue */
        /*        Compute negcount from dstqds facto L+D+L+^T = L D L^T - LEFT */
        left = w[i];
        back = werr[i];
        for (negcnt = ilast; negcnt > i;)
        {
            left -= back;
            back *= 2.;
            negcnt = _dlaneg(n, diag, lld, left, twist_index);
        }

        /*        Compute negcount from dstqds facto L+D+L+^T = L D L^T - RIGHT */
        right = w[i];
        back = werr[i];
        for (negcnt = ifirst; negcnt <= i;)
        {
            right += back;
            back *= 2.;
            negcnt = _dlaneg(n, diag, lld, right, twist_index);
        }

        for (iter = 0; iter < ITMAX; ++iter)
        {
            /*        Perform one bisection step */
            mid = (left + right) * .5;
            width = right - mid;
            if (width < cvrgd)
            {
                break;
            }

            negcnt = _dlaneg(n, diag, lld, mid, twist_index);
            if (negcnt <= i)
            {
                left = mid;
            }
            else
            {
                right = mid;
            }
        }
        w[i] = mid;
        werr[i] = width;
    }

    for (i = ifirst; i < ilast - 1; ++i)
    {
        wgap[i] = MAX(0., w[i + 1] - werr[i + 1] - w[i] - werr[i]);
    }
    return 0;
}

static void _dlar1v(int n, double lambda, double *diag, double *diag_off1,
                    double *ld, double *lld, double gaptol, double *vec, int *negcnt,
                    int *twist_index, double *resid, double *rqcorr, double *work)
{
    int i, r1, r2;
    int neg1, neg2;
    double s, tmp;
    double nrminv, mingma, dplus, dminus;
    double *lplus = work;
    double *uminus = work + n;
    double *work_p = work + n * 2;

    if (*twist_index == -1)
    {
        r1 = 0;
        r2 = n;
        *twist_index = 0;
    }
    else
    {
        r1 = *twist_index;
        r2 = *twist_index + 1;
    }

    /*     L D L**T - sigma I. */
    /*     Compute the progressive transform (using the differential form) */
    /*     until the index R1 */

    neg2 = 0;
    s = diag[n - 1] - lambda;
    work_p[n - 1] = s;
    for (i = n - 2; i >= r1; --i)
    {
        dminus = lld[i] + s;
        if (dminus < 0.)
        {
            ++neg2;
        }
        tmp = diag[i] / dminus;
        uminus[i] = diag_off1[i] * tmp;
        s = s * tmp - lambda;
        work_p[i] = s;
    }

    /*     Compute the stationary transform (using the differential form) */
    /*     until the index R2. */

    neg1 = 0;
    s = -lambda;
    for (i = 0; i < r1; ++i)
    {
        dplus = diag[i] + s;
        if (dplus < 0.)
        {
            ++neg1;
        }
        lplus[i] = ld[i] / dplus;
        s = s * lplus[i] * diag_off1[i] - lambda;
    }
    mingma = s + lambda + work_p[r1];
    if (mingma < 0.)
    {
        ++neg1;
    }

    *negcnt = neg1 + neg2;

    /*     Find the index (from R1 to R2) of the largest (in magnitude) */
    /*     diagonal element of the inverse */

    for (i = r1; i < r2 - 1; ++i)
    {
        dplus = diag[i] + s;
        lplus[i] = ld[i] / dplus;
        tmp = s * lplus[i] * diag_off1[i];
        s = tmp - lambda;

        tmp = tmp + work_p[i + 1];
        if (fabs(tmp) <= fabs(mingma))
        {
            mingma = tmp;
            *twist_index = i + 1;
        }
    }

    /*     Compute the FP vector: solve N^T v = e_r */

    vec[*twist_index] = 1.;
    double ztz = 1.;

    for (i = *twist_index - 1; i >= 0; --i)
    {
        tmp = -(lplus[i] * vec[i + 1]);
        ztz += tmp * tmp;
        vec[i] = tmp;
    }

    for (i = *twist_index; i < n - 1; ++i)
    {
        tmp = -(uminus[i] * vec[i]);
        ztz += tmp * tmp;
        vec[i + 1] = tmp;
    }

    tmp = 1. / ztz;
    nrminv = sqrt(tmp);
    for (i = 0; i < n; i++)
    {
        vec[i] *= nrminv;
    }
    *resid = fabs(mingma) * nrminv;
    *rqcorr = mingma * tmp;
}

/* the eigenvectors of the tridiagonal matrix T = L D LT given L, D and the eigenv alues of L D LT. */
/* TODO: Compute only the fist element of each eigenvectors */
static int _compute_eigenvectors(int n, double *diag, double *diag_off1,
                                 double *w, double *werr, double *wgap,
                                 double *vec, double *work, int *iwork)
{
    int i, j, k, icls, iter, idone, ndepth;
    int ncluster, ncluster1, negcnt;
    int oldfst, oldlst;
    int newfst, newlst;
    int needbs;
    int iinfo;
    double fudge, eps, rqtol, tol, tmp;
    double left, right, gap, bstw, savgap, gaptol;
    double sigma, tau, resid, lambda, bstres;
    double rqcorr, resid_tol, rqcorr_tol;
    double *buf_w, *buf_ld, *buf_lld, *buf_wrk;
    int *twist_indices;
    int *swap, *old_cluster_range, *new_cluster_range;

    if (n <= 0)
    {
        return 0;
    }

    /*     The first N entries of WORK are reserved for the eigenvalues */
    buf_w = work;
    buf_ld = work + n;
    buf_lld = work + n * 2;
    buf_wrk = work + n * 3;
    for (i = 0; i < n * 6; ++i)
    {
        work[i] = 0.;
    }
    twist_indices = iwork;
    for (i = 0; i < n; ++i)
    {
        twist_indices[i] = 0;
    }
    old_cluster_range = iwork + n;
    new_cluster_range = iwork + n * 3;

    eps = DBL_EPSILON;
    rqtol = DBL_EPSILON * 2.;
    tol = DBL_EPSILON * 8;

    sigma = diag_off1[n - 1];
    if (1 == n)
    {
        vec[0] = 1.;
        w[0] += sigma;
        return 0;
    }
    /*        The desired (shifted) eigenvalues are stored in W(WBEGIN:WEND) */
    /*        Note that these can be approximations, in this case, the corresp. */
    /*        entries of WERR give the size of the uncertainty interval. */
    /*        The eigenvalue approximations will be refined when necessary as */
    /*        high relative accuracy is required for the computation of the */
    /*        corresponding eigenvectors. */
    for (i = 0; i < n; i++)
    {
        buf_w[i] = w[i];
        w[i] += sigma;
    }
    ncluster = 1;
    old_cluster_range[0] = 0;
    old_cluster_range[1] = n;
    idone = 0;
    for (ndepth = 0; ndepth < n; ndepth++)
    {
        if (idone == n)
        {
            break;
        }

        ncluster1 = ncluster;
        ncluster = 0;
        /*           Process the clusters on the current level */
        for (icls = 0; icls < ncluster1; ++icls)
        {
            /*              OLDFST, OLDLST = first, last index of current cluster. */
            oldfst = old_cluster_range[icls * 2];
            oldlst = old_cluster_range[icls * 2 + 1];
            if (ndepth > 0)
            {
                /*                 Retrieve relatively robust representation (RRR) of cluster */
                /*                 that has been computed at the previous level */
                /*                 The RRR is stored in Z and overwritten once the eigenvectors */
                /*                 have been computed or when the cluster is refined */
                /*                    Get representation from location of the leftmost evalue */
                /*                    of the cluster */
                for (i = 0; i < n; i++)
                {
                    diag[i] = vec[oldfst * n + i];
                }
                for (i = 0; i < n - 1; i++)
                {
                    diag_off1[i] = vec[(oldfst + 1) * n + i];
                }
                sigma = vec[(oldfst + 2) * n - 1];
            }
            /*              Compute DL and DLL of current RRR */
            for (j = 0; j < n - 1; ++j)
            {
                tmp = diag[j] * diag_off1[j];
                buf_ld[j] = tmp;
                buf_lld[j] = tmp * diag_off1[j];
            }
            /*                 perform limited bisection (if necessary) to get approximate */
            /*                 eigenvalues to the precision needed. */
            /*
                        if (ndepth > 0) {
                            _dlarrb(n, diag, buf_lld, oldfst, oldlst, RTOL1, RTOL2, buf_w, wgap, werr, n);
                            if (oldfst > 0) {
                                wgap[oldfst-1] = MAX(wgap[oldfst-1], w[oldfst] - werr[oldfst] - w[oldfst-1] - werr[oldfst-1]);
                            }
                            if (oldlst < n) {
                                wgap[oldlst-1] = MAX(wgap[oldlst-1], w[oldlst] - werr[oldlst] - w[oldlst-1] - werr[oldlst-1]);
                            }
                            for (j = oldfst; j < oldlst; ++j) {
                                w[j] = buf_w[j] + sigma;
                            }
                        }
            */

            /*              Process the current node. */
            newfst = oldfst;
            for (newlst = oldfst + 1; newlst <= oldlst; ++newlst)
            {
                if (newlst < oldlst && wgap[newlst - 1] < MINGAP * fabs(buf_w[newlst - 1]))
                {
                    continue;
                }

                if (newlst - newfst > 1)
                {
                    /*                    Compute left- and rightmost eigenvalue of child */
                    /*                    to high precision in order to shift as close */
                    /*                    as possible and obtain as large relative gaps */
                    /*                    as possible */
                    _dlarrb(n, diag, buf_lld, newfst, newfst + 1, rqtol, rqtol, buf_w, wgap, werr, n);
                    _dlarrb(n, diag, buf_lld, newlst - 1, newlst, rqtol, rqtol, buf_w, wgap, werr, n);

                    /*                    Compute RRR of child cluster. */
                    /*                    Note that the new RRR is stored in Z */
                    iinfo = _dlarrf(n, diag, diag_off1, buf_ld, newfst, buf_w,
                                    wgap, werr, wgap[newfst - 1],
                                    &tau, vec + newfst * n, vec + (newfst + 1) * n);
                    if (iinfo != 0)
                    {
                        return -2;
                    }
                    /*                       a new RRR for the cluster was found by DLARRF */
                    /*                       update shift and store it */
                    vec[(newfst + 2) * n - 1] = sigma + tau;

                    for (k = newfst; k < newlst; ++k)
                    {
                        fudge = eps * 3. * fabs(buf_w[k]);
                        buf_w[k] -= tau;
                        fudge += eps * 4. * fabs(buf_w[k]);
                        /*                          Fudge errors */
                        werr[k] += fudge;
                        /*                          Gaps are not fudged. Provided that WERR is small */
                        /*                          when eigenvalues are close, a zero gap indicates */
                        /*                          that a new representation is needed for resolving */
                        /*                          the cluster. A fudge could lead to a wrong decision */
                        /*                          of judging eigenvalues 'separated' which in */
                        /*                          reality are not. This could have a negative impact */
                        /*                          on the orthogonality of the computed eigenvectors. */
                    }
                    new_cluster_range[ncluster * 2] = newfst;
                    new_cluster_range[ncluster * 2 + 1] = newlst;
                    ++ncluster;
                }
                else
                {
                    /*                    Compute eigenvector of singleton */

                    lambda = buf_w[newfst];
                    left = lambda - werr[newfst];
                    right = lambda + werr[newfst];
                    gap = wgap[newfst];
                    if (newfst == 0 || newfst + 1 == n)
                    {
                        gaptol = 0;
                    }
                    else
                    {
                        gaptol = gap * eps;
                    }
                    savgap = gap;
                    resid_tol = tol * gap;
                    rqcorr_tol = rqtol * fabs(lambda);

                    /*                    We want to use the Rayleigh Quotient Correction */
                    /*                    as often as possible since it converges quadratically */
                    /*                    when we are close enough to the desired eigenvalue. */
                    /*                    However, the Rayleigh Quotient can have the wrong sign */
                    /*                    and lead us away from the desired eigenvalue. In this */
                    /*                    case, the best we can do is to use bisection. */

                    needbs = 0;
                    bstres = 1e307;
                    bstw = 0;
                    twist_indices[newfst] = -1;
                    for (iter = 0; iter < MAXRQITER; ++iter)
                    {
                        _dlar1v(n, lambda, diag, diag_off1,
                                buf_ld, buf_lld, gaptol, vec + newfst * n,
                                &negcnt, twist_indices + newfst, &resid, &rqcorr, buf_wrk);

                        /* keep track of the best lambda */
                        if (resid < bstres)
                        {
                            bstres = resid;
                            bstw = lambda;
                        }

                        /*                    Convergence test for Rayleigh-Quotient iteration */

                        if (resid < resid_tol || fabs(rqcorr) < rqcorr_tol)
                        {
                            break;
                        }

                        /*                       We only use the RQCORR if it improves the */
                        /*                       the iterate reasonably. */
                        if (lambda + rqcorr > right || lambda + rqcorr < left)
                        {
                            needbs = 1;
                            break;
                        }

                        /*                       We need to check that the RQCORR update doesn't */
                        /*                       move the eigenvalue away from the desired one and */
                        /*                       towards a neighbor. */
                        if (newfst < negcnt)
                        {
                            /*                          The wanted eigenvalue lies to the left */
                            if (rqcorr > 0)
                            {
                                needbs = 1;
                                break;
                            }
                            right = lambda;
                        }
                        else
                        {
                            /*                          The wanted eigenvalue lies to the right */
                            if (rqcorr < 0)
                            {
                                needbs = 1;
                                break;
                            }
                            left = lambda;
                        }

                        buf_w[newfst] = (right + left) * .5;
                        lambda += rqcorr;
                        werr[newfst] = (right - left) * .5;

                        if (right - left < rqcorr_tol)
                        {
                            if (bstres < resid)
                            {
                                lambda = bstw;
                                _dlar1v(n, lambda, diag, diag_off1, buf_ld, buf_lld,
                                        gaptol, vec + newfst * n,
                                        &negcnt, twist_indices + newfst, &resid, &rqcorr, buf_wrk);
                            }
                            break;
                        }
                    }

                    if (needbs)
                    {
                        _dlarrb(n, diag, buf_lld, newfst, newfst + 1, 0., eps * 2.,
                                buf_w, wgap, werr, twist_indices[newfst] + 1);
                        lambda = buf_w[newfst];

                        /*                       Reset twist index from inaccurate LAMBDA to */
                        /*                       force computation of true MINGMA */
                        twist_indices[newfst] = -1;
                        _dlar1v(n, lambda, diag, diag_off1,
                                buf_ld, buf_lld, gaptol, vec + newfst * n,
                                &negcnt, twist_indices + newfst, &resid, &rqcorr, buf_wrk);
                    }

                    w[newfst] = lambda + sigma;

                    /*                    Recompute the gaps on the left and right */
                    /*                    But only allow them to become larger and not */
                    /*                    smaller (which can only happen through "bad" */
                    /*                    cancellation and doesn't reflect the theory */
                    /*                    where the initial gaps are underestimated due */
                    /*                    to WERR being too crude.) */
                    if (newfst > 0)
                    {
                        wgap[newfst - 1] = MAX(wgap[newfst - 1], w[newfst] - werr[newfst] - w[newfst - 1] - werr[newfst - 1]);
                    }
                    if (newfst < n - 1)
                    {
                        wgap[newfst] = MAX(savgap, w[newfst + 1] - werr[newfst + 1] - w[newfst] - werr[newfst]);
                    }

                    ++idone;
                }

                newfst = newlst;
            }
        }

        swap = old_cluster_range;
        old_cluster_range = new_cluster_range;
        new_cluster_range = swap;
    }
    if (idone < n)
    {
        return -2;
    }
    return 0;
}

static int _dlaev2(double *eig, double *vec, double *diag, double *diag_off1)
{
    double a = diag[0];
    double b = diag_off1[0];
    double c = diag[1];
    double df, cs, ct, tb, sm, tn, rt, tmp;
    double rt1, rt2, cs1, sn1;
    int sgn1, sgn2;

    sm = a + c;
    df = a - c;
    tb = b + b;

    rt = sqrt(tb * tb + df * df);

    if (sm > 0.)
    {
        rt1 = (sm + rt) * .5;
        sgn1 = 1;
        rt2 = (a * c - b * b) / rt1;
    }
    else if (sm < 0.)
    {
        rt1 = (sm - rt) * .5;
        sgn1 = -1;
        rt2 = (a * c - b * b) / rt1;
    }
    else
    {
        rt1 = rt * .5;
        rt2 = rt * -.5;
        sgn1 = 1;
    }

    /*     Compute the eigenvector */

    if (df >= 0.)
    {
        cs = df + rt;
        sgn2 = 1;
    }
    else
    {
        cs = df - rt;
        sgn2 = -1;
    }

    if (fabs(cs) > fabs(tb))
    {
        ct = -tb / cs;
        sn1 = 1. / sqrt(ct * ct + 1.);
        cs1 = ct * sn1;
    }
    else
    {
        if (b == 0.)
        {
            cs1 = 1.;
            sn1 = 0.;
        }
        else
        {
            tn = -cs / tb;
            cs1 = 1. / sqrt(tn * tn + 1.);
            sn1 = tn * cs1;
        }
    }

    if (sgn1 == sgn2)
    {
        tmp = cs1;
        cs1 = -sn1;
        sn1 = tmp;
    }

    eig[0] = rt2;
    eig[1] = rt1;
    vec[0] = -sn1;
    vec[1] = cs1;
    vec[2] = cs1;
    vec[3] = sn1;
    return 0;
}

int _CINTdiagonalize(int n, double *diag, double *diag_off1, double *eig, double *vec)
{
    lapack_int M = n;
    int32_t LDZ = std::max(1, n);
    int32_t NZC = std::max(1, n);
    lapack_int ISUPPZ[MXRYSROOTS * 2];
    lapack_int TRYRAC = 1;
    //double WORK[MXRYSROOTS * 18];
    int32_t LWORK = MXRYSROOTS * 18;
    //int32_t IWORK[MXRYSROOTS * 10];
    int32_t LIWORK = MXRYSROOTS * 10;
    /*
        int matrix_layout, char jobz, char range,
        lapack_int n, double* d, double* e, double vl,
        double vu, lapack_int il, lapack_int iu,lapack_int
        lapack_int* m, double* w, double* z, lapack_int ldz,
        lapack_int nzc, lapack_int* isuppz,
        lapack_logical* tryrac
        */
    int INFO = LAPACKE_dstemr(LAPACK_ROW_MAJOR, 'V', 'A', n, diag, diag_off1, 0.0, 0.0, 0, 0, &M, eig, vec, LDZ, NZC, ISUPPZ, &TRYRAC);
    // Transpose vec of size n x n
    // Original version usess COL_MAJOR version but this just does not seem to work here?
    // for (int i = 0; i < n; i++) {
    //    for (int j = i +1; j < n; j++) {
    //           std::swap(vec[i * n + j], vec[j * n + i]);
    //    }
    //}
    return INFO;
}

//-----------------------------------------------------------------------

/*
    Modified based on mpmath.matrices.eigen.eig function.
    This implementation restricts the eigenvalues to real.
*/

#include <stdio.h>
#include <math.h>

#define SQUARE(X) ((X) * (X))
#define MXRYSROOTS 32

#define POLYNOMIAL_VALUE1(p, a, order, x) \
    p = a[order];                         \
    for (i = 1; i <= order; i++)          \
    {                                     \
        p = p * x + a[order - i];         \
    }

static int R_dnode(double *a, double *roots, int order)
{
    const double accrt = 1e-15;
    double x0, x1, xi, x1init, p0, p1, pi, p1init;
    int i, m, n;

    x1init = 0;
    p1init = a[0];
    for (m = 0; m < order; ++m)
    {
        x0 = x1init;
        p0 = p1init;
        x1init = roots[m];
        POLYNOMIAL_VALUE1(p1init, a, order, x1init);

        // When all coefficients a are 0, short-circuit the rest code to
        // ensure the roots from the lower order polynomials are preserved
        if (p1init == 0)
        {
            // roots[m] = x1init;
            continue;
        }
        if (p0 * p1init > 0)
        {
            std::cerr << "ROOT NUMBER " << m << " WAS NOT FOUND FOR POLYNOMIAL OF ORDER " << order << "\n";
            return 1;
        }
        if (x0 <= x1init)
        {
            x1 = x1init;
            p1 = p1init;
        }
        else
        {
            x1 = x0;
            p1 = p0;
            x0 = x1init;
            p0 = p1init;
        }
        // interpolate/extrapolate between [x0,x1]
        if (p1 == 0)
        {
            roots[m] = x1;
            continue;
        }
        else if (p0 == 0)
        {
            roots[m] = x0;
            continue;
        }
        else
        {
            xi = x0 + (x0 - x1) / (p1 - p0) * p0;
        }
        n = 0;
        while (fabs(x1 - x0) > x1 * accrt)
        {
            n++;
            if (n > 200)
            {
                std::cerr << "libcint::rys_roots NO CONV. IN R_dnode\n";
                return 1;
            }
            POLYNOMIAL_VALUE1(pi, a, order, xi);
            if (pi == 0)
            {
                break;
            }
            else if (p0 * pi <= 0)
            {
                x1 = xi;
                p1 = pi;
                xi = x0 * .25 + xi * .75;
            }
            else
            {
                x0 = xi;
                p0 = pi;
                xi = xi * .75 + x1 * .25;
            }
            POLYNOMIAL_VALUE1(pi, a, order, xi);
            if (pi == 0)
            {
                break;
            }
            else if (p0 * pi <= 0)
            {
                x1 = xi;
                p1 = pi;
            }
            else
            {
                x0 = xi;
                p0 = pi;
            }

            xi = x0 + (x0 - x1) / (p1 - p0) * p0;
        }
        roots[m] = xi;
    }
    return 0;
}

static void _qr_step(double *A, int nroots, int n0, int n1, double shift)
{
    int m1 = n0 + 1;
    int j, k, m3, j1, j2;
    double c = A[n0 * nroots + n0] - shift;
    double s = A[m1 * nroots + n0];
    double v = sqrt(c * c + s * s);
    double x, y;

    if (v == 0)
    {
        v = 1;
        c = 1;
        s = 0;
    }
    v = 1. / v;
    c *= v;
    s *= v;

    for (k = n0; k < nroots; k++)
    {
        // apply givens rotation from the left
        x = A[n0 * nroots + k];
        y = A[m1 * nroots + k];
        A[n0 * nroots + k] = c * x + s * y;
        A[m1 * nroots + k] = c * y - s * x;
    }

    m3 = std::min(n1, n0 + 3);
    for (k = 0; k < m3; k++)
    {
        // apply givens rotation from the right
        x = A[k * nroots + n0];
        y = A[k * nroots + m1];
        A[k * nroots + n0] = c * x + s * y;
        A[k * nroots + m1] = c * y - s * x;
    }

    for (j = n0; j < n1 - 2; j++)
    {
        j1 = j + 1;
        j2 = j + 2;
        // calculate givens rotation
        c = A[j1 * nroots + j];
        s = A[j2 * nroots + j];
        v = sqrt(c * c + s * s);
        A[j1 * nroots + j] = v;
        A[j2 * nroots + j] = 0;

        if (v == 0)
        {
            v = 1;
            c = 1;
            s = 0;
        }
        v = 1. / v;
        c *= v;
        s *= v;

        for (k = j1; k < nroots; k++)
        {
            // apply givens rotation from the left
            x = A[j1 * nroots + k];
            y = A[j2 * nroots + k];
            A[j1 * nroots + k] = c * x + s * y;
            A[j2 * nroots + k] = c * y - s * x;
        }
        m3 = std::min(n1, j + 4);
        for (k = 0; k < m3; k++)
        {
            // apply givens rotation from the right
            x = A[k * nroots + j1];
            y = A[k * nroots + j2];
            A[k * nroots + j1] = c * x + s * y;
            A[k * nroots + j2] = c * y - s * x;
        }
    }
}

static int _hessenberg_qr(double *A, int nroots)
{
    double eps = 1e-15;
    int maxits = 30;
    int n0 = 0;
    int n1 = nroots;
    int its = 0;
    int k, ic, k1;
    for (ic = 0; ic < nroots * maxits; ic++)
    {
        k = n0;
        while (k + 1 < n1)
        {
            double s = fabs(A[k * nroots + k]) + fabs(A[(k + 1) * nroots + k + 1]);
            if (fabs(A[(k + 1) * nroots + k]) < eps * s)
            {
                break;
            }
            k += 1;
        }

        k1 = k + 1;
        if (k1 < n1)
        {
            // deflation found at position (k+1, k)
            A[k1 * nroots + k] = 0;
            n0 = k1;
            its = 0;

            if (n0 + 1 >= n1)
            {
                // block of size at most two has converged
                n0 = 0;
                n1 = k1;
                if (n1 < 2)
                {
                    // QR algorithm has converged
                    return 0;
                }
            }
        }
        else
        {
            int m1 = n1 - 1;
            int m2 = n1 - 2;
            double a11 = A[m1 * nroots + m1];
            double a22 = A[m2 * nroots + m2];
            double shift;
            double t = a11 + a22;
            double s = SQUARE(a11 - a22);
            s += 4 * A[m1 * nroots + m2] * A[m2 * nroots + m1];
            if (s > 0)
            {
                s = sqrt(s);
                double a = (t + s) * .5;
                double b = (t - s) * .5;
                if (fabs(a11 - a) > fabs(a11 - b))
                {
                    shift = b;
                }
                else
                {
                    shift = a;
                }
            }
            else
            {
                if (n1 == 2)
                {
                    std::cerr << "hessenberg_qr: failed to find real roots\n";
                    return 1;
                }
                shift = t * .5;
            }
            its += 1;
            _qr_step(A, nroots, n0, n1, shift);
            if (its > maxits)
            {
                std::cerr << "hessenberg_qr: failed to converge after " << its << " steps\n";
                return 1;
            }
        }
    }
    std::cerr << "hessenberg_qr failed\n";
    return 1;
}

int _CINT_polynomial_roots(double *roots, double *cs, int nroots)
{
    if (nroots == 1)
    {
        roots[0] = -cs[2] / cs[3];
        return 0;
    }
    else if (nroots == 2)
    {
        double dum = sqrt(SQUARE(cs[2 * 3 + 1]) - 4 * cs[2 * 3 + 0] * cs[2 * 3 + 2]);
        roots[0] = (-cs[2 * 3 + 1] - dum) / cs[2 * 3 + 2] / 2;
        roots[1] = (-cs[2 * 3 + 1] + dum) / cs[2 * 3 + 2] / 2;
        return 0;
    }

    double A[MXRYSROOTS * MXRYSROOTS];
    int nroots1 = nroots + 1;
    // reuse the buffer in coefficients
    int i;
    double fac = -1. / cs[nroots * nroots1 + nroots];
    for (i = 0; i < nroots; i++)
    {
        A[nroots - 1 - i] = cs[nroots * nroots1 + i] * fac;
    }
    for (i = nroots; i < nroots * nroots; i++)
    {
        A[i] = 0;
    }
    for (i = 0; i < nroots - 1; i++)
    {
        A[(i + 1) * nroots + i] = 1.;
    }
    int err = _hessenberg_qr(A, nroots);
    if (err == 0)
    {
        for (i = 0; i < nroots; i++)
        {
            roots[nroots - 1 - i] = A[i * nroots + i];
        }
    }
    else
    {
        int k, order;
        double *a;
        double dum = sqrt(cs[2 * nroots1 + 1] * cs[2 * nroots1 + 1] - 4 * cs[2 * nroots1 + 0] * cs[2 * nroots1 + 2]);
        roots[0] = .5 * (-cs[2 * nroots1 + 1] - dum) / cs[2 * nroots1 + 2];
        roots[1] = .5 * (-cs[2 * nroots1 + 1] + dum) / cs[2 * nroots1 + 2];
        for (i = 2; i < nroots; i++)
        {
            roots[i] = 1;
        }
        for (k = 2; k < nroots; ++k)
        {
            order = k + 1;
            a = cs + order * nroots1;
            err = R_dnode(a, roots, order);
            if (err)
            {
                break;
            }
        }
    }
    return err;
}

#define PIE4 0.78539816339744827900

static int rys_root1(double x, double *roots, double *weights);
static int rys_root2(double x, double *roots, double *weights);
static int rys_root3(double x, double *roots, double *weights);
static int rys_root4(double x, double *roots, double *weights);
static int rys_root5(double x, double *roots, double *weights);
typedef int QuadratureFunction(int n, double x, double lower, double *roots, double *weights);

static int segment_solve(int n, double x, double lower, double *u, double *w,
                         double breakpoint, QuadratureFunction fn1, QuadratureFunction fn2)
{
    int error;
    if (x <= breakpoint)
    {
        error = fn1(n, x, lower, u, w);
    }
    else
    {
        error = fn2(n, x, lower, u, w);
    }
    if (error)
    {
        error = CINTqrys_schmidt(n, x, lower, u, w);
    }
    return error;
}

void CINTrys_roots(int nroots, double x, double *u, double *w)
{
    if (x <= SMALLX_LIMIT)
    {
        int off = nroots * (nroots - 1) / 2;
        int i;
        for (i = 0; i < nroots; i++)
        {
            u[i] = constants::POLY_SMALLX_R0[off + i] + constants::POLY_SMALLX_R1[off + i] * x;
            w[i] = constants::POLY_SMALLX_W0[off + i] + constants::POLY_SMALLX_W1[off + i] * x;
        }
        return;
    }
    else if (x >= 35 + nroots * 5)
    {
        int off = nroots * (nroots - 1) / 2;
        int i;
        double rt;
        double t = sqrt(PIE4 / x);
        for (i = 0; i < nroots; i++)
        {
            rt = constants::POLY_LARGEX_RT[off + i];
            u[i] = rt / (x - rt);
            w[i] = constants::POLY_LARGEX_WW[off + i] * t;
        }
        return;
    }

    int err;
    switch (nroots)
    {
    case 1:
        err = rys_root1(x, u, w);
        break;
    case 2:
        err = rys_root2(x, u, w);
        break;
    case 3:
        err = rys_root3(x, u, w);
        break;
    case 4:
        err = rys_root4(x, u, w);
        break;
    case 5:
        err = rys_root5(x, u, w);
        break;
    case 6:
    case 7:
        err = segment_solve(nroots, x, 0., u, w, 11, CINTrys_jacobi, CINTrys_schmidt);
        break;
    case 8:
        err = segment_solve(nroots, x, 0., u, w, 11, CINTrys_jacobi, CINTlrys_schmidt);
        break;
    case 9:
        err = segment_solve(nroots, x, 0., u, w, 10, CINTlrys_jacobi, CINTlrys_laguerre);
        break;
    case 10:
    case 11:
        err = segment_solve(nroots, x, 0., u, w, 18, CINTlrys_jacobi, CINTlrys_laguerre);
        break;
    case 12:
        err = segment_solve(nroots, x, 0., u, w, 22, CINTlrys_jacobi, CINTlrys_laguerre);
        break;
    default:
        err = segment_solve(nroots, x, 0., u, w, 50, CINTqrys_jacobi, CINTqrys_laguerre);
    }
    if (err)
    {
        std::cerr << "rys_roots fails: nroots=" << nroots << " x=" << x << "\n";
#ifndef KEEP_GOING
        exit(err);
#endif
    }
}

/*
 * lower is the lower bound of the sr integral
 */
static int segment_solve1(int n, double x, double lower, double *u, double *w,
                          double lower_bp1, double lower_bp2, double breakpoint,
                          QuadratureFunction fn1, QuadratureFunction fn2, QuadratureFunction fn3)
{
    int error;
    if (lower < lower_bp1)
    {
        if (x <= breakpoint)
        {
            error = fn1(n, x, lower, u, w);
        }
        else
        {
            error = fn2(n, x, lower, u, w);
        }
    }
    else if (lower < lower_bp2)
    {
        error = fn3(n, x, lower, u, w);
    }
    else
    {
        return 1;
    }
    if (error)
    {
        error = CINTqrys_schmidt(n, x, lower, u, w);
    }
    return error;
}

void CINTsr_rys_roots(int nroots, double x, double lower, double *u, double *w)
{
    int err = 1;
    switch (nroots)
    {
    case 1:
        err = CINTrys_schmidt(nroots, x, lower, u, w);
        break;
    case 2:
        if (lower < 0.99)
        {
            err = CINTrys_schmidt(nroots, x, lower, u, w);
        }
        else
        {
            err = CINTqrys_jacobi(nroots, x, lower, u, w);
        }
        break;
    case 3:
#ifdef WITH_POLYNOMIAL_FIT
        if (lower < 0.6)
        {
            err = CINTsr_rys_polyfits(nroots, x, lower, u, w);
            if (err == 0)
            {
                break;
                ;
            }
        }
#endif
        if (lower < 0.93)
        {
            err = CINTrys_schmidt(nroots, x, lower, u, w);
        }
        else if (lower < 0.97)
        {
            err = segment_solve(nroots, x, lower, u, w, 10, CINTlrys_jacobi, CINTlrys_laguerre);
        }
        else
        {
            err = CINTqrys_jacobi(nroots, x, lower, u, w);
        }
        break;
    case 4:
#ifdef WITH_POLYNOMIAL_FIT
        if (lower < 0.6)
        {
            err = CINTsr_rys_polyfits(nroots, x, lower, u, w);
            if (err == 0)
            {
                break;
                ;
            }
        }
#endif
        if (lower < 0.8)
        {
            err = CINTrys_schmidt(nroots, x, lower, u, w);
        }
        else if (lower < 0.9)
        {
            err = segment_solve(nroots, x, lower, u, w, 10, CINTlrys_jacobi, CINTlrys_laguerre);
        }
        else
        {
            err = CINTqrys_jacobi(nroots, x, lower, u, w);
        }
        break;
    case 5:
#ifdef WITH_POLYNOMIAL_FIT
        if (lower < 0.6)
        {
            err = CINTsr_rys_polyfits(nroots, x, lower, u, w);
            if (err == 0)
            {
                break;
                ;
            }
        }
#endif
        if (lower < 0.4)
        {
            err = segment_solve(nroots, x, lower, u, w, 50, CINTrys_schmidt, CINTlrys_laguerre);
        }
        else if (lower < 0.8)
        {
            err = segment_solve(nroots, x, lower, u, w, 10, CINTlrys_jacobi, CINTlrys_laguerre);
        }
        else
        {
            err = CINTqrys_jacobi(nroots, x, lower, u, w);
        }
        break;
    case 6:
        if (lower < 0.25)
        {
            err = segment_solve(nroots, x, lower, u, w, 60, CINTrys_schmidt, CINTlrys_laguerre);
        }
        else if (lower < 0.8)
        {
            err = segment_solve(nroots, x, lower, u, w, 10, CINTlrys_jacobi, CINTlrys_laguerre);
        }
        else
        {
            err = CINTqrys_jacobi(nroots, x, lower, u, w);
        }
        break;
    case 7:
        err = segment_solve1(nroots, x, lower, u, w, 0.5, 1., 60, CINTlrys_jacobi, CINTlrys_laguerre, CINTqrys_jacobi);
        break;
    case 8:
    case 9:
    case 10:
        // CINTqrys_jacobi(nroots, x, lower, u, w);
        err = segment_solve1(nroots, x, lower, u, w, 0.15, 1., 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 11:
    case 12:
        err = segment_solve1(nroots, x, lower, u, w, 0.15, 1., 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 13:
    case 14:
        err = segment_solve1(nroots, x, lower, u, w, 0.25, 1., 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 15:
    case 16:
        err = segment_solve1(nroots, x, lower, u, w, 0.25, 0.75, 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 17:
        segment_solve1(nroots, x, lower, u, w, 0.25, 0.65, 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 18:
        segment_solve1(nroots, x, lower, u, w, 0.15, 0.65, 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 19:
        err = segment_solve1(nroots, x, lower, u, w, 0.15, 0.55, 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 20:
    case 21:
        err = segment_solve1(nroots, x, lower, u, w, 0.25, 0.45, 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    case 22:
    case 23:
    case 24:
        err = segment_solve1(nroots, x, lower, u, w, 0.25, 0.35, 60, CINTqrys_jacobi, CINTqrys_laguerre, CINTqrys_jacobi);
        break;
    default:
        std::cerr << "libcint SR-rys_roots does not support nroots=" << nroots << "\n";
#ifndef KEEP_GOING
        exit(1);
#endif
    }
    if (err)
    {
        std::cerr << "sr_rys_roots fails: nroots=" << nroots << " x=" << x << " lower=" << lower << "\n";
#ifndef KEEP_GOING
        exit(err);
#endif
    }
}

int rys_root1(double X, double *roots, double *weights)
{
    double Y, F1;

    if (X > 33.)
    {
        weights[0] = sqrt(PIE4 / X);
        roots[0] = 0.5E+00 / (X - 0.5E+00);
        return 0;
    }
    else if (X < 3.e-7)
    {
        weights[0] = 1.0E+00 - X / 3.0E+00;
        roots[0] = 0.5E+00 - X / 5.0E+00;
        return 0;
    }

    double E = exp(-X);
    if (X > 15.)
    {
        Y = 1. / X;
        F1 = (((1.9623264149430E-01 * Y - 4.9695241464490E-01) * Y -
               6.0156581186481E-05) *
                  E +
              sqrt(PIE4 / X) - E) *
             Y;
        F1 *= .5;
    }
    else if (X > 10.)
    {
        Y = 1. / X;
        F1 = ((((-1.8784686463512E-01 * Y + 2.2991849164985E-01) * Y -
                4.9893752514047E-01) *
                   Y -
               2.1916512131607E-05) *
                  E +
              sqrt(PIE4 / X) - E) *
             Y;
        F1 *= .5;
    }
    else if (X > 5.)
    {
        Y = 1. / X;
        F1 = (((((((4.6897511375022E-01 * Y - 6.9955602298985E-01) * Y +
                   5.3689283271887E-01) *
                      Y -
                  3.2883030418398E-01) *
                     Y +
                 2.4645596956002E-01) *
                    Y -
                4.9984072848436E-01) *
                   Y -
               3.1501078774085E-06) *
                  E +
              sqrt(PIE4 / X) - E) *
             Y;
        F1 *= .5;
    }
    else if (X > 3.)
    {
        Y = X - 4.0E+00;
        F1 = ((((((((((-2.62453564772299E-11 * Y + 3.24031041623823E-10) * Y -
                      3.614965656163E-09) *
                         Y +
                     3.760256799971E-08) *
                        Y -
                    3.553558319675E-07) *
                       Y +
                   3.022556449731E-06) *
                      Y -
                  2.290098979647E-05) *
                     Y +
                 1.526537461148E-04) *
                    Y -
                8.81947375894379E-04) *
                   Y +
               4.33207949514611E-03) *
                  Y -
              1.75257821619926E-02) *
                 Y +
             5.28406320615584E-02;
    }
    else if (X > 1.)
    {
        Y = X - 2.0E+00;
        F1 = ((((((((((-1.61702782425558E-10 * Y + 1.96215250865776E-09) * Y -
                      2.14234468198419E-08) *
                         Y +
                     2.17216556336318E-07) *
                        Y -
                    1.98850171329371E-06) *
                       Y +
                   1.62429321438911E-05) *
                      Y -
                  1.16740298039895E-04) *
                     Y +
                 7.24888732052332E-04) *
                    Y -
                3.79490003707156E-03) *
                   Y +
               1.61723488664661E-02) *
                  Y -
              5.29428148329736E-02) *
                 Y +
             1.15702180856167E-01;
    }
    else
    {
        F1 = ((((((((-8.36313918003957E-08 * X + 1.21222603512827E-06) * X -
                    1.15662609053481E-05) *
                       X +
                   9.25197374512647E-05) *
                      X -
                  6.40994113129432E-04) *
                     X +
                 3.78787044215009E-03) *
                    X -
                1.85185172458485E-02) *
                   X +
               7.14285713298222E-02) *
                  X -
              1.99999999997023E-01) *
                 X +
             3.33333333333318E-01;
    }

    const double WW1 = 2. * X * F1 + E;
    weights[0] = WW1;
    roots[0] = F1 / (WW1 - F1);
    return 0;
}

int rys_root2(double X, double *roots, double *weights)
{

    constexpr double R12 = 2.75255128608411E-01, R22 = 2.72474487139158E+00, W22 = 9.17517095361369E-02;
    double RT1, RT2, WW1, WW2;
    double F1, E, Y;

    if (X < 3.e-7)
    {
        RT1 = 1.30693606237085E-01 - 2.90430236082028E-02 * X;
        RT2 = 2.86930639376291E+00 - 6.37623643058102E-01 * X;
        WW1 = 6.52145154862545E-01 - 1.22713621927067E-01 * X;
        WW2 = 3.47854845137453E-01 - 2.10619711404725E-01 * X;
    }
    else if (X < 1.)
    {
        F1 = ((((((((-8.36313918003957E-08 * X + 1.21222603512827E-06) * X -
                    1.15662609053481E-05) *
                       X +
                   9.25197374512647E-05) *
                      X -
                  6.40994113129432E-04) *
                     X +
                 3.78787044215009E-03) *
                    X -
                1.85185172458485E-02) *
                   X +
               7.14285713298222E-02) *
                  X -
              1.99999999997023E-01) *
                 X +
             3.33333333333318E-01;
        WW1 = (X + X) * F1 + exp(-X);
        RT1 = (((((((-2.35234358048491E-09 * X + 2.49173650389842E-08) * X -
                    4.558315364581E-08) *
                       X -
                   2.447252174587E-06) *
                      X +
                  4.743292959463E-05) *
                     X -
                 5.33184749432408E-04) *
                    X +
                4.44654947116579E-03) *
                   X -
               2.90430236084697E-02) *
                  X +
              1.30693606237085E-01;
        RT2 = (((((((-2.47404902329170E-08 * X + 2.36809910635906E-07) * X +
                    1.835367736310E-06) *
                       X -
                   2.066168802076E-05) *
                      X -
                  1.345693393936E-04) *
                     X -
                 5.88154362858038E-05) *
                    X +
                5.32735082098139E-02) *
                   X -
               6.37623643056745E-01) *
                  X +
              2.86930639376289E+00;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    }
    else if (X < 3.)
    {
        Y = X - 2.0E+00;
        F1 = ((((((((((-1.61702782425558E-10 * Y + 1.96215250865776E-09) * Y -
                      2.14234468198419E-08) *
                         Y +
                     2.17216556336318E-07) *
                        Y -
                    1.98850171329371E-06) *
                       Y +
                   1.62429321438911E-05) *
                      Y -
                  1.16740298039895E-04) *
                     Y +
                 7.24888732052332E-04) *
                    Y -
                3.79490003707156E-03) *
                   Y +
               1.61723488664661E-02) *
                  Y -
              5.29428148329736E-02) *
                 Y +
             1.15702180856167E-01;
        WW1 = (X + X) * F1 + exp(-X);
        RT1 = (((((((((-6.36859636616415E-12 * Y + 8.47417064776270E-11) * Y -
                      5.152207846962E-10) *
                         Y -
                     3.846389873308E-10) *
                        Y +
                    8.472253388380E-08) *
                       Y -
                   1.85306035634293E-06) *
                      Y +
                  2.47191693238413E-05) *
                     Y -
                 2.49018321709815E-04) *
                    Y +
                2.19173220020161E-03) *
                   Y -
               1.63329339286794E-02) *
                  Y +
              8.68085688285261E-02;
        RT2 = (((((((((1.45331350488343E-10 * Y + 2.07111465297976E-09) * Y -
                      1.878920917404E-08) *
                         Y -
                     1.725838516261E-07) *
                        Y +
                    2.247389642339E-06) *
                       Y +
                   9.76783813082564E-06) *
                      Y -
                  1.93160765581969E-04) *
                     Y -
                 1.58064140671893E-03) *
                    Y +
                4.85928174507904E-02) *
                   Y -
               4.30761584997596E-01) *
                  Y +
              1.80400974537950E+00;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    }
    else if (X < 5.)
    {
        Y = X - 4.0E+00;
        F1 = ((((((((((-2.62453564772299E-11 * Y + 3.24031041623823E-10) * Y -
                      3.614965656163E-09) *
                         Y +
                     3.760256799971E-08) *
                        Y -
                    3.553558319675E-07) *
                       Y +
                   3.022556449731E-06) *
                      Y -
                  2.290098979647E-05) *
                     Y +
                 1.526537461148E-04) *
                    Y -
                8.81947375894379E-04) *
                   Y +
               4.33207949514611E-03) *
                  Y -
              1.75257821619926E-02) *
                 Y +
             5.28406320615584E-02;
        WW1 = (X + X) * F1 + exp(-X);
        RT1 = ((((((((-4.11560117487296E-12 * Y + 7.10910223886747E-11) * Y -
                     1.73508862390291E-09) *
                        Y +
                    5.93066856324744E-08) *
                       Y -
                   9.76085576741771E-07) *
                      Y +
                  1.08484384385679E-05) *
                     Y -
                 1.12608004981982E-04) *
                    Y +
                1.16210907653515E-03) *
                   Y -
               9.89572595720351E-03) *
                  Y +
              6.12589701086408E-02;
        RT2 = (((((((((-1.80555625241001E-10 * Y + 5.44072475994123E-10) * Y +
                      1.603498045240E-08) *
                         Y -
                     1.497986283037E-07) *
                        Y -
                    7.017002532106E-07) *
                       Y +
                   1.85882653064034E-05) *
                      Y -
                  2.04685420150802E-05) *
                     Y -
                 2.49327728643089E-03) *
                    Y +
                3.56550690684281E-02) *
                   Y -
               2.60417417692375E-01) *
                  Y +
              1.12155283108289E+00;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    }
    else if (X < 10)
    {
        E = exp(-X);
        WW1 = ((((((4.6897511375022E-01 / X - 6.9955602298985E-01) / X +
                   5.3689283271887E-01) /
                      X -
                  3.2883030418398E-01) /
                     X +
                 2.4645596956002E-01) /
                    X -
                4.9984072848436E-01) /
                   X -
               3.1501078774085E-06) *
                  E +
              sqrt(PIE4 / X);
        F1 = (WW1 - E) / (X + X);
        Y = X - 7.5E+00;
        RT1 = (((((((((((((-1.43632730148572E-16 * Y + 2.38198922570405E-16) *
                              Y +
                          1.358319618800E-14) *
                             Y -
                         7.064522786879E-14) *
                            Y -
                        7.719300212748E-13) *
                           Y +
                       7.802544789997E-12) *
                          Y +
                      6.628721099436E-11) *
                         Y -
                     1.775564159743E-09) *
                        Y +
                    1.713828823990E-08) *
                       Y -
                   1.497500187053E-07) *
                      Y +
                  2.283485114279E-06) *
                     Y -
                 3.76953869614706E-05) *
                    Y +
                4.74791204651451E-04) *
                   Y -
               4.60448960876139E-03) *
                  Y +
              3.72458587837249E-02;
        RT2 = ((((((((((((2.48791622798900E-14 * Y - 1.36113510175724E-13) * Y -
                         2.224334349799E-12) *
                            Y +
                        4.190559455515E-11) *
                           Y -
                       2.222722579924E-10) *
                          Y -
                      2.624183464275E-09) *
                         Y +
                     6.128153450169E-08) *
                        Y -
                    4.383376014528E-07) *
                       Y -
                   2.49952200232910E-06) *
                      Y +
                  1.03236647888320E-04) *
                     Y -
                 1.44614664924989E-03) *
                    Y +
                1.35094294917224E-02) *
                   Y -
               9.53478510453887E-02) *
                  Y +
              5.44765245686790E-01;
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    }
    else if (X < 15)
    {
        E = exp(-X);
        WW1 = (((-1.8784686463512E-01 / X + 2.2991849164985E-01) / X -
                4.9893752514047E-01) /
                   X -
               2.1916512131607E-05) *
                  E +
              sqrt(PIE4 / X);
        F1 = (WW1 - E) / (X + X);
        RT1 = ((((-1.01041157064226E-05 * X + 1.19483054115173E-03) * X -
                 6.73760231824074E-02) *
                    X +
                1.25705571069895E+00) *
                   X +
               (((-8.57609422987199E+03 / X + 5.91005939591842E+03) / X -
                 1.70807677109425E+03) /
                    X +
                2.64536689959503E+02) /
                   X -
               2.38570496490846E+01) *
                  E +
              R12 / (X - R12);
        RT2 = (((3.39024225137123E-04 * X - 9.34976436343509E-02) * X -
                4.22216483306320E+00) *
                   X +
               (((-2.08457050986847E+03 / X -
                  1.04999071905664E+03) /
                     X +
                 3.39891508992661E+02) /
                    X -
                1.56184800325063E+02) /
                   X +
               8.00839033297501E+00) *
                  E +
              R22 / (X - R22);
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    }
    else if (X < 33)
    {
        E = exp(-X);
        WW1 = ((1.9623264149430E-01 / X - 4.9695241464490E-01) / X -
               6.0156581186481E-05) *
                  E +
              sqrt(PIE4 / X);
        F1 = (WW1 - E) / (X + X);
        RT1 = ((((-1.14906395546354E-06 * X + 1.76003409708332E-04) * X -
                 1.71984023644904E-02) *
                    X -
                1.37292644149838E-01) *
                   X +
               (-4.75742064274859E+01 / X + 9.21005186542857E+00) / X -
               2.31080873898939E-02) *
                  E +
              R12 / (X - R12);
        RT2 = (((3.64921633404158E-04 * X - 9.71850973831558E-02) * X -
                4.02886174850252E+00) *
                   X +
               (-1.35831002139173E+02 / X -
                8.66891724287962E+01) /
                   X +
               2.98011277766958E+00) *
                  E +
              R22 / (X - R22);
        WW2 = ((F1 - WW1) * RT1 + F1) * (1.0E+00 + RT2) / (RT2 - RT1);
        WW1 = WW1 - WW2;
    }
    else if (X < 40)
    {
        WW1 = sqrt(PIE4 / X);
        E = exp(-X);
        RT1 = (-8.78947307498880E-01 * X + 1.09243702330261E+01) * E + R12 / (X - R12);
        RT2 = (-9.28903924275977E+00 * X + 8.10642367843811E+01) * E + R22 / (X - R22);
        WW2 = (4.46857389308400E+00 * X - 7.79250653461045E+01) * E + W22 * WW1;
        WW1 = WW1 - WW2;
    }
    else
    {
        WW1 = sqrt(PIE4 / X);
        RT1 = R12 / (X - R12);
        RT2 = R22 / (X - R22);
        WW2 = W22 * WW1;
        WW1 = WW1 - WW2;
    }
    roots[0] = RT1;
    roots[1] = RT2;
    weights[0] = WW1;
    weights[1] = WW2;
    return 0;
}

int rys_root3(double X, double *roots, double *weights)
{

    constexpr double R13 = 1.90163509193487E-01, R23 = 1.78449274854325E+00, W23 = 1.77231492083829E-01, R33 = 5.52534374226326E+00, W33 = 5.11156880411248E-03;
    double RT1, RT2, RT3, WW1, WW2, WW3;
    double F1, F2, E, T1, T2, T3, A1, A2, Y;

    if (X < 3.e-7)
    {
        RT1 = 6.03769246832797E-02 - 9.28875764357368E-03 * X;
        RT2 = 7.76823355931043E-01 - 1.19511285527878E-01 * X;
        RT3 = 6.66279971938567E+00 - 1.02504611068957E+00 * X;
        WW1 = 4.67913934572691E-01 - 5.64876917232519E-02 * X;
        WW2 = 3.60761573048137E-01 - 1.49077186455208E-01 * X;
        WW3 = 1.71324492379169E-01 - 1.27768455150979E-01 * X;
    }
    else if (X < 1.)
    {
        RT1 = ((((((-5.10186691538870E-10 * X + 2.40134415703450E-08) * X -
                   5.01081057744427E-07) *
                      X +
                  7.58291285499256E-06) *
                     X -
                 9.55085533670919E-05) *
                    X +
                1.02893039315878E-03) *
                   X -
               9.28875764374337E-03) *
                  X +
              6.03769246832810E-02;
        RT2 = ((((((-1.29646524960555E-08 * X + 7.74602292865683E-08) * X +
                   1.56022811158727E-06) *
                      X -
                  1.58051990661661E-05) *
                     X -
                 3.30447806384059E-04) *
                    X +
                9.74266885190267E-03) *
                   X -
               1.19511285526388E-01) *
                  X +
              7.76823355931033E-01;
        RT3 = ((((((-9.28536484109606E-09 * X - 3.02786290067014E-07) * X -
                   2.50734477064200E-06) *
                      X -
                  7.32728109752881E-06) *
                     X +
                 2.44217481700129E-04) *
                    X +
                4.94758452357327E-02) *
                   X -
               1.02504611065774E+00) *
                  X +
              6.66279971938553E+00;
        F2 = ((((((((-7.60911486098850E-08 * X + 1.09552870123182E-06) * X -
                    1.03463270693454E-05) *
                       X +
                   8.16324851790106E-05) *
                      X -
                  5.55526624875562E-04) *
                     X +
                 3.20512054753924E-03) *
                    X -
                1.51515139838540E-02) *
                   X +
               5.55555554649585E-02) *
                  X -
              1.42857142854412E-01) *
                 X +
             1.99999999999986E-01;
        E = exp(-X);
        F1 = ((X + X) * F2 + E) / 3.0E+00;
        WW1 = (X + X) * F1 + E;
        T1 = RT1 / (RT1 + 1.0E+00);
        T2 = RT2 / (RT2 + 1.0E+00);
        T3 = RT3 / (RT3 + 1.0E+00);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    }
    else if (X < 3.)
    {
        Y = X - 2.0E+00;
        RT1 = ((((((((1.44687969563318E-12 * Y + 4.85300143926755E-12) * Y -
                     6.55098264095516E-10) *
                        Y +
                    1.56592951656828E-08) *
                       Y -
                   2.60122498274734E-07) *
                      Y +
                  3.86118485517386E-06) *
                     Y -
                 5.13430986707889E-05) *
                    Y +
                6.03194524398109E-04) *
                   Y -
               6.11219349825090E-03) *
                  Y +
              4.52578254679079E-02;
        RT2 = (((((((6.95964248788138E-10 * Y - 5.35281831445517E-09) * Y -
                    6.745205954533E-08) *
                       Y +
                   1.502366784525E-06) *
                      Y +
                  9.923326947376E-07) *
                     Y -
                 3.89147469249594E-04) *
                    Y +
                7.51549330892401E-03) *
                   Y -
               8.48778120363400E-02) *
                  Y +
              5.73928229597613E-01;
        RT3 = ((((((((-2.81496588401439E-10 * Y + 3.61058041895031E-09) * Y +
                     4.53631789436255E-08) *
                        Y -
                    1.40971837780847E-07) *
                       Y -
                   6.05865557561067E-06) *
                      Y -
                  5.15964042227127E-05) *
                     Y +
                 3.34761560498171E-05) *
                    Y +
                5.04871005319119E-02) *
                   Y -
               8.24708946991557E-01) *
                  Y +
              4.81234667357205E+00;
        F2 = ((((((((((-1.48044231072140E-10 * Y + 1.78157031325097E-09) * Y -
                      1.92514145088973E-08) *
                         Y +
                     1.92804632038796E-07) *
                        Y -
                    1.73806555021045E-06) *
                       Y +
                   1.39195169625425E-05) *
                      Y -
                  9.74574633246452E-05) *
                     Y +
                 5.83701488646511E-04) *
                    Y -
                2.89955494844975E-03) *
                   Y +
               1.13847001113810E-02) *
                  Y -
              3.23446977320647E-02) *
                 Y +
             5.29428148329709E-02;
        E = exp(-X);
        F1 = ((X + X) * F2 + E) / 3.0E+00;
        WW1 = (X + X) * F1 + E;
        T1 = RT1 / (RT1 + 1.0E+00);
        T2 = RT2 / (RT2 + 1.0E+00);
        T3 = RT3 / (RT3 + 1.0E+00);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    }
    else if (X < 5.)
    {
        Y = X - 4.0E+00;
        RT1 = (((((((1.44265709189601E-11 * Y - 4.66622033006074E-10) * Y +
                    7.649155832025E-09) *
                       Y -
                   1.229940017368E-07) *
                      Y +
                  2.026002142457E-06) *
                     Y -
                 2.87048671521677E-05) *
                    Y +
                3.70326938096287E-04) *
                   Y -
               4.21006346373634E-03) *
                  Y +
              3.50898470729044E-02;
        RT2 = ((((((((-2.65526039155651E-11 * Y + 1.97549041402552E-10) * Y +
                     2.15971131403034E-09) *
                        Y -
                    7.95045680685193E-08) *
                       Y +
                   5.15021914287057E-07) *
                      Y +
                  1.11788717230514E-05) *
                     Y -
                 3.33739312603632E-04) *
                    Y +
                5.30601428208358E-03) *
                   Y -
               5.93483267268959E-02) *
                  Y +
              4.31180523260239E-01;
        RT3 = ((((((((-3.92833750584041E-10 * Y - 4.16423229782280E-09) * Y +
                     4.42413039572867E-08) *
                        Y +
                    6.40574545989551E-07) *
                       Y -
                   3.05512456576552E-06) *
                      Y -
                  1.05296443527943E-04) *
                     Y -
                 6.14120969315617E-04) *
                    Y +
                4.89665802767005E-02) *
                   Y -
               6.24498381002855E-01) *
                  Y +
              3.36412312243724E+00;
        F2 = ((((((((((-2.36788772599074E-11 * Y + 2.89147476459092E-10) * Y -
                      3.18111322308846E-09) *
                         Y +
                     3.25336816562485E-08) *
                        Y -
                    3.00873821471489E-07) *
                       Y +
                   2.48749160874431E-06) *
                      Y -
                  1.81353179793672E-05) *
                     Y +
                 1.14504948737066E-04) *
                    Y -
                6.10614987696677E-04) *
                   Y +
               2.64584212770942E-03) *
                  Y -
              8.66415899015349E-03) *
                 Y +
             1.75257821619922E-02;
        E = exp(-X);
        F1 = ((X + X) * F2 + E) / 3.0E+00;
        WW1 = (X + X) * F1 + E;
        T1 = RT1 / (RT1 + 1.0E+00);
        T2 = RT2 / (RT2 + 1.0E+00);
        T3 = RT3 / (RT3 + 1.0E+00);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    }
    else if (X < 10)
    {
        E = exp(-X);
        WW1 = ((((((4.6897511375022E-01 / X - 6.9955602298985E-01) / X +
                   5.3689283271887E-01) /
                      X -
                  3.2883030418398E-01) /
                     X +
                 2.4645596956002E-01) /
                    X -
                4.9984072848436E-01) /
                   X -
               3.1501078774085E-06) *
                  E +
              sqrt(PIE4 / X);
        F1 = (WW1 - E) / (X + X);
        F2 = (F1 + F1 + F1 - E) / (X + X);
        Y = X - 7.5E+00;
        RT1 = (((((((((((5.74429401360115E-16 * Y + 7.11884203790984E-16) * Y -
                        6.736701449826E-14) *
                           Y -
                       6.264613873998E-13) *
                          Y +
                      1.315418927040E-11) *
                         Y -
                     4.23879635610964E-11) *
                        Y +
                    1.39032379769474E-09) *
                       Y -
                   4.65449552856856E-08) *
                      Y +
                  7.34609900170759E-07) *
                     Y -
                 1.08656008854077E-05) *
                    Y +
                1.77930381549953E-04) *
                   Y -
               2.39864911618015E-03) *
                  Y +
              2.39112249488821E-02;
        RT2 = (((((((((((1.13464096209120E-14 * Y + 6.99375313934242E-15) * Y -
                        8.595618132088E-13) *
                           Y -
                       5.293620408757E-12) *
                          Y -
                      2.492175211635E-11) *
                         Y +
                     2.73681574882729E-09) *
                        Y -
                    1.06656985608482E-08) *
                       Y -
                   4.40252529648056E-07) *
                      Y +
                  9.68100917793911E-06) *
                     Y -
                 1.68211091755327E-04) *
                    Y +
                2.69443611274173E-03) *
                   Y -
               3.23845035189063E-02) *
                  Y +
              2.75969447451882E-01;
        RT3 = ((((((((((((6.66339416996191E-15 * Y + 1.84955640200794E-13) * Y -
                         1.985141104444E-12) *
                            Y -
                        2.309293727603E-11) *
                           Y +
                       3.917984522103E-10) *
                          Y +
                      1.663165279876E-09) *
                         Y -
                     6.205591993923E-08) *
                        Y +
                    8.769581622041E-09) *
                       Y +
                   8.97224398620038E-06) *
                      Y -
                  3.14232666170796E-05) *
                     Y -
                 1.83917335649633E-03) *
                    Y +
                3.51246831672571E-02) *
                   Y -
               3.22335051270860E-01) *
                  Y +
              1.73582831755430E+00;
        T1 = RT1 / (RT1 + 1.0E+00);
        T2 = RT2 / (RT2 + 1.0E+00);
        T3 = RT3 / (RT3 + 1.0E+00);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    }
    else if (X < 15)
    {
        E = exp(-X);
        WW1 = (((-1.8784686463512E-01 / X + 2.2991849164985E-01) / X -
                4.9893752514047E-01) /
                   X -
               2.1916512131607E-05) *
                  E +
              sqrt(PIE4 / X);
        F1 = (WW1 - E) / (X + X);
        F2 = (F1 + F1 + F1 - E) / (X + X);
        Y = X - 12.5E+00;
        RT1 = (((((((((((4.42133001283090E-16 * Y - 2.77189767070441E-15) * Y -
                        4.084026087887E-14) *
                           Y +
                       5.379885121517E-13) *
                          Y +
                      1.882093066702E-12) *
                         Y -
                     8.67286219861085E-11) *
                        Y +
                    7.11372337079797E-10) *
                       Y -
                   3.55578027040563E-09) *
                      Y +
                  1.29454702851936E-07) *
                     Y -
                 4.14222202791434E-06) *
                    Y +
                8.04427643593792E-05) *
                   Y -
               1.18587782909876E-03) *
                  Y +
              1.53435577063174E-02;
        RT2 = (((((((((((6.85146742119357E-15 * Y - 1.08257654410279E-14) * Y -
                        8.579165965128E-13) *
                           Y +
                       6.642452485783E-12) *
                          Y +
                      4.798806828724E-11) *
                         Y -
                     1.13413908163831E-09) *
                        Y +
                    7.08558457182751E-09) *
                       Y -
                   5.59678576054633E-08) *
                      Y +
                  2.51020389884249E-06) *
                     Y -
                 6.63678914608681E-05) *
                    Y +
                1.11888323089714E-03) *
                   Y -
               1.45361636398178E-02) *
                  Y +
              1.65077877454402E-01;
        RT3 = ((((((((((((3.20622388697743E-15 * Y - 2.73458804864628E-14) * Y -
                         3.157134329361E-13) *
                            Y +
                        8.654129268056E-12) *
                           Y -
                       5.625235879301E-11) *
                          Y -
                      7.718080513708E-10) *
                         Y +
                     2.064664199164E-08) *
                        Y -
                    1.567725007761E-07) *
                       Y -
                   1.57938204115055E-06) *
                      Y +
                  6.27436306915967E-05) *
                     Y -
                 1.01308723606946E-03) *
                    Y +
                1.13901881430697E-02) *
                   Y -
               1.01449652899450E-01) *
                  Y +
              7.77203937334739E-01;
        T1 = RT1 / (RT1 + 1.0E+00);
        T2 = RT2 / (RT2 + 1.0E+00);
        T3 = RT3 / (RT3 + 1.0E+00);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    }
    else if (X < 33)
    {
        E = exp(-X);
        WW1 = ((1.9623264149430E-01 / X - 4.9695241464490E-01) / X -
               6.0156581186481E-05) *
                  E +
              sqrt(PIE4 / X);
        F1 = (WW1 - E) / (X + X);
        F2 = (F1 + F1 + F1 - E) / (X + X);
        if (X < 20)
        {
            RT1 = ((((((-2.43270989903742E-06 * X + 3.57901398988359E-04) * X -
                       2.34112415981143E-02) *
                          X +
                      7.81425144913975E-01) *
                         X -
                     1.73209218219175E+01) *
                        X +
                    2.43517435690398E+02) *
                       X +
                   (-1.97611541576986E+04 / X + 9.82441363463929E+03) / X -
                   2.07970687843258E+03) *
                      E +
                  R13 / (X - R13);
            RT2 = (((((-2.62627010965435E-04 * X + 3.49187925428138E-02) * X -
                      3.09337618731880E+00) *
                         X +
                     1.07037141010778E+02) *
                        X -
                    2.36659637247087E+03) *
                       X +
                   ((-2.91669113681020E+06 / X +
                     1.41129505262758E+06) /
                        X -
                    2.91532335433779E+05) /
                       X +
                   3.35202872835409E+04) *
                      E +
                  R23 / (X - R23);
            RT3 = (((((9.31856404738601E-05 * X - 2.87029400759565E-02) * X -
                      7.83503697918455E-01) *
                         X -
                     1.84338896480695E+01) *
                        X +
                    4.04996712650414E+02) *
                       X +
                   (-1.89829509315154E+05 / X +
                    5.11498390849158E+04) /
                       X -
                   6.88145821789955E+03) *
                      E +
                  R33 / (X - R33);
        }
        else
        {
            RT1 = ((((-4.97561537069643E-04 * X - 5.00929599665316E-02) * X +
                     1.31099142238996E+00) *
                        X -
                    1.88336409225481E+01) *
                       X -
                   6.60344754467191E+02 / X + 1.64931462413877E+02) *
                      E +
                  R13 / (X - R13);
            RT2 = ((((-4.48218898474906E-03 * X - 5.17373211334924E-01) * X +
                     1.13691058739678E+01) *
                        X -
                    1.65426392885291E+02) *
                       X -
                   6.30909125686731E+03 / X + 1.52231757709236E+03) *
                      E +
                  R23 / (X - R23);
            RT3 = ((((-1.38368602394293E-02 * X - 1.77293428863008E+00) * X +
                     1.73639054044562E+01) *
                        X -
                    3.57615122086961E+02) *
                       X -
                   1.45734701095912E+04 / X + 2.69831813951849E+03) *
                      E +
                  R33 / (X - R33);
        }
        T1 = RT1 / (RT1 + 1.0E+00);
        T2 = RT2 / (RT2 + 1.0E+00);
        T3 = RT3 / (RT3 + 1.0E+00);
        A2 = F2 - T1 * F1;
        A1 = F1 - T1 * WW1;
        WW3 = (A2 - T2 * A1) / ((T3 - T2) * (T3 - T1));
        WW2 = (T3 * A1 - A2) / ((T3 - T2) * (T2 - T1));
        WW1 = WW1 - WW2 - WW3;
    }
    else if (X < 47)
    {
        WW1 = sqrt(PIE4 / X);
        E = exp(-X);
        RT1 = ((-7.39058467995275E+00 * X + 3.21318352526305E+02) * X -
               3.99433696473658E+03) *
                  E +
              R13 / (X - R13);
        RT2 = ((-7.38726243906513E+01 * X + 3.13569966333873E+03) * X -
               3.86862867311321E+04) *
                  E +
              R23 / (X - R23);
        RT3 = ((-2.63750565461336E+02 * X + 1.04412168692352E+04) * X -
               1.28094577915394E+05) *
                  E +
              R33 / (X - R33);
        WW3 = (((1.52258947224714E-01 * X - 8.30661900042651E+00) * X +
                1.92977367967984E+02) *
                   X -
               1.67787926005344E+03) *
                  E +
              W33 * WW1;
        WW2 = ((6.15072615497811E+01 * X - 2.91980647450269E+03) * X +
               3.80794303087338E+04) *
                  E +
              W23 * WW1;
        WW1 = WW1 - WW2 - WW3;
    }
    else
    {
        WW1 = sqrt(PIE4 / X);
        RT1 = R13 / (X - R13);
        RT2 = R23 / (X - R23);
        RT3 = R33 / (X - R33);
        WW2 = W23 * WW1;
        WW3 = W33 * WW1;
        WW1 = WW1 - WW2 - WW3;
    }
    roots[0] = RT1;
    roots[1] = RT2;
    roots[2] = RT3;
    weights[0] = WW1;
    weights[1] = WW2;
    weights[2] = WW3;
    return 0;
}

int rys_root4(double X, double *roots, double *weights)
{
    constexpr double R14 = 1.45303521503316E-01, R24 = 1.33909728812636E+00, W24 = 2.34479815323517E-01, R34 = 3.92696350135829E+00, W34 = 1.92704402415764E-02, R44 = 8.58863568901199E+00, W44 = 2.25229076750736E-04;
    double RT1, RT2, RT3, RT4, WW1, WW2, WW3, WW4;
    double Y, E;

    if (X <= 3.0E-7)
    {
        RT1 = 3.48198973061471E-02 - 4.09645850660395E-03 * X;
        RT2 = 3.81567185080042E-01 - 4.48902570656719E-02 * X;
        RT3 = 1.73730726945891E+00 - 2.04389090547327E-01 * X;
        RT4 = 1.18463056481549E+01 - 1.39368301742312E+00 * X;
        WW1 = 3.62683783378362E-01 - 3.13844305713928E-02 * X;
        WW2 = 3.13706645877886E-01 - 8.98046242557724E-02 * X;
        WW3 = 2.22381034453372E-01 - 1.29314370958973E-01 * X;
        WW4 = 1.01228536290376E-01 - 8.28299075414321E-02 * X;
    }
    else if (X <= 1.0)
    {
        RT1 = ((((((-1.95309614628539E-10 * X + 5.19765728707592E-09) * X -
                   1.01756452250573E-07) *
                      X +
                  1.72365935872131E-06) *
                     X -
                 2.61203523522184E-05) *
                    X +
                3.52921308769880E-04) *
                   X -
               4.09645850658433E-03) *
                  X +
              3.48198973061469E-02;
        RT2 = (((((-1.89554881382342E-08 * X + 3.07583114342365E-07) * X +
                  1.270981734393E-06) *
                     X -
                 1.417298563884E-04) *
                    X +
                3.226979163176E-03) *
                   X -
               4.48902570678178E-02) *
                  X +
              3.81567185080039E-01;
        RT3 = ((((((1.77280535300416E-09 * X + 3.36524958870615E-08) * X -
                   2.58341529013893E-07) *
                      X -
                  1.13644895662320E-05) *
                     X -
                 7.91549618884063E-05) *
                    X +
                1.03825827346828E-02) *
                   X -
               2.04389090525137E-01) *
                  X +
              1.73730726945889E+00;
        RT4 = (((((-5.61188882415248E-08 * X - 2.49480733072460E-07) * X +
                  3.428685057114E-06) *
                     X +
                 1.679007454539E-04) *
                    X +
                4.722855585715E-02) *
                   X -
               1.39368301737828E+00) *
                  X +
              1.18463056481543E+01;
        WW1 = ((((((-1.14649303201279E-08 * X + 1.88015570196787E-07) * X -
                   2.33305875372323E-06) *
                      X +
                  2.68880044371597E-05) *
                     X -
                 2.94268428977387E-04) *
                    X +
                3.06548909776613E-03) *
                   X -
               3.13844305680096E-02) *
                  X +
              3.62683783378335E-01;
        WW2 = ((((((((-4.11720483772634E-09 * X + 6.54963481852134E-08) * X -
                     7.20045285129626E-07) *
                        X +
                    6.93779646721723E-06) *
                       X -
                   6.05367572016373E-05) *
                      X +
                  4.74241566251899E-04) *
                     X -
                 3.26956188125316E-03) *
                    X +
                1.91883866626681E-02) *
                   X -
               8.98046242565811E-02) *
                  X +
              3.13706645877886E-01;
        WW3 = ((((((((-3.41688436990215E-08 * X + 5.07238960340773E-07) * X -
                     5.01675628408220E-06) *
                        X +
                    4.20363420922845E-05) *
                       X -
                   3.08040221166823E-04) *
                      X +
                  1.94431864731239E-03) *
                     X -
                 1.02477820460278E-02) *
                    X +
                4.28670143840073E-02) *
                   X -
               1.29314370962569E-01) *
                  X +
              2.22381034453369E-01;
        WW4 = (((((((((4.99660550769508E-09 * X - 7.94585963310120E-08) * X +
                      8.359072409485E-07) *
                         X -
                     7.422369210610E-06) *
                        X +
                    5.763374308160E-05) *
                       X -
                   3.86645606718233E-04) *
                      X +
                  2.18417516259781E-03) *
                     X -
                 9.99791027771119E-03) *
                    X +
                3.48791097377370E-02) *
                   X -
               8.28299075413889E-02) *
                  X +
              1.01228536290376E-01;
    }
    else if (X <= 5)
    {
        Y = X - 3.0E+00;
        RT1 = (((((((((-1.48570633747284E-15 * Y - 1.33273068108777E-13) * Y +
                      4.068543696670E-12) *
                         Y -
                     9.163164161821E-11) *
                        Y +
                    2.046819017845E-09) *
                       Y -
                   4.03076426299031E-08) *
                      Y +
                  7.29407420660149E-07) *
                     Y -
                 1.23118059980833E-05) *
                    Y +
                1.88796581246938E-04) *
                   Y -
               2.53262912046853E-03) *
                  Y +
              2.51198234505021E-02;
        RT2 = (((((((((1.35830583483312E-13 * Y - 2.29772605964836E-12) * Y -
                      3.821500128045E-12) *
                         Y +
                     6.844424214735E-10) *
                        Y -
                    1.048063352259E-08) *
                       Y +
                   1.50083186233363E-08) *
                      Y +
                  3.48848942324454E-06) *
                     Y -
                 1.08694174399193E-04) *
                    Y +
                2.08048885251999E-03) *
                   Y -
               2.91205805373793E-02) *
                  Y +
              2.72276489515713E-01;
        RT3 = (((((((((5.02799392850289E-13 * Y + 1.07461812944084E-11) * Y -
                      1.482277886411E-10) *
                         Y -
                     2.153585661215E-09) *
                        Y +
                    3.654087802817E-08) *
                       Y +
                   5.15929575830120E-07) *
                      Y -
                  9.52388379435709E-06) *
                     Y -
                 2.16552440036426E-04) *
                    Y +
                9.03551469568320E-03) *
                   Y -
               1.45505469175613E-01) *
                  Y +
              1.21449092319186E+00;
        RT4 = (((((((((-1.08510370291979E-12 * Y + 6.41492397277798E-11) * Y +
                      7.542387436125E-10) *
                         Y -
                     2.213111836647E-09) *
                        Y -
                    1.448228963549E-07) *
                       Y -
                   1.95670833237101E-06) *
                      Y -
                  1.07481314670844E-05) *
                     Y +
                 1.49335941252765E-04) *
                    Y +
                4.87791531990593E-02) *
                   Y -
               1.10559909038653E+00) *
                  Y +
              8.09502028611780E+00;
        WW1 = ((((((((((-4.65801912689961E-14 * Y + 7.58669507106800E-13) * Y -
                       1.186387548048E-11) *
                          Y +
                      1.862334710665E-10) *
                         Y -
                     2.799399389539E-09) *
                        Y +
                    4.148972684255E-08) *
                       Y -
                   5.933568079600E-07) *
                      Y +
                  8.168349266115E-06) *
                     Y -
                 1.08989176177409E-04) *
                    Y +
                1.41357961729531E-03) *
                   Y -
               1.87588361833659E-02) *
                  Y +
              2.89898651436026E-01;
        WW2 = ((((((((((((-1.46345073267549E-14 * Y + 2.25644205432182E-13) * Y -
                         3.116258693847E-12) *
                            Y +
                        4.321908756610E-11) *
                           Y -
                       5.673270062669E-10) *
                          Y +
                      7.006295962960E-09) *
                         Y -
                     8.120186517000E-08) *
                        Y +
                    8.775294645770E-07) *
                       Y -
                   8.77829235749024E-06) *
                      Y +
                  8.04372147732379E-05) *
                     Y -
                 6.64149238804153E-04) *
                    Y +
                4.81181506827225E-03) *
                   Y -
               2.88982669486183E-02) *
                  Y +
              1.56247249979288E-01;
        WW3 = (((((((((((((9.06812118895365E-15 * Y - 1.40541322766087E-13) *
                              Y +
                          1.919270015269E-12) *
                             Y -
                         2.605135739010E-11) *
                            Y +
                        3.299685839012E-10) *
                           Y -
                       3.86354139348735E-09) *
                          Y +
                      4.16265847927498E-08) *
                         Y -
                     4.09462835471470E-07) *
                        Y +
                    3.64018881086111E-06) *
                       Y -
                   2.88665153269386E-05) *
                      Y +
                  2.00515819789028E-04) *
                     Y -
                 1.18791896897934E-03) *
                    Y +
                5.75223633388589E-03) *
                   Y -
               2.09400418772687E-02) *
                  Y +
              4.85368861938873E-02;
        WW4 = ((((((((((((((-9.74835552342257E-16 * Y + 1.57857099317175E-14) *
                               Y -
                           2.249993780112E-13) *
                              Y +
                          3.173422008953E-12) *
                             Y -
                         4.161159459680E-11) *
                            Y +
                        5.021343560166E-10) *
                           Y -
                       5.545047534808E-09) *
                          Y +
                      5.554146993491E-08) *
                         Y -
                     4.99048696190133E-07) *
                        Y +
                    3.96650392371311E-06) *
                       Y -
                   2.73816413291214E-05) *
                      Y +
                  1.60106988333186E-04) *
                     Y -
                 7.64560567879592E-04) *
                    Y +
                2.81330044426892E-03) *
                   Y -
               7.16227030134947E-03) *
                  Y +
              9.66077262223353E-03;
    }
    else if (X <= 10.0)
    {
        Y = X - 7.5E+00;
        RT1 = (((((((((4.64217329776215E-15 * Y - 6.27892383644164E-15) * Y +
                      3.462236347446E-13) *
                         Y -
                     2.927229355350E-11) *
                        Y +
                    5.090355371676E-10) *
                       Y -
                   9.97272656345253E-09) *
                      Y +
                  2.37835295639281E-07) *
                     Y -
                 4.60301761310921E-06) *
                    Y +
                8.42824204233222E-05) *
                   Y -
               1.37983082233081E-03) *
                  Y +
              1.66630865869375E-02;
        RT2 = (((((((((2.93981127919047E-14 * Y + 8.47635639065744E-13) * Y -
                      1.446314544774E-11) *
                         Y -
                     6.149155555753E-12) *
                        Y +
                    8.484275604612E-10) *
                       Y -
                   6.10898827887652E-08) *
                      Y +
                  2.39156093611106E-06) *
                     Y -
                 5.35837089462592E-05) *
                    Y +
                1.00967602595557E-03) *
                   Y -
               1.57769317127372E-02) *
                  Y +
              1.74853819464285E-01;
        RT3 = ((((((((((2.93523563363000E-14 * Y - 6.40041776667020E-14) * Y -
                       2.695740446312E-12) *
                          Y +
                      1.027082960169E-10) *
                         Y -
                     5.822038656780E-10) *
                        Y -
                    3.159991002539E-08) *
                       Y +
                   4.327249251331E-07) *
                      Y +
                  4.856768455119E-06) *
                     Y -
                 2.54617989427762E-04) *
                    Y +
                5.54843378106589E-03) *
                   Y -
               7.95013029486684E-02) *
                  Y +
              7.20206142703162E-01;
        RT4 = (((((((((((-1.62212382394553E-14 * Y + 7.68943641360593E-13) * Y +
                        5.764015756615E-12) *
                           Y -
                       1.380635298784E-10) *
                          Y -
                      1.476849808675E-09) *
                         Y +
                     1.84347052385605E-08) *
                        Y +
                    3.34382940759405E-07) *
                       Y -
                   1.39428366421645E-06) *
                      Y -
                  7.50249313713996E-05) *
                     Y -
                 6.26495899187507E-04) *
                    Y +
                4.69716410901162E-02) *
                   Y -
               6.66871297428209E-01) *
                  Y +
              4.11207530217806E+00;
        WW1 = ((((((((((-1.65995045235997E-15 * Y + 6.91838935879598E-14) * Y -
                       9.131223418888E-13) *
                          Y +
                      1.403341829454E-11) *
                         Y -
                     3.672235069444E-10) *
                        Y +
                    6.366962546990E-09) *
                       Y -
                   1.039220021671E-07) *
                      Y +
                  1.959098751715E-06) *
                     Y -
                 3.33474893152939E-05) *
                    Y +
                5.72164211151013E-04) *
                   Y -
               1.05583210553392E-02) *
                  Y +
              2.26696066029591E-01;
        WW2 = ((((((((((((-3.57248951192047E-16 * Y + 6.25708409149331E-15) * Y -
                         9.657033089714E-14) *
                            Y +
                        1.507864898748E-12) *
                           Y -
                       2.332522256110E-11) *
                          Y +
                      3.428545616603E-10) *
                         Y -
                     4.698730937661E-09) *
                        Y +
                    6.219977635130E-08) *
                       Y -
                   7.83008889613661E-07) *
                      Y +
                  9.08621687041567E-06) *
                     Y -
                 9.86368311253873E-05) *
                    Y +
                9.69632496710088E-04) *
                   Y -
               8.14594214284187E-03) *
                  Y +
              8.50218447733457E-02;
        WW3 = (((((((((((((1.64742458534277E-16 * Y - 2.68512265928410E-15) *
                              Y +
                          3.788890667676E-14) *
                             Y -
                         5.508918529823E-13) *
                            Y +
                        7.555896810069E-12) *
                           Y -
                       9.69039768312637E-11) *
                          Y +
                      1.16034263529672E-09) *
                         Y -
                     1.28771698573873E-08) *
                        Y +
                    1.31949431805798E-07) *
                       Y -
                   1.23673915616005E-06) *
                      Y +
                  1.04189803544936E-05) *
                     Y -
                 7.79566003744742E-05) *
                    Y +
                5.03162624754434E-04) *
                   Y -
               2.55138844587555E-03) *
                  Y +
              1.13250730954014E-02;
        WW4 = ((((((((((((((-1.55714130075679E-17 * Y + 2.57193722698891E-16) *
                               Y -
                           3.626606654097E-15) *
                              Y +
                          5.234734676175E-14) *
                             Y -
                         7.067105402134E-13) *
                            Y +
                        8.793512664890E-12) *
                           Y -
                       1.006088923498E-10) *
                          Y +
                      1.050565098393E-09) *
                         Y -
                     9.91517881772662E-09) *
                        Y +
                    8.35835975882941E-08) *
                       Y -
                   6.19785782240693E-07) *
                      Y +
                  3.95841149373135E-06) *
                     Y -
                 2.11366761402403E-05) *
                    Y +
                9.00474771229507E-05) *
                   Y -
               2.78777909813289E-04) *
                  Y +
              5.26543779837487E-04;
    }
    else if (X <= 15)
    {
        Y = X - 12.5E+00;
        RT1 = (((((((((((4.94869622744119E-17 * Y + 8.03568805739160E-16) * Y -
                        5.599125915431E-15) *
                           Y -
                       1.378685560217E-13) *
                          Y +
                      7.006511663249E-13) *
                         Y +
                     1.30391406991118E-11) *
                        Y +
                    8.06987313467541E-11) *
                       Y -
                   5.20644072732933E-09) *
                      Y +
                  7.72794187755457E-08) *
                     Y -
                 1.61512612564194E-06) *
                    Y +
                4.15083811185831E-05) *
                   Y -
               7.87855975560199E-04) *
                  Y +
              1.14189319050009E-02;
        RT2 = (((((((((((4.89224285522336E-16 * Y + 1.06390248099712E-14) * Y -
                        5.446260182933E-14) *
                           Y -
                       1.613630106295E-12) *
                          Y +
                      3.910179118937E-12) *
                         Y +
                     1.90712434258806E-10) *
                        Y +
                    8.78470199094761E-10) *
                       Y -
                   5.97332993206797E-08) *
                      Y +
                  9.25750831481589E-07) *
                     Y -
                 2.02362185197088E-05) *
                    Y +
                4.92341968336776E-04) *
                   Y -
               8.68438439874703E-03) *
                  Y +
              1.15825965127958E-01;
        RT3 = ((((((((((6.12419396208408E-14 * Y + 1.12328861406073E-13) * Y -
                       9.051094103059E-12) *
                          Y -
                      4.781797525341E-11) *
                         Y +
                     1.660828868694E-09) *
                        Y +
                    4.499058798868E-10) *
                       Y -
                   2.519549641933E-07) *
                      Y +
                  4.977444040180E-06) *
                     Y -
                 1.25858350034589E-04) *
                    Y +
                2.70279176970044E-03) *
                   Y -
               3.99327850801083E-02) *
                  Y +
              4.33467200855434E-01;
        RT4 = (((((((((((4.63414725924048E-14 * Y - 4.72757262693062E-14) * Y -
                        1.001926833832E-11) *
                           Y +
                       6.074107718414E-11) *
                          Y +
                      1.576976911942E-09) *
                         Y -
                     2.01186401974027E-08) *
                        Y -
                    1.84530195217118E-07) *
                       Y +
                   5.02333087806827E-06) *
                      Y +
                  9.66961790843006E-06) *
                     Y -
                 1.58522208889528E-03) *
                    Y +
                2.80539673938339E-02) *
                   Y -
               2.78953904330072E-01) *
                  Y +
              1.82835655238235E+00;
        WW4 = (((((((((((((2.90401781000996E-18 * Y - 4.63389683098251E-17) *
                              Y +
                          6.274018198326E-16) *
                             Y -
                         8.936002188168E-15) *
                            Y +
                        1.194719074934E-13) *
                           Y -
                       1.45501321259466E-12) *
                          Y +
                      1.64090830181013E-11) *
                         Y -
                     1.71987745310181E-10) *
                        Y +
                    1.63738403295718E-09) *
                       Y -
                   1.39237504892842E-08) *
                      Y +
                  1.06527318142151E-07) *
                     Y -
                 7.27634957230524E-07) *
                    Y +
                4.12159381310339E-06) *
                   Y -
               1.74648169719173E-05) *
                  Y +
              8.50290130067818E-05;
        WW3 = ((((((((((((-4.19569145459480E-17 * Y + 5.94344180261644E-16) * Y -
                         1.148797566469E-14) *
                            Y +
                        1.881303962576E-13) *
                           Y -
                       2.413554618391E-12) *
                          Y +
                      3.372127423047E-11) *
                         Y -
                     4.933988617784E-10) *
                        Y +
                    6.116545396281E-09) *
                       Y -
                   6.69965691739299E-08) *
                      Y +
                  7.52380085447161E-07) *
                     Y -
                 8.08708393262321E-06) *
                    Y +
                6.88603417296672E-05) *
                   Y -
               4.67067112993427E-04) *
                  Y +
              5.42313365864597E-03;
        WW2 = ((((((((((-6.22272689880615E-15 * Y + 1.04126809657554E-13) * Y -
                       6.842418230913E-13) *
                          Y +
                      1.576841731919E-11) *
                         Y -
                     4.203948834175E-10) *
                        Y +
                    6.287255934781E-09) *
                       Y -
                   8.307159819228E-08) *
                      Y +
                  1.356478091922E-06) *
                     Y -
                 2.08065576105639E-05) *
                    Y +
                2.52396730332340E-04) *
                   Y -
               2.94484050194539E-03) *
                  Y +
              6.01396183129168E-02;
        WW1 = (((-1.8784686463512E-01 / X + 2.2991849164985E-01) / X -
                4.9893752514047E-01) /
                   X -
               2.1916512131607E-05) *
                  exp(-X) +
              sqrt(PIE4 / X) - WW4 - WW3 - WW2;
    }
    else if (X <= 20)
    {
        WW1 = sqrt(PIE4 / X);
        Y = X - 17.5E+00;
        RT1 = (((((((((((4.36701759531398E-17 * Y - 1.12860600219889E-16) * Y -
                        6.149849164164E-15) *
                           Y +
                       5.820231579541E-14) *
                          Y +
                      4.396602872143E-13) *
                         Y -
                     1.24330365320172E-11) *
                        Y +
                    6.71083474044549E-11) *
                       Y +
                   2.43865205376067E-10) *
                      Y +
                  1.67559587099969E-08) *
                     Y -
                 9.32738632357572E-07) *
                    Y +
                2.39030487004977E-05) *
                   Y -
               4.68648206591515E-04) *
                  Y +
              8.34977776583956E-03;
        RT2 = (((((((((((4.98913142288158E-16 * Y - 2.60732537093612E-16) * Y -
                        7.775156445127E-14) *
                           Y +
                       5.766105220086E-13) *
                          Y +
                      6.432696729600E-12) *
                         Y -
                     1.39571683725792E-10) *
                        Y +
                    5.95451479522191E-10) *
                       Y +
                   2.42471442836205E-09) *
                      Y +
                  2.47485710143120E-07) *
                     Y -
                 1.14710398652091E-05) *
                    Y +
                2.71252453754519E-04) *
                   Y -
               4.96812745851408E-03) *
                  Y +
              8.26020602026780E-02;
        RT3 = (((((((((((1.91498302509009E-15 * Y + 1.48840394311115E-14) * Y -
                        4.316925145767E-13) *
                           Y +
                       1.186495793471E-12) *
                          Y +
                      4.615806713055E-11) *
                         Y -
                     5.54336148667141E-10) *
                        Y +
                    3.48789978951367E-10) *
                       Y -
                   2.79188977451042E-09) *
                      Y +
                  2.09563208958551E-06) *
                     Y -
                 6.76512715080324E-05) *
                    Y +
                1.32129867629062E-03) *
                   Y -
               2.05062147771513E-02) *
                  Y +
              2.88068671894324E-01;
        RT4 = (((((((((((-5.43697691672942E-15 * Y - 1.12483395714468E-13) * Y +
                        2.826607936174E-12) *
                           Y -
                       1.266734493280E-11) *
                          Y -
                      4.258722866437E-10) *
                         Y +
                     9.45486578503261E-09) *
                        Y -
                    5.86635622821309E-08) *
                       Y -
                   1.28835028104639E-06) *
                      Y +
                  4.41413815691885E-05) *
                     Y -
                 7.61738385590776E-04) *
                    Y +
                9.66090902985550E-03) *
                   Y -
               1.01410568057649E-01) *
                  Y +
              9.54714798156712E-01;
        WW4 = ((((((((((((-7.56882223582704E-19 * Y + 7.53541779268175E-18) * Y -
                         1.157318032236E-16) *
                            Y +
                        2.411195002314E-15) *
                           Y -
                       3.601794386996E-14) *
                          Y +
                      4.082150659615E-13) *
                         Y -
                     4.289542980767E-12) *
                        Y +
                    5.086829642731E-11) *
                       Y -
                   6.35435561050807E-10) *
                      Y +
                  6.82309323251123E-09) *
                     Y -
                 5.63374555753167E-08) *
                    Y +
                3.57005361100431E-07) *
                   Y -
               2.40050045173721E-06) *
                  Y +
              4.94171300536397E-05;
        WW3 = (((((((((((-5.54451040921657E-17 * Y + 2.68748367250999E-16) * Y +
                        1.349020069254E-14) *
                           Y -
                       2.507452792892E-13) *
                          Y +
                      1.944339743818E-12) *
                         Y -
                     1.29816917658823E-11) *
                        Y +
                    3.49977768819641E-10) *
                       Y -
                   8.67270669346398E-09) *
                      Y +
                  1.31381116840118E-07) *
                     Y -
                 1.36790720600822E-06) *
                    Y +
                1.19210697673160E-05) *
                   Y -
               1.42181943986587E-04) *
                  Y +
              4.12615396191829E-03;
        WW2 = (((((((((((-1.86506057729700E-16 * Y + 1.16661114435809E-15) * Y +
                        2.563712856363E-14) *
                           Y -
                       4.498350984631E-13) *
                          Y +
                      1.765194089338E-12) *
                         Y +
                     9.04483676345625E-12) *
                        Y +
                    4.98930345609785E-10) *
                       Y -
                   2.11964170928181E-08) *
                      Y +
                  3.98295476005614E-07) *
                     Y -
                 5.49390160829409E-06) *
                    Y +
                7.74065155353262E-05) *
                   Y -
               1.48201933009105E-03) *
                  Y +
              4.97836392625268E-02;
        WW1 = ((1.9623264149430E-01 / X - 4.9695241464490E-01) / X -
               6.0156581186481E-05) *
                  exp(-X) +
              WW1 - WW2 - WW3 - WW4;
    }
    else if (X <= 35)
    {
        WW1 = sqrt(PIE4 / X);
        E = exp(-X);
        RT1 = ((((((-4.45711399441838E-05 * X + 1.27267770241379E-03) * X -
                   2.36954961381262E-01) *
                      X +
                  1.54330657903756E+01) *
                     X -
                 5.22799159267808E+02) *
                    X +
                1.05951216669313E+04) *
                   X +
               (-2.51177235556236E+06 / X + 8.72975373557709E+05) / X -
               1.29194382386499E+05) *
                  E +
              R14 / (X - R14);
        RT2 = (((((-7.85617372254488E-02 * X + 6.35653573484868E+00) * X -
                  3.38296938763990E+02) *
                     X +
                 1.25120495802096E+04) *
                    X -
                3.16847570511637E+05) *
                   X +
               ((-1.02427466127427E+09 / X +
                 3.70104713293016E+08) /
                    X -
                5.87119005093822E+07) /
                   X +
               5.38614211391604E+06) *
                  E +
              R24 / (X - R24);
        RT3 = (((((-2.37900485051067E-01 * X + 1.84122184400896E+01) * X -
                  1.00200731304146E+03) *
                     X +
                 3.75151841595736E+04) *
                    X -
                9.50626663390130E+05) *
                   X +
               ((-2.88139014651985E+09 / X +
                 1.06625915044526E+09) /
                    X -
                1.72465289687396E+08) /
                   X +
               1.60419390230055E+07) *
                  E +
              R34 / (X - R34);
        RT4 = ((((((-6.00691586407385E-04 * X - 3.64479545338439E-01) * X +
                   1.57496131755179E+01) *
                      X -
                  6.54944248734901E+02) *
                     X +
                 1.70830039597097E+04) *
                    X -
                2.90517939780207E+05) *
                   X +
               (3.49059698304732E+07 / X - 1.64944522586065E+07) / X +
               2.96817940164703E+06) *
                  E +
              R44 / (X - R44);
        if (X <= 25)
            WW4 = (((((((2.33766206773151E-07 * X -
                         3.81542906607063E-05) *
                            X +
                        3.51416601267000E-03) *
                           X -
                       1.66538571864728E-01) *
                          X +
                      4.80006136831847E+00) *
                         X -
                     8.73165934223603E+01) *
                        X +
                    9.77683627474638E+02) *
                       X +
                   1.66000945117640E+04 / X - 6.14479071209961E+03) *
                      E +
                  W44 * WW1;
        else
            WW4 = ((((((5.74245945342286E-06 * X -
                        7.58735928102351E-05) *
                           X +
                       2.35072857922892E-04) *
                          X -
                      3.78812134013125E-03) *
                         X +
                     3.09871652785805E-01) *
                        X -
                    7.11108633061306E+00) *
                       X +
                   5.55297573149528E+01) *
                      E +
                  W44 * WW1;
        WW3 = ((((((2.36392855180768E-04 * X - 9.16785337967013E-03) * X +
                   4.62186525041313E-01) *
                      X -
                  1.96943786006540E+01) *
                     X +
                 4.99169195295559E+02) *
                    X -
                6.21419845845090E+03) *
                   X +
               ((+5.21445053212414E+07 / X - 1.34113464389309E+07) / X +
                1.13673298305631E+06) /
                   X -
               2.81501182042707E+03) *
                  E +
              W34 * WW1;
        WW2 = ((((((7.29841848989391E-04 * X - 3.53899555749875E-02) * X +
                   2.07797425718513E+00) *
                      X -
                  1.00464709786287E+02) *
                     X +
                 3.15206108877819E+03) *
                    X -
                6.27054715090012E+04) *
                   X +
               (+1.54721246264919E+07 / X - 5.26074391316381E+06) / X +
               7.67135400969617E+05) *
                  E +
              W24 * WW1;
        WW1 = ((1.9623264149430E-01 / X - 4.9695241464490E-01) / X -
               6.0156581186481E-05) *
                  E +
              WW1 - WW2 - WW3 - WW4;
    }
    else if (X <= 53)
    {
        WW1 = sqrt(PIE4 / X);
        E = exp(-X) * pow(X, 4);
        RT4 = ((-2.19135070169653E-03 * X - 1.19108256987623E-01) * X -
               7.50238795695573E-01) *
                  E +
              R44 / (X - R44);
        RT3 = ((-9.65842534508637E-04 * X - 4.49822013469279E-02) * X +
               6.08784033347757E-01) *
                  E +
              R34 / (X - R34);
        RT2 = ((-3.62569791162153E-04 * X - 9.09231717268466E-03) * X +
               1.84336760556262E-01) *
                  E +
              R24 / (X - R24);
        RT1 = ((-4.07557525914600E-05 * X - 6.88846864931685E-04) * X +
               1.74725309199384E-02) *
                  E +
              R14 / (X - R14);
        WW4 = ((5.76631982000990E-06 * X - 7.89187283804890E-05) * X +
               3.28297971853126E-04) *
                  E +
              W44 * WW1;
        WW3 = ((2.08294969857230E-04 * X - 3.77489954837361E-03) * X +
               2.09857151617436E-02) *
                  E +
              W34 * WW1;
        WW2 = ((6.16374517326469E-04 * X - 1.26711744680092E-02) * X +
               8.14504890732155E-02) *
                  E +
              W24 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4;
    }
    else
    {
        WW1 = sqrt(PIE4 / X);
        RT1 = R14 / (X - R14);
        RT2 = R24 / (X - R24);
        RT3 = R34 / (X - R34);
        RT4 = R44 / (X - R44);
        WW4 = W44 * WW1;
        WW3 = W34 * WW1;
        WW2 = W24 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4;
    }
    roots[0] = RT1;
    roots[1] = RT2;
    roots[2] = RT3;
    roots[3] = RT4;
    weights[0] = WW1;
    weights[1] = WW2;
    weights[2] = WW3;
    weights[3] = WW4;
    return 0;
}

int rys_root5(double X, double *roots, double *weights)
{
    constexpr double R15 = 1.17581320211778E-01, R25 = 1.07456201243690E+00, W25 = 2.70967405960535E-01, R35 = 3.08593744371754E+00, W35 = 3.82231610015404E-02, R45 = 6.41472973366203E+00, W45 = 1.51614186862443E-03, R55 = 1.18071894899717E+01, W55 = 8.62130526143657E-06;
    double RT1, RT2, RT3, RT4, RT5, WW1, WW2, WW3, WW4, WW5;
    double Y, E, XXX;

    if (X < 3.e-7)
    {
        RT1 = 2.26659266316985E-02 - 2.15865967920897E-03 * X;
        RT2 = 2.31271692140903E-01 - 2.20258754389745E-02 * X;
        RT3 = 8.57346024118836E-01 - 8.16520023025515E-02 * X;
        RT4 = 2.97353038120346E+00 - 2.83193369647137E-01 * X;
        RT5 = 1.84151859759051E+01 - 1.75382723579439E+00 * X;
        WW1 = 2.95524224714752E-01 - 1.96867576909777E-02 * X;
        WW2 = 2.69266719309995E-01 - 5.61737590184721E-02 * X;
        WW3 = 2.19086362515981E-01 - 9.71152726793658E-02 * X;
        WW4 = 1.49451349150580E-01 - 1.02979262193565E-01 * X;
        WW5 = 6.66713443086877E-02 - 5.73782817488315E-02 * X;
    }
    else if (X < 1.0)
    {
        RT1 = ((((((-4.46679165328413E-11 * X + 1.21879111988031E-09) * X -
                   2.62975022612104E-08) *
                      X +
                  5.15106194905897E-07) *
                     X -
                 9.27933625824749E-06) *
                    X +
                1.51794097682482E-04) *
                   X -
               2.15865967920301E-03) *
                  X +
              2.26659266316985E-02;
        RT2 = ((((((1.93117331714174E-10 * X - 4.57267589660699E-09) * X +
                   2.48339908218932E-08) *
                      X +
                  1.50716729438474E-06) *
                     X -
                 6.07268757707381E-05) *
                    X +
                1.37506939145643E-03) *
                   X -
               2.20258754419939E-02) *
                  X +
              2.31271692140905E-01;
        RT3 = (((((4.84989776180094E-09 * X + 1.31538893944284E-07) * X -
                  2.766753852879E-06) *
                     X -
                 7.651163510626E-05) *
                    X +
                4.033058545972E-03) *
                   X -
               8.16520022916145E-02) *
                  X +
              8.57346024118779E-01;
        RT4 = ((((-2.48581772214623E-07 * X - 4.34482635782585E-06) * X -
                 7.46018257987630E-07) *
                    X +
                1.01210776517279E-02) *
                   X -
               2.83193369640005E-01) *
                  X +
              2.97353038120345E+00;
        RT5 = (((((-8.92432153868554E-09 * X + 1.77288899268988E-08) * X +
                  3.040754680666E-06) *
                     X +
                 1.058229325071E-04) *
                    X +
                4.596379534985E-02) *
                   X -
               1.75382723579114E+00) *
                  X +
              1.84151859759049E+01;
        WW1 = ((((((-2.03822632771791E-09 * X + 3.89110229133810E-08) * X -
                   5.84914787904823E-07) *
                      X +
                  8.30316168666696E-06) *
                     X -
                 1.13218402310546E-04) *
                    X +
                1.49128888586790E-03) *
                   X -
               1.96867576904816E-02) *
                  X +
              2.95524224714749E-01;
        WW2 = (((((((8.62848118397570E-09 * X - 1.38975551148989E-07) * X +
                    1.602894068228E-06) *
                       X -
                   1.646364300836E-05) *
                      X +
                  1.538445806778E-04) *
                     X -
                 1.28848868034502E-03) *
                    X +
                9.38866933338584E-03) *
                   X -
               5.61737590178812E-02) *
                  X +
              2.69266719309991E-01;
        WW3 = ((((((((-9.41953204205665E-09 * X + 1.47452251067755E-07) * X -
                     1.57456991199322E-06) *
                        X +
                    1.45098401798393E-05) *
                       X -
                   1.18858834181513E-04) *
                      X +
                  8.53697675984210E-04) *
                     X -
                 5.22877807397165E-03) *
                    X +
                2.60854524809786E-02) *
                   X -
               9.71152726809059E-02) *
                  X +
              2.19086362515979E-01;
        WW4 = ((((((((-3.84961617022042E-08 * X + 5.66595396544470E-07) * X -
                     5.52351805403748E-06) *
                        X +
                    4.53160377546073E-05) *
                       X -
                   3.22542784865557E-04) *
                      X +
                  1.95682017370967E-03) *
                     X -
                 9.77232537679229E-03) *
                    X +
                3.79455945268632E-02) *
                   X -
               1.02979262192227E-01) *
                  X +
              1.49451349150573E-01;
        WW5 = (((((((((4.09594812521430E-09 * X - 6.47097874264417E-08) * X +
                      6.743541482689E-07) *
                         X -
                     5.917993920224E-06) *
                        X +
                    4.531969237381E-05) *
                       X -
                   2.99102856679638E-04) *
                      X +
                  1.65695765202643E-03) *
                     X -
                 7.40671222520653E-03) *
                    X +
                2.50889946832192E-02) *
                   X -
               5.73782817487958E-02) *
                  X +
              6.66713443086877E-02;
    }
    else if (X < 5.0)
    {
        Y = X - 3.0E+00;
        RT1 = ((((((((-2.58163897135138E-14 * Y + 8.14127461488273E-13) * Y -
                     2.11414838976129E-11) *
                        Y +
                    5.09822003260014E-10) *
                       Y -
                   1.16002134438663E-08) *
                      Y +
                  2.46810694414540E-07) *
                     Y -
                 4.92556826124502E-06) *
                    Y +
                9.02580687971053E-05) *
                   Y -
               1.45190025120726E-03) *
                  Y +
              1.73416786387475E-02;
        RT2 = (((((((((1.04525287289788E-14 * Y + 5.44611782010773E-14) * Y -
                      4.831059411392E-12) *
                         Y +
                     1.136643908832E-10) *
                        Y -
                    1.104373076913E-09) *
                       Y -
                   2.35346740649916E-08) *
                      Y +
                  1.43772622028764E-06) *
                     Y -
                 4.23405023015273E-05) *
                    Y +
                9.12034574793379E-04) *
                   Y -
               1.52479441718739E-02) *
                  Y +
              1.76055265928744E-01;
        RT3 = (((((((((-6.89693150857911E-14 * Y + 5.92064260918861E-13) * Y +
                      1.847170956043E-11) *
                         Y -
                     3.390752744265E-10) *
                        Y -
                    2.995532064116E-09) *
                       Y +
                   1.57456141058535E-07) *
                      Y -
                  3.95859409711346E-07) *
                     Y -
                 9.58924580919747E-05) *
                    Y +
                3.23551502557785E-03) *
                   Y -
               5.97587007636479E-02) *
                  Y +
              6.46432853383057E-01;
        RT4 = ((((((((-3.61293809667763E-12 * Y - 2.70803518291085E-11) * Y +
                     8.83758848468769E-10) *
                        Y +
                    1.59166632851267E-08) *
                       Y -
                   1.32581997983422E-07) *
                      Y -
                  7.60223407443995E-06) *
                     Y -
                 7.41019244900952E-05) *
                    Y +
                9.81432631743423E-03) *
                   Y -
               2.23055570487771E-01) *
                  Y +
              2.21460798080643E+00;
        RT5 = (((((((((7.12332088345321E-13 * Y + 3.16578501501894E-12) * Y -
                      8.776668218053E-11) *
                         Y -
                     2.342817613343E-09) *
                        Y -
                    3.496962018025E-08) *
                       Y -
                   3.03172870136802E-07) *
                      Y +
                  1.50511293969805E-06) *
                     Y +
                 1.37704919387696E-04) *
                    Y +
                4.70723869619745E-02) *
                   Y -
               1.47486623003693E+00) *
                  Y +
              1.35704792175847E+01;
        WW1 = (((((((((1.04348658616398E-13 * Y - 1.94147461891055E-12) * Y +
                      3.485512360993E-11) *
                         Y -
                     6.277497362235E-10) *
                        Y +
                    1.100758247388E-08) *
                       Y -
                   1.88329804969573E-07) *
                      Y +
                  3.12338120839468E-06) *
                     Y -
                 5.04404167403568E-05) *
                    Y +
                8.00338056610995E-04) *
                   Y -
               1.30892406559521E-02) *
                  Y +
              2.47383140241103E-01;
        WW2 = (((((((((((3.23496149760478E-14 * Y - 5.24314473469311E-13) * Y +
                        7.743219385056E-12) *
                           Y -
                       1.146022750992E-10) *
                          Y +
                      1.615238462197E-09) *
                         Y -
                     2.15479017572233E-08) *
                        Y +
                    2.70933462557631E-07) *
                       Y -
                   3.18750295288531E-06) *
                      Y +
                  3.47425221210099E-05) *
                     Y -
                 3.45558237388223E-04) *
                    Y +
                3.05779768191621E-03) *
                   Y -
               2.29118251223003E-02) *
                  Y +
              1.59834227924213E-01;
        WW3 = ((((((((((((-3.42790561802876E-14 * Y + 5.26475736681542E-13) * Y -
                         7.184330797139E-12) *
                            Y +
                        9.763932908544E-11) *
                           Y -
                       1.244014559219E-09) *
                          Y +
                      1.472744068942E-08) *
                         Y -
                     1.611749975234E-07) *
                        Y +
                    1.616487851917E-06) *
                       Y -
                   1.46852359124154E-05) *
                      Y +
                  1.18900349101069E-04) *
                     Y -
                 8.37562373221756E-04) *
                    Y +
                4.93752683045845E-03) *
                   Y -
               2.25514728915673E-02) *
                  Y +
              6.95211812453929E-02;
        WW4 = (((((((((((((1.04072340345039E-14 * Y - 1.60808044529211E-13) *
                              Y +
                          2.183534866798E-12) *
                             Y -
                         2.939403008391E-11) *
                            Y +
                        3.679254029085E-10) *
                           Y -
                       4.23775673047899E-09) *
                          Y +
                      4.46559231067006E-08) *
                         Y -
                     4.26488836563267E-07) *
                        Y +
                    3.64721335274973E-06) *
                       Y -
                   2.74868382777722E-05) *
                      Y +
                  1.78586118867488E-04) *
                     Y -
                 9.68428981886534E-04) *
                    Y +
                4.16002324339929E-03) *
                   Y -
               1.28290192663141E-02) *
                  Y +
              2.22353727685016E-02;
        WW5 = ((((((((((((((-8.16770412525963E-16 * Y + 1.31376515047977E-14) *
                               Y -
                           1.856950818865E-13) *
                              Y +
                          2.596836515749E-12) *
                             Y -
                         3.372639523006E-11) *
                            Y +
                        4.025371849467E-10) *
                           Y -
                       4.389453269417E-09) *
                          Y +
                      4.332753856271E-08) *
                         Y -
                     3.82673275931962E-07) *
                        Y +
                    2.98006900751543E-06) *
                       Y -
                   2.00718990300052E-05) *
                      Y +
                  1.13876001386361E-04) *
                     Y -
                 5.23627942443563E-04) *
                    Y +
                1.83524565118203E-03) *
                   Y -
               4.37785737450783E-03) *
                  Y +
              5.36963805223095E-03;
    }
    else if (X < 10.0)
    {
        Y = X - 7.5E+00;
        RT1 = ((((((((-1.13825201010775E-14 * Y + 1.89737681670375E-13) * Y -
                     4.81561201185876E-12) *
                        Y +
                    1.56666512163407E-10) *
                       Y -
                   3.73782213255083E-09) *
                      Y +
                  9.15858355075147E-08) *
                     Y -
                 2.13775073585629E-06) *
                    Y +
                4.56547356365536E-05) *
                   Y -
               8.68003909323740E-04) *
                  Y +
              1.22703754069176E-02;
        RT2 = (((((((((-3.67160504428358E-15 * Y + 1.27876280158297E-14) * Y -
                      1.296476623788E-12) *
                         Y +
                     1.477175434354E-11) *
                        Y +
                    5.464102147892E-10) *
                       Y -
                   2.42538340602723E-08) *
                      Y +
                  8.20460740637617E-07) *
                     Y -
                 2.20379304598661E-05) *
                    Y +
                4.90295372978785E-04) *
                   Y -
               9.14294111576119E-03) *
                  Y +
              1.22590403403690E-01;
        RT3 = (((((((((1.39017367502123E-14 * Y - 6.96391385426890E-13) * Y +
                      1.176946020731E-12) *
                         Y +
                     1.725627235645E-10) *
                        Y -
                    3.686383856300E-09) *
                       Y +
                   2.87495324207095E-08) *
                      Y +
                  1.71307311000282E-06) *
                     Y -
                 7.94273603184629E-05) *
                    Y +
                2.00938064965897E-03) *
                   Y -
               3.63329491677178E-02) *
                  Y +
              4.34393683888443E-01;
        RT4 = ((((((((((-1.27815158195209E-14 * Y + 1.99910415869821E-14) * Y +
                       3.753542914426E-12) *
                          Y -
                      2.708018219579E-11) *
                         Y -
                     1.190574776587E-09) *
                        Y +
                    1.106696436509E-08) *
                       Y +
                   3.954955671326E-07) *
                      Y -
                  4.398596059588E-06) *
                     Y -
                 2.01087998907735E-04) *
                    Y +
                7.89092425542937E-03) *
                   Y -
               1.42056749162695E-01) *
                  Y +
              1.39964149420683E+00;
        RT5 = ((((((((((-1.19442341030461E-13 * Y - 2.34074833275956E-12) * Y +
                       6.861649627426E-12) *
                          Y +
                      6.082671496226E-10) *
                         Y +
                     5.381160105420E-09) *
                        Y -
                    6.253297138700E-08) *
                       Y -
                   2.135966835050E-06) *
                      Y -
                  2.373394341886E-05) *
                     Y +
                 2.88711171412814E-06) *
                    Y +
                4.85221195290753E-02) *
                   Y -
               1.04346091985269E+00) *
                  Y +
              7.89901551676692E+00;
        WW1 = (((((((((7.95526040108997E-15 * Y - 2.48593096128045E-13) * Y +
                      4.761246208720E-12) *
                         Y -
                     9.535763686605E-11) *
                        Y +
                    2.225273630974E-09) *
                       Y -
                   4.49796778054865E-08) *
                      Y +
                  9.17812870287386E-07) *
                     Y -
                 1.86764236490502E-05) *
                    Y +
                3.76807779068053E-04) *
                   Y -
               8.10456360143408E-03) *
                  Y +
              2.01097936411496E-01;
        WW2 = (((((((((((1.25678686624734E-15 * Y - 2.34266248891173E-14) * Y +
                        3.973252415832E-13) *
                           Y -
                       6.830539401049E-12) *
                          Y +
                      1.140771033372E-10) *
                         Y -
                     1.82546185762009E-09) *
                        Y +
                    2.77209637550134E-08) *
                       Y -
                   4.01726946190383E-07) *
                      Y +
                  5.48227244014763E-06) *
                     Y -
                 6.95676245982121E-05) *
                    Y +
                8.05193921815776E-04) *
                   Y -
               8.15528438784469E-03) *
                  Y +
              9.71769901268114E-02;
        WW3 = ((((((((((((-8.20929494859896E-16 * Y + 1.37356038393016E-14) * Y -
                         2.022863065220E-13) *
                            Y +
                        3.058055403795E-12) *
                           Y -
                       4.387890955243E-11) *
                          Y +
                      5.923946274445E-10) *
                         Y -
                     7.503659964159E-09) *
                        Y +
                    8.851599803902E-08) *
                       Y -
                   9.65561998415038E-07) *
                      Y +
                  9.60884622778092E-06) *
                     Y -
                 8.56551787594404E-05) *
                    Y +
                6.66057194311179E-04) *
                   Y -
               4.17753183902198E-03) *
                  Y +
              2.25443826852447E-02;
        WW4 = ((((((((((((((-1.08764612488790E-17 * Y + 1.85299909689937E-16) *
                               Y -
                           2.730195628655E-15) *
                              Y +
                          4.127368817265E-14) *
                             Y -
                         5.881379088074E-13) *
                            Y +
                        7.805245193391E-12) *
                           Y -
                       9.632707991704E-11) *
                          Y +
                      1.099047050624E-09) *
                         Y -
                     1.15042731790748E-08) *
                        Y +
                    1.09415155268932E-07) *
                       Y -
                   9.33687124875935E-07) *
                      Y +
                  7.02338477986218E-06) *
                     Y -
                 4.53759748787756E-05) *
                    Y +
                2.41722511389146E-04) *
                   Y -
               9.75935943447037E-04) *
                  Y +
              2.57520532789644E-03;
        WW5 = (((((((((((((((7.28996979748849E-19 * Y - 1.26518146195173E-17) * Y + 1.886145834486E-16) * Y - 2.876728287383E-15) * Y +
                          4.114588668138E-14) *
                             Y -
                         5.44436631413933E-13) *
                            Y +
                        6.64976446790959E-12) *
                           Y -
                       7.44560069974940E-11) *
                          Y +
                      7.57553198166848E-10) *
                         Y -
                     6.92956101109829E-09) *
                        Y +
                    5.62222859033624E-08) *
                       Y -
                   3.97500114084351E-07) *
                      Y +
                  2.39039126138140E-06) *
                     Y -
                 1.18023950002105E-05) *
                    Y +
                4.52254031046244E-05) *
                   Y -
               1.21113782150370E-04) *
                  Y +
              1.75013126731224E-04;
    }
    else if (X < 15.0)
    {
        Y = X - 12.5E+00;
        RT1 = ((((((((((-4.16387977337393E-17 * Y + 7.20872997373860E-16) * Y +
                       1.395993802064E-14) *
                          Y +
                      3.660484641252E-14) *
                         Y -
                     4.154857548139E-12) *
                        Y +
                    2.301379846544E-11) *
                       Y -
                   1.033307012866E-09) *
                      Y +
                  3.997777641049E-08) *
                     Y -
                 9.35118186333939E-07) *
                    Y +
                2.38589932752937E-05) *
                   Y -
               5.35185183652937E-04) *
                  Y +
              8.85218988709735E-03;
        RT2 = ((((((((((-4.56279214732217E-16 * Y + 6.24941647247927E-15) * Y +
                       1.737896339191E-13) *
                          Y +
                      8.964205979517E-14) *
                         Y -
                     3.538906780633E-11) *
                        Y +
                    9.561341254948E-11) *
                       Y -
                   9.772831891310E-09) *
                      Y +
                  4.240340194620E-07) *
                     Y -
                 1.02384302866534E-05) *
                    Y +
                2.57987709704822E-04) *
                   Y -
               5.54735977651677E-03) *
                  Y +
              8.68245143991948E-02;
        RT3 = ((((((((((-2.52879337929239E-15 * Y + 2.13925810087833E-14) * Y +
                       7.884307667104E-13) *
                          Y -
                      9.023398159510E-13) *
                         Y -
                     5.814101544957E-11) *
                        Y -
                    1.333480437968E-09) *
                       Y -
                   2.217064940373E-08) *
                      Y +
                  1.643290788086E-06) *
                     Y -
                 4.39602147345028E-05) *
                    Y +
                1.08648982748911E-03) *
                   Y -
               2.13014521653498E-02) *
                  Y +
              2.94150684465425E-01;
        RT4 = ((((((((((-6.42391438038888E-15 * Y + 5.37848223438815E-15) * Y +
                       8.960828117859E-13) *
                          Y +
                      5.214153461337E-11) *
                         Y -
                     1.106601744067E-10) *
                        Y -
                    2.007890743962E-08) *
                       Y +
                   1.543764346501E-07) *
                      Y +
                  4.520749076914E-06) *
                     Y -
                 1.88893338587047E-04) *
                    Y +
                4.73264487389288E-03) *
                   Y -
               7.91197893350253E-02) *
                  Y +
              8.60057928514554E-01;
        RT5 = (((((((((((-2.24366166957225E-14 * Y + 4.87224967526081E-14) * Y +
                        5.587369053655E-12) *
                           Y -
                       3.045253104617E-12) *
                          Y -
                      1.223983883080E-09) *
                         Y -
                     2.05603889396319E-09) *
                        Y +
                    2.58604071603561E-07) *
                       Y +
                   1.34240904266268E-06) *
                      Y -
                  5.72877569731162E-05) *
                     Y -
                 9.56275105032191E-04) *
                    Y +
                4.23367010370921E-02) *
                   Y -
               5.76800927133412E-01) *
                  Y +
              3.87328263873381E+00;
        WW1 = (((((((((8.98007931950169E-15 * Y + 7.25673623859497E-14) * Y +
                      5.851494250405E-14) *
                         Y -
                     4.234204823846E-11) *
                        Y +
                    3.911507312679E-10) *
                       Y -
                   9.65094802088511E-09) *
                      Y +
                  3.42197444235714E-07) *
                     Y -
                 7.51821178144509E-06) *
                    Y +
                1.94218051498662E-04) *
                   Y -
               5.38533819142287E-03) *
                  Y +
              1.68122596736809E-01;
        WW2 = ((((((((((-1.05490525395105E-15 * Y + 1.96855386549388E-14) * Y -
                       5.500330153548E-13) *
                          Y +
                      1.003849567976E-11) *
                         Y -
                     1.720997242621E-10) *
                        Y +
                    3.533277061402E-09) *
                       Y -
                   6.389171736029E-08) *
                      Y +
                  1.046236652393E-06) *
                     Y -
                 1.73148206795827E-05) *
                    Y +
                2.57820531617185E-04) *
                   Y -
               3.46188265338350E-03) *
                  Y +
              7.03302497508176E-02;
        WW3 = (((((((((((3.60020423754545E-16 * Y - 6.24245825017148E-15) * Y +
                        9.945311467434E-14) *
                           Y -
                       1.749051512721E-12) *
                          Y +
                      2.768503957853E-11) *
                         Y -
                     4.08688551136506E-10) *
                        Y +
                    6.04189063303610E-09) *
                       Y -
                   8.23540111024147E-08) *
                      Y +
                  1.01503783870262E-06) *
                     Y -
                 1.20490761741576E-05) *
                    Y +
                1.26928442448148E-04) *
                   Y -
               1.05539461930597E-03) *
                  Y +
              1.15543698537013E-02;
        WW4 = (((((((((((((2.51163533058925E-18 * Y - 4.31723745510697E-17) *
                              Y +
                          6.557620865832E-16) *
                             Y -
                         1.016528519495E-14) *
                            Y +
                        1.491302084832E-13) *
                           Y -
                       2.06638666222265E-12) *
                          Y +
                      2.67958697789258E-11) *
                         Y -
                     3.23322654638336E-10) *
                        Y +
                    3.63722952167779E-09) *
                       Y -
                   3.75484943783021E-08) *
                      Y +
                  3.49164261987184E-07) *
                     Y -
                 2.92658670674908E-06) *
                    Y +
                2.12937256719543E-05) *
                   Y -
               1.19434130620929E-04) *
                  Y +
              6.45524336158384E-04;
        WW5 = ((((((((((((((-1.29043630202811E-19 * Y + 2.16234952241296E-18) *
                               Y -
                           3.107631557965E-17) *
                              Y +
                          4.570804313173E-16) *
                             Y -
                         6.301348858104E-15) *
                            Y +
                        8.031304476153E-14) *
                           Y -
                       9.446196472547E-13) *
                          Y +
                      1.018245804339E-11) *
                         Y -
                     9.96995451348129E-11) *
                        Y +
                    8.77489010276305E-10) *
                       Y -
                   6.84655877575364E-09) *
                      Y +
                  4.64460857084983E-08) *
                     Y -
                 2.66924538268397E-07) *
                    Y +
                1.24621276265907E-06) *
                   Y -
               4.30868944351523E-06) *
                  Y +
              9.94307982432868E-06;
    }
    else if (X < 20.0)
    {
        Y = X - 17.5E+00;
        RT1 = ((((((((((1.91875764545740E-16 * Y + 7.8357401095707E-16) * Y -
                       3.260875931644E-14) *
                          Y -
                      1.186752035569E-13) *
                         Y +
                     4.275180095653E-12) *
                        Y +
                    3.357056136731E-11) *
                       Y -
                   1.123776903884E-09) *
                      Y +
                  1.231203269887E-08) *
                     Y -
                 3.99851421361031E-07) *
                    Y +
                1.45418822817771E-05) *
                   Y -
               3.49912254976317E-04) *
                  Y +
              6.67768703938812E-03;
        RT2 = ((((((((((2.02778478673555E-15 * Y + 1.01640716785099E-14) * Y -
                       3.385363492036E-13) *
                          Y -
                      1.615655871159E-12) *
                         Y +
                     4.527419140333E-11) *
                        Y +
                    3.853670706486E-10) *
                       Y -
                   1.184607130107E-08) *
                      Y +
                  1.347873288827E-07) *
                     Y -
                 4.47788241748377E-06) *
                    Y +
                1.54942754358273E-04) *
                   Y -
               3.55524254280266E-03) *
                  Y +
              6.44912219301603E-02;
        RT3 = ((((((((((7.79850771456444E-15 * Y + 6.00464406395001E-14) * Y -
                       1.249779730869E-12) *
                          Y -
                      1.020720636353E-11) *
                         Y +
                     1.814709816693E-10) *
                        Y +
                    1.766397336977E-09) *
                       Y -
                   4.603559449010E-08) *
                      Y +
                  5.863956443581E-07) *
                     Y -
                 2.03797212506691E-05) *
                    Y +
                6.31405161185185E-04) *
                   Y -
               1.30102750145071E-02) *
                  Y +
              2.10244289044705E-01;
        RT4 = (((((((((((-2.92397030777912E-15 * Y + 1.94152129078465E-14) * Y +
                        4.859447665850E-13) *
                           Y -
                       3.217227223463E-12) *
                          Y -
                      7.484522135512E-11) *
                         Y +
                     7.19101516047753E-10) *
                        Y +
                    6.88409355245582E-09) *
                       Y -
                   1.44374545515769E-07) *
                      Y +
                  2.74941013315834E-06) *
                     Y -
                 1.02790452049013E-04) *
                    Y +
                2.59924221372643E-03) *
                   Y -
               4.35712368303551E-02) *
                  Y +
              5.62170709585029E-01;
        RT5 = (((((((((((1.17976126840060E-14 * Y + 1.24156229350669E-13) * Y -
                        3.892741622280E-12) *
                           Y -
                       7.755793199043E-12) *
                          Y +
                      9.492190032313E-10) *
                         Y -
                     4.98680128123353E-09) *
                        Y -
                    1.81502268782664E-07) *
                       Y +
                   2.69463269394888E-06) *
                      Y +
                  2.50032154421640E-05) *
                     Y -
                 1.33684303917681E-03) *
                    Y +
                2.29121951862538E-02) *
                   Y -
               2.45653725061323E-01) *
                  Y +
              1.89999883453047E+00;
        WW1 = ((((((((((1.74841995087592E-15 * Y - 6.95671892641256E-16) * Y -
                       3.000659497257E-13) *
                          Y +
                      2.021279817961E-13) *
                         Y +
                     3.853596935400E-11) *
                        Y +
                    1.461418533652E-10) *
                       Y -
                   1.014517563435E-08) *
                      Y +
                  1.132736008979E-07) *
                     Y -
                 2.86605475073259E-06) *
                    Y +
                1.21958354908768E-04) *
                   Y -
               3.86293751153466E-03) *
                  Y +
              1.45298342081522E-01;
        WW2 = ((((((((((-1.11199320525573E-15 * Y + 1.85007587796671E-15) * Y +
                       1.220613939709E-13) *
                          Y +
                      1.275068098526E-12) *
                         Y -
                     5.341838883262E-11) *
                        Y +
                    6.161037256669E-10) *
                       Y -
                   1.009147879750E-08) *
                      Y +
                  2.907862965346E-07) *
                     Y -
                 6.12300038720919E-06) *
                    Y +
                1.00104454489518E-04) *
                   Y -
               1.80677298502757E-03) *
                  Y +
              5.78009914536630E-02;
        WW3 = ((((((((((-9.49816486853687E-16 * Y + 6.67922080354234E-15) * Y +
                       2.606163540537E-15) *
                          Y +
                      1.983799950150E-12) *
                         Y -
                     5.400548574357E-11) *
                        Y +
                    6.638043374114E-10) *
                       Y -
                   8.799518866802E-09) *
                      Y +
                  1.791418482685E-07) *
                     Y -
                 2.96075397351101E-06) *
                    Y +
                3.38028206156144E-05) *
                   Y -
               3.58426847857878E-04) *
                  Y +
              8.39213709428516E-03;
        WW4 = (((((((((((1.33829971060180E-17 * Y - 3.44841877844140E-16) * Y +
                        4.745009557656E-15) *
                           Y -
                       6.033814209875E-14) *
                          Y +
                      1.049256040808E-12) *
                         Y -
                     1.70859789556117E-11) *
                        Y +
                    2.15219425727959E-10) *
                       Y -
                   2.52746574206884E-09) *
                      Y +
                  3.27761714422960E-08) *
                     Y -
                 3.90387662925193E-07) *
                    Y +
                3.46340204593870E-06) *
                   Y -
               2.43236345136782E-05) *
                  Y +
              3.54846978585226E-04;
        WW5 = (((((((((((((2.69412277020887E-20 * Y - 4.24837886165685E-19) *
                              Y +
                          6.030500065438E-18) *
                             Y -
                         9.069722758289E-17) *
                            Y +
                        1.246599177672E-15) *
                           Y -
                       1.56872999797549E-14) *
                          Y +
                      1.87305099552692E-13) *
                         Y -
                     2.09498886675861E-12) *
                        Y +
                    2.11630022068394E-11) *
                       Y -
                   1.92566242323525E-10) *
                      Y +
                  1.62012436344069E-09) *
                     Y -
                 1.23621614171556E-08) *
                    Y +
                7.72165684563049E-08) *
                   Y -
               3.59858901591047E-07) *
                  Y +
              2.43682618601000E-06;
    }
    else if (X < 25.0)
    {
        Y = X - 22.5E+00;
        RT1 = (((((((((-1.13927848238726E-15 * Y + 7.39404133595713E-15) * Y +
                      1.445982921243E-13) *
                         Y -
                     2.676703245252E-12) *
                        Y +
                    5.823521627177E-12) *
                       Y +
                   2.17264723874381E-10) *
                      Y +
                  3.56242145897468E-09) *
                     Y -
                 3.03763737404491E-07) *
                    Y +
                9.46859114120901E-06) *
                   Y -
               2.30896753853196E-04) *
                  Y +
              5.24663913001114E-03;
        RT2 = ((((((((((2.89872355524581E-16 * Y - 1.22296292045864E-14) * Y +
                       6.184065097200E-14) *
                          Y +
                      1.649846591230E-12) *
                         Y -
                     2.729713905266E-11) *
                        Y +
                    3.709913790650E-11) *
                       Y +
                   2.216486288382E-09) *
                      Y +
                  4.616160236414E-08) *
                     Y -
                 3.32380270861364E-06) *
                    Y +
                9.84635072633776E-05) *
                   Y -
               2.30092118015697E-03) *
                  Y +
              5.00845183695073E-02;
        RT3 = ((((((((((1.97068646590923E-15 * Y - 4.89419270626800E-14) * Y +
                       1.136466605916E-13) *
                          Y +
                      7.546203883874E-12) *
                         Y -
                     9.635646767455E-11) *
                        Y -
                    8.295965491209E-11) *
                       Y +
                   7.534109114453E-09) *
                      Y +
                  2.699970652707E-07) *
                     Y -
                 1.42982334217081E-05) *
                    Y +
                3.78290946669264E-04) *
                   Y -
               8.03133015084373E-03) *
                  Y +
              1.58689469640791E-01;
        RT4 = ((((((((((1.33642069941389E-14 * Y - 1.55850612605745E-13) * Y -
                       7.522712577474E-13) *
                          Y +
                      3.209520801187E-11) *
                         Y -
                     2.075594313618E-10) *
                        Y -
                    2.070575894402E-09) *
                       Y +
                   7.323046997451E-09) *
                      Y +
                  1.851491550417E-06) *
                     Y -
                 6.37524802411383E-05) *
                    Y +
                1.36795464918785E-03) *
                   Y -
               2.42051126993146E-02) *
                  Y +
              3.97847167557815E-01;
        RT5 = ((((((((((-6.07053986130526E-14 * Y + 1.04447493138843E-12) * Y -
                       4.286617818951E-13) *
                          Y -
                      2.632066100073E-10) *
                         Y +
                     4.804518986559E-09) *
                        Y -
                    1.835675889421E-08) *
                       Y -
                   1.068175391334E-06) *
                      Y +
                  3.292234974141E-05) *
                     Y -
                 5.94805357558251E-04) *
                    Y +
                8.29382168612791E-03) *
                   Y -
               9.93122509049447E-02) *
                  Y +
              1.09857804755042E+00;
        WW1 = (((((((((-9.10338640266542E-15 * Y + 1.00438927627833E-13) * Y +
                      7.817349237071E-13) *
                         Y -
                     2.547619474232E-11) *
                        Y +
                    1.479321506529E-10) *
                       Y +
                   1.52314028857627E-09) *
                      Y +
                  9.20072040917242E-09) *
                     Y -
                 2.19427111221848E-06) *
                    Y +
                8.65797782880311E-05) *
                   Y -
               2.82718629312875E-03) *
                  Y +
              1.28718310443295E-01;
        WW2 = (((((((((5.52380927618760E-15 * Y - 6.43424400204124E-14) * Y -
                      2.358734508092E-13) *
                         Y +
                     8.261326648131E-12) *
                        Y +
                    9.229645304956E-11) *
                       Y -
                   5.68108973828949E-09) *
                      Y +
                  1.22477891136278E-07) *
                     Y -
                 2.11919643127927E-06) *
                    Y +
                4.23605032368922E-05) *
                   Y -
               1.14423444576221E-03) *
                  Y +
              5.06607252890186E-02;
        WW3 = (((((((((3.99457454087556E-15 * Y - 5.11826702824182E-14) * Y -
                      4.157593182747E-14) *
                         Y +
                     4.214670817758E-12) *
                        Y +
                    6.705582751532E-11) *
                       Y -
                   3.36086411698418E-09) *
                      Y +
                  6.07453633298986E-08) *
                     Y -
                 7.40736211041247E-07) *
                    Y +
                8.84176371665149E-06) *
                   Y -
               1.72559275066834E-04) *
                  Y +
              7.16639814253567E-03;
        WW4 = (((((((((((-2.14649508112234E-18 * Y - 2.45525846412281E-18) * Y +
                        6.126212599772E-16) *
                           Y -
                       8.526651626939E-15) *
                          Y +
                      4.826636065733E-14) *
                         Y -
                     3.39554163649740E-13) *
                        Y +
                    1.67070784862985E-11) *
                       Y -
                   4.42671979311163E-10) *
                      Y +
                  6.77368055908400E-09) *
                     Y -
                 7.03520999708859E-08) *
                    Y +
                6.04993294708874E-07) *
                   Y -
               7.80555094280483E-06) *
                  Y +
              2.85954806605017E-04;
        WW5 = ((((((((((((-5.63938733073804E-21 * Y + 6.92182516324628E-20) * Y -
                         1.586937691507E-18) *
                            Y +
                        3.357639744582E-17) *
                           Y -
                       4.810285046442E-16) *
                          Y +
                      5.386312669975E-15) *
                         Y -
                     6.117895297439E-14) *
                        Y +
                    8.441808227634E-13) *
                       Y -
                   1.18527596836592E-11) *
                      Y +
                  1.36296870441445E-10) *
                     Y -
                 1.17842611094141E-09) *
                    Y +
                7.80430641995926E-09) *
                   Y -
               5.97767417400540E-08) *
                  Y +
              1.65186146094969E-06;
    }
    else if (X < 40)
    {
        WW1 = sqrt(PIE4 / X);
        E = exp(-X);
        RT1 = ((((((((-1.73363958895356E-06 * X + 1.19921331441483E-04) * X -
                     1.59437614121125E-02) *
                        X +
                    1.13467897349442E+00) *
                       X -
                   4.47216460864586E+01) *
                      X +
                  1.06251216612604E+03) *
                     X -
                 1.52073917378512E+04) *
                    X +
                1.20662887111273E+05) *
                   X -
               4.07186366852475E+05) *
                  E +
              R15 / (X - R15);
        RT2 = ((((((((-1.60102542621710E-05 * X + 1.10331262112395E-03) * X -
                     1.50043662589017E-01) *
                        X +
                    1.05563640866077E+01) *
                       X -
                   4.10468817024806E+02) *
                      X +
                  9.62604416506819E+03) *
                     X -
                 1.35888069838270E+05) *
                    X +
                1.06107577038340E+06) *
                   X -
               3.51190792816119E+06) *
                  E +
              R25 / (X - R25);
        RT3 = ((((((((-4.48880032128422E-05 * X + 2.69025112122177E-03) * X -
                     4.01048115525954E-01) *
                        X +
                    2.78360021977405E+01) *
                       X -
                   1.04891729356965E+03) *
                      X +
                  2.36985942687423E+04) *
                     X -
                 3.19504627257548E+05) *
                    X +
                2.34879693563358E+06) *
                   X -
               7.16341568174085E+06) *
                  E +
              R35 / (X - R35);
        RT4 = ((((((((-6.38526371092582E-05 * X - 2.29263585792626E-03) * X -
                     7.65735935499627E-02) *
                        X +
                    9.12692349152792E+00) *
                       X -
                   2.32077034386717E+02) *
                      X +
                  2.81839578728845E+02) *
                     X +
                 9.59529683876419E+04) *
                    X -
                1.77638956809518E+06) *
                   X +
               1.02489759645410E+07) *
                  E +
              R45 / (X - R45);
        RT5 = ((((((((-3.59049364231569E-05 * X - 2.25963977930044E-02) * X +
                     1.12594870794668E+00) *
                        X -
                    4.56752462103909E+01) *
                       X +
                   1.05804526830637E+03) *
                      X -
                  1.16003199605875E+04) *
                     X -
                 4.07297627297272E+04) *
                    X +
                2.22215528319857E+06) *
                   X -
               1.61196455032613E+07) *
                  E +
              R55 / (X - R55);
        WW5 = (((((((((-4.61100906133970E-10 * X + 1.43069932644286E-07) * X -
                      1.63960915431080E-05) *
                         X +
                     1.15791154612838E-03) *
                        X -
                    5.30573476742071E-02) *
                       X +
                   1.61156533367153E+00) *
                      X -
                  3.23248143316007E+01) *
                     X +
                 4.12007318109157E+02) *
                    X -
                3.02260070158372E+03) *
                   X +
               9.71575094154768E+03) *
                  E +
              W55 * WW1;
        WW4 = (((((((((-2.40799435809950E-08 * X + 8.12621667601546E-06) * X -
                      9.04491430884113E-04) *
                         X +
                     6.37686375770059E-02) *
                        X -
                    2.96135703135647E+00) *
                       X +
                   9.15142356996330E+01) *
                      X -
                  1.86971865249111E+03) *
                     X +
                 2.42945528916947E+04) *
                    X -
                1.81852473229081E+05) *
                   X +
               5.96854758661427E+05) *
                  E +
              W45 * WW1;
        WW3 = ((((((((1.83574464457207E-05 * X - 1.54837969489927E-03) * X +
                     1.18520453711586E-01) *
                        X -
                    6.69649981309161E+00) *
                       X +
                   2.44789386487321E+02) *
                      X -
                  5.68832664556359E+03) *
                     X +
                 8.14507604229357E+04) *
                    X -
                6.55181056671474E+05) *
                   X +
               2.26410896607237E+06) *
                  E +
              W35 * WW1;
        WW2 = ((((((((2.77778345870650E-05 * X - 2.22835017655890E-03) * X +
                     1.61077633475573E-01) *
                        X -
                    8.96743743396132E+00) *
                       X +
                   3.28062687293374E+02) *
                      X -
                  7.65722701219557E+03) *
                     X +
                 1.10255055017664E+05) *
                    X -
                8.92528122219324E+05) *
                   X +
               3.10638627744347E+06) *
                  E +
              W25 * WW1;
        WW1 = WW1 - 0.01962E+00 * E - WW2 - WW3 - WW4 - WW5;
    }
    else if (X < 59.0)
    {
        WW1 = sqrt(PIE4 / X);
        XXX = X * X * X;
        E = XXX * exp(-X);
        RT1 = (((-2.43758528330205E-02 * X + 2.07301567989771E+00) * X -
                6.45964225381113E+01) *
                   X +
               7.14160088655470E+02) *
                  E +
              R15 / (X - R15);
        RT2 = (((-2.28861955413636E-01 * X + 1.93190784733691E+01) * X -
                5.99774730340912E+02) *
                   X +
               6.61844165304871E+03) *
                  E +
              R25 / (X - R25);
        RT3 = (((-6.95053039285586E-01 * X + 5.76874090316016E+01) * X -
                1.77704143225520E+03) *
                   X +
               1.95366082947811E+04) *
                  E +
              R35 / (X - R35);
        RT4 = (((-1.58072809087018E+00 * X + 1.27050801091948E+02) * X -
                3.86687350914280E+03) *
                   X +
               4.23024828121420E+04) *
                  E +
              R45 / (X - R45);
        RT5 = (((-3.33963830405396E+00 * X + 2.51830424600204E+02) * X -
                7.57728527654961E+03) *
                   X +
               8.21966816595690E+04) *
                  E +
              R55 / (X - R55);
        E = XXX * E;
        WW5 = ((1.35482430510942E-08 * X - 3.27722199212781E-07) * X +
               2.41522703684296E-06) *
                  E +
              W55 * WW1;
        WW4 = ((1.23464092261605E-06 * X - 3.55224564275590E-05) * X +
               3.03274662192286E-04) *
                  E +
              W45 * WW1;
        WW3 = ((1.34547929260279E-05 * X - 4.19389884772726E-04) * X +
               3.87706687610809E-03) *
                  E +
              W35 * WW1;
        WW2 = ((2.09539509123135E-05 * X - 6.87646614786982E-04) * X +
               6.68743788585688E-03) *
                  E +
              W25 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4 - WW5;
    }
    else
    {
        WW1 = sqrt(PIE4 / X);
        RT1 = R15 / (X - R15);
        RT2 = R25 / (X - R25);
        RT3 = R35 / (X - R35);
        RT4 = R45 / (X - R45);
        RT5 = R55 / (X - R55);
        WW2 = W25 * WW1;
        WW3 = W35 * WW1;
        WW4 = W45 * WW1;
        WW5 = W55 * WW1;
        WW1 = WW1 - WW2 - WW3 - WW4 - WW5;
    }
    roots[0] = RT1;
    roots[1] = RT2;
    roots[2] = RT3;
    roots[3] = RT4;
    roots[4] = RT5;
    weights[0] = WW1;
    weights[1] = WW2;
    weights[2] = WW3;
    weights[3] = WW4;
    weights[4] = WW5;
    return 0;
}

#define POLYNOMIAL_VALUE1(p, a, order, x) \
    p = a[order];                         \
    for (i = 1; i <= order; i++)          \
    {                                     \
        p = p * x + a[order - i];         \
    }

#define SET_ZERO(a, n, start)   \
    for (k = start; k < n; ++k) \
    {                           \
        for (i = 0; i < n; ++i) \
        {                       \
            a[i + k * n] = 0;   \
        }                       \
    }

static int R_dsmit(double *cs, double *fmt_ints, int n)
{
    int i, j, k;
    double fac, dot, tmp;
    double v[MXRYSROOTS];

    fac = -fmt_ints[1] / fmt_ints[0];
    tmp = fmt_ints[2] + fac * fmt_ints[1];
    if (tmp <= 0)
    {
        std::cerr << "libcint::rys_roots negative value in sqrt for roots " << n - 1 << " (j=1)\n";
        SET_ZERO(cs, n, 1);
        return 1;
    }
    tmp = 1 / sqrt(tmp);
    cs[0 + 0 * n] = 1 / sqrt(fmt_ints[0]);
    cs[0 + 1 * n] = fac * tmp;
    cs[1 + 1 * n] = tmp;

    for (j = 2; j < n; ++j)
    {
        for (k = 0; k < j; ++k)
        {
            v[k] = 0;
        }
        fac = fmt_ints[j + j];
        for (k = 0; k < j; ++k)
        {
            dot = 0;
            for (i = 0; i <= k; ++i)
            {
                dot += cs[i + k * n] * fmt_ints[i + j];
            }
            for (i = 0; i <= k; ++i)
            {
                v[i] -= dot * cs[i + k * n];
            }
            fac -= dot * dot;
        }

        if (fac <= 0)
        {
            // set rest coefficients to 0
            SET_ZERO(cs, n, j);
            if (fac == 0)
            {
                return 0;
            }
            std::cerr << "libcint::rys_roots negative value in sqrt for roots " << n - 1 << " (j=" << j << ")\n";
            return j;
        }
        fac = 1 / sqrt(fac);
        cs[j + j * n] = fac;
        for (k = 0; k < j; ++k)
        {
            cs[k + j * n] = fac * v[k];
        }
    }
    return 0;
}

/*
 * Using RDK algorithm (based on Schmidt orthogonalization to search rys roots
 * and weights
 */
static int _rdk_rys_roots(int nroots, double *fmt_ints,
                          double *roots, double *weights)
{
    int i, k, j, order;
    const int nroots1 = nroots + 1;
    double rt[MXRYSROOTS + MXRYSROOTS * MXRYSROOTS];
    double *cs = rt + nroots1;
    double *a;
    double root, poly, dum;

    // to avoid numerical instability for very small fmt integrals
    if (fmt_ints[0] == 0)
    {
        for (k = 0; k < nroots; ++k)
        {
            roots[k] = 0;
            weights[k] = 0;
        }
        return 0;
    }
    if (nroots == 1)
    {
        roots[0] = fmt_ints[1] / (fmt_ints[0] - fmt_ints[1]);
        weights[0] = fmt_ints[0];
        return 0;
    }

    int error = R_dsmit(cs, fmt_ints, nroots1);
    if (error)
    {
        return 1;
    }
    error = _CINT_polynomial_roots(rt, cs, nroots);
    if (error)
    {
        return error;
    }

    for (k = 0; k < nroots; ++k)
    {
        root = rt[k];
        // When singularity was caught in R_dsmit, they are typically
        // caused by high order Rys polynomials. We assume the contributions
        // from these high order Rys polynomials are negligible. Only the
        // roots obtained from lower polynomials are used.
        if (root == 1)
        {
            roots[k] = 0;
            weights[k] = 0;
            continue;
        }

        dum = 1 / fmt_ints[0];
        for (j = 1; j < nroots; ++j)
        {
            order = j;
            a = cs + j * nroots1;
            // poly = poly_value1(cs[:order+1,j], order, root);
            POLYNOMIAL_VALUE1(poly, a, order, root);
            dum += poly * poly;
        }
        roots[k] = root / (1 - root);
        weights[k] = 1 / dum;
    }
    return 0;
}

int CINTrys_schmidt(int nroots, double x, double lower, double *roots, double *weights)
{
    double fmt_ints[MXRYSROOTS * 2];
    if (lower == 0)
    {
        gamma_inc_like(fmt_ints, x, nroots * 2);
    }
    else
    {
        fmt_erfc_like(fmt_ints, x, lower, nroots * 2);
    }
    return _rdk_rys_roots(nroots, fmt_ints, roots, weights);
}

/*
 ******************************************************
 * 80 bit double
 */
#ifdef HAVE_SQRTL
#define SQRTL sqrtl
#else
long double c99_sqrtl(long double x)
{
    long double z = sqrt(x);
    // ref. Babylonian method
    // http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
    // An extra update should be enough due to the quadratic convergence
    return (z * z + x) / (z * 2);
}
#define SQRTL c99_sqrtl
#endif

#ifdef HAVE_EXPL
#define EXPL expl
#else
// Does it need to swith to 128 bit expl algorithm?
// ref https://github.com/JuliaLang/openlibm/ld128/e_expl.c
long double c99_expl(long double x)
{
    return exp(x);
}
#define EXPL c99_expl
#endif

int R_lsmit(long double *cs, long double *fmt_ints, int n)
{
    int i, j, k;
    long double fac, dot, tmp;
    long double v[MXRYSROOTS];

    fac = -fmt_ints[1] / fmt_ints[0];
    tmp = fmt_ints[2] + fac * fmt_ints[1];
    if (tmp <= 0)
    {
        std::cerr << "libcint::rys_roots negative value in sqrtl for roots " << n - 1 << " (j=1)\n";
        SET_ZERO(cs, n, 1);
        return 1;
    }
    tmp = 1 / SQRTL(tmp);
    cs[0 + 0 * n] = 1 / SQRTL(fmt_ints[0]);
    cs[0 + 1 * n] = fac * tmp;
    cs[1 + 1 * n] = tmp;

    for (j = 2; j < n; ++j)
    {
        for (k = 0; k < j; ++k)
        {
            v[k] = 0;
        }
        fac = fmt_ints[j + j];
        for (k = 0; k < j; ++k)
        {
            dot = 0;
            for (i = 0; i <= k; ++i)
            {
                dot += cs[i + k * n] * fmt_ints[i + j];
            }
            for (i = 0; i <= k; ++i)
            {
                v[i] -= dot * cs[i + k * n];
            }
            fac -= dot * dot;
        }

        if (fac <= 0)
        {
            // set rest coefficients to 0
            SET_ZERO(cs, n, j);
            if (fac == 0)
            {
                return 0;
            }
            std::cerr << "libcint::rys_roots negative value in sqrtl for roots " << n - 1 << " (j=" << j << ")\n";
            return j;
        }
        fac = 1 / SQRTL(fac);
        cs[j + j * n] = fac;
        for (k = 0; k < j; ++k)
        {
            cs[k + j * n] = fac * v[k];
        }
    }
    return 0;
}

int CINTlrys_schmidt(int nroots, double x, double lower, double *roots, double *weights)
{
    int i, k, j, order, error;
    int nroots1 = nroots + 1;
    long double fmt_ints[MXRYSROOTS * 2 + MXRYSROOTS * MXRYSROOTS];
    long double *qcs = fmt_ints + nroots1 * 2;
    double rt[MXRYSROOTS + MXRYSROOTS * MXRYSROOTS];
    double *cs = rt + nroots;
    double *a;
    double root, poly, dum, dum0;

    if (lower == 0)
    {
        lgamma_inc_like(fmt_ints, x, nroots * 2);
    }
    else
    {
        fmt_lerfc_like(fmt_ints, x, lower, nroots * 2);
    }

    if (fmt_ints[0] == 0)
    {
        for (k = 0; k < nroots; ++k)
        {
            roots[k] = 0;
            weights[k] = 0;
        }
        return 0;
    }

    if (nroots == 1)
    {
        rt[0] = fmt_ints[1] / fmt_ints[0];
    }
    else
    {
        error = R_lsmit(qcs, fmt_ints, nroots1);
        if (error)
        {
            return error;
        }
        for (k = 1; k < nroots1; k++)
        {
            for (i = 0; i <= k; i++)
            {
                cs[k * nroots1 + i] = qcs[k * nroots1 + i];
            }
        }

        error = _CINT_polynomial_roots(rt, cs, nroots);
        if (error)
        {
            return error;
        }
    }

    dum0 = 1 / fmt_ints[0];
    for (k = 0; k < nroots; ++k)
    {
        root = rt[k];
        if (root == 1)
        {
            roots[k] = 0;
            weights[k] = 0;
            continue;
        }

        dum = dum0;
        for (j = 1; j < nroots; ++j)
        {
            order = j;
            a = cs + j * nroots1;
            // poly = poly_value1(cs[:order+1,j], order, root);
            POLYNOMIAL_VALUE1(poly, a, order, root);
            dum += poly * poly;
        }
        roots[k] = root / (1 - root);
        weights[k] = 1 / dum;
    }
    return 0;
}
