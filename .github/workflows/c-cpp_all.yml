name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
    FEATOMIC_CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF"

jobs:
  # Build matrix for all platforms
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest  # Apple Silicon (ARM64)
            name: Mac_ARM64
            build-script: "cd Mac && make NoSpherA2_arm64 -j"
            artifact-name: executable_MacOS_ARM64
            artifact-path: Mac/NoSpherA2_arm64
            
          - os: macos-13  # Intel x86_64
            name: Mac_x86_64
            build-script: "cd Mac && make NoSpherA2_x86_64 -j"
            artifact-name: executable_MacOS_x86_64
            artifact-path: Mac/NoSpherA2_x86_64
            
          - os: ubuntu-latest
            name: Linux
            build-script: "cd Linux && make -j && cp NoSpherA2 ../ && cp libiomp5.so ../ 2>/dev/null || true"
            artifact-name: executable_Linux
            artifact-path: |
              NoSpherA2
              libiomp5.so
              
          - os: windows-2022
            name: Windows
            build-script: |
              cd Windows 
              msbuild NoSpherA2.sln -nologo -p:Configuration=Release -p:Platform=x64
            artifact-name: executable_Windows
            artifact-path: |
              Windows/x64/Release/NoSpherA2.exe
              Windows/x64/Release/libiomp5md.dll

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}
    
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        platform: ${{ matrix.name }}

    - name: Cache Dependencies
      uses: ./.github/actions/cache-deps
      with:
        platform: ${{ matrix.name }}

    - name: Build Dependencies
      uses: ./.github/actions/build-deps
      with:
        platform: ${{ matrix.name }}

    - name: Build NoSpherA2
      run: ${{ matrix.build-script }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-path }}

  # Create macOS Universal Binary
  build_mac_universal:
    needs: build
    runs-on: macos-latest
    name: Build macOS Universal Binary
    
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download ARM64 Binary
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_MacOS_ARM64
        path: ./arm64/

    - name: Download x86_64 Binary
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_MacOS_x86_64
        path: ./x86_64/

    - name: Create Universal Binary with lipo
      run: |
        echo "Creating universal binary with lipo..."
        mkdir -p universal
        
        # Make binaries executable
        chmod +x ./arm64/NoSpherA2_arm64
        chmod +x ./x86_64/NoSpherA2_x86_64
        
        # Verify architectures before combining
        echo "ARM64 binary architecture:"
        file ./arm64/NoSpherA2_arm64
        lipo -info ./arm64/NoSpherA2_arm64
        
        echo "x86_64 binary architecture:"
        file ./x86_64/NoSpherA2_x86_64
        lipo -info ./x86_64/NoSpherA2_x86_64
        
        # Create universal binary
        lipo -create -output ./universal/NoSpherA2_Mac ./arm64/NoSpherA2_arm64 ./x86_64/NoSpherA2_x86_64
        
        # Verify universal binary
        echo "Universal binary architecture:"
        file ./universal/NoSpherA2_Mac
        lipo -info ./universal/NoSpherA2_Mac
        
        # Make executable
        chmod +x ./universal/NoSpherA2_Mac

    - name: Upload Universal Binary
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executable_MacOS_Universal
        path: ./universal/NoSpherA2_Mac

  # Separate testing job
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Download Linux Executable
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_Linux

    - name: Run Tests
      run: |
        chmod +x NoSpherA2
        cd tests
        export LD_LIBRARY_PATH=../:$LD_LIBRARY_PATH
        make all -k

  # Combine all artifacts
  combine_all:
    needs: [build, build_mac_universal]
    runs-on: ubuntu-latest
    name: Combine All Executables

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Download Linux Executable
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_Linux

    - name: Download macOS Universal Binary
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_MacOS_Universal

    - name: Download Windows Executable
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_Windows

    - name: Archive all executables
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executables
        path: |
          NoSpherA2
          NoSpherA2.exe
          NoSpherA2_Mac

  # Security analysis jobs
  CodeQL:
    name: Analyze
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Initialize CodeQL
      uses: github/codeql-action/init@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
      with:
        languages: ${{ matrix.language }}
        source-root: Src

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    # Cache IntelMKL
    - name: Cache IntelMKL Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-intelmkl-linux
      with:
        path: Lib/MKL
        key: intelmkl-linux-${{ runner.os }}-${{ hashFiles('Lib/MKL/**') }}
        restore-keys: |
          intelmkl-linux-${{ runner.os }}-

    - name: Build IntelMKL
      if: steps.cache-intelmkl-linux.outputs.cache-hit != 'true'
      run: |
          wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/47c7d946-fca1-441a-b0df-b094e3f045ea/intel-onemkl-2025.2.0.629_offline.sh 
          sh intel-onemkl-2025.2.0.629_offline.sh -a -s --install-dir=/home/runner/work/NoSpherA2/NoSpherA2/Lib/MKL --eula accept

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-featomic-linux
      with:
        path: Lib/featomic_install
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-
  
    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: |
          cd featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install .. 
          make install

    - name: Build project
      run: cd Linux && make -j1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
      with:
        output: 'codeql-results.sarif'
      continue-on-error: true

    - name: Upload analysis results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
      with:
        sarif_file: ${{github.workspace}}/codeql-results.sarif
        category: codeql
      continue-on-error: true

  flawfinder:
    name: flawfinder
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            submodules: false
            fetch-depth: 1

      - name: transfer to UTF8
        run: |
          find Src/. -type f -exec bash -c 'file="$1"; if [[ $(file -b --mime-encoding "$file") != "utf-8" ]]; then iconv -f ISO-8859-1 -t UTF-8 "$file" -o "${file}.utf8" && mv "${file}.utf8" "$file"; fi' _ {} \;

      - name: flawfinder_scan
        uses: david-a-wheeler/flawfinder@c57197cd6061453f10a496f30a732bc1905918d1 # 2.0.19
        with:
          arguments: '--sarif Src'
          output: 'flawfinder_results.sarif'
        continue-on-error: true
          
      - name: Upload analysis results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
        with:
          sarif_file: ${{github.workspace}}/flawfinder_results.sarif
          category: flawfinder