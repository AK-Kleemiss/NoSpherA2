name: CI

on:
  push:
    branches: [ master, Mac_Test ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight
  workflow_dispatch:

jobs:
  build_Mac:
    runs-on: macos-latest
    needs: [build_Linux]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # Cache OpenBLAS
    - name: Cache OpenBLAS Build
      uses: actions/cache@v4
      id: cache-openblas-mac
      with:
        path: OpenBLAS/installation
        key: openblas-mac-${{ runner.os }}-${{ hashFiles('OpenBLAS/**') }}
        restore-keys: |
          openblas-mac-${{ runner.os }}-
    
    - name: make_OpenBLAS
      if: steps.cache-openblas-mac.outputs.cache-hit != 'true'
      run: >
          cd OpenBLAS && mkdir installation && make -j && make PREFIX=installation install

    - name: make_OpenMP
      run: >
          cd llvm-project/openmp && mkdir build && cd build && cmake -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DLIBOMP_ARCH=aarch64 -DLIBOMP_ENABLE_SHARED=OFF -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 .. && make

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@v4
      id: cache-featomic-mac
      with:
        path: featomic/featomic_install
        key: featomic-mac-${{ runner.os }}-${{ hashFiles('featomic/**') }}
        restore-keys: |
          featomic-mac-${{ runner.os }}-

    - name: make_featomic
      if: steps.cache-featomic-mac.outputs.cache-hit != 'true'
      run: >
          cd featomic/featomic && mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON  -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install .. && make install && export CARGO_BUILD_TARGET=x86_64-apple-darwin && rustup target add x86_64-apple-darwin && cd /Users/runner/work/NoSpherA2/NoSpherA2/featomic/featomic && mkdir -p build_x86_64 && cd build_x86_64 && cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON  -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install_x86 -DCMAKE_OSX_ARCHITECTURES=x86_64 .. && make install

    - name: make_MacOS
      run: >
          cd Mac && make && mv NoSpherA2 ../NoSpherA2_Mac

    - name: tmate session if tests fail
      if: failure() && github.event_name == 'workflow_dispatch'
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: false

    - name: Archive executable
      uses: actions/upload-artifact@v4
      with:
        name: executable_MacOS
        path: NoSpherA2_Mac

  build_Linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Compiler
      run: sudo apt update && sudo apt install -y build-essential

    # Cache OpenBLAS
    - name: Cache OpenBLAS Build
      uses: actions/cache@v4
      id: cache-openblas-linux
      with:
        path: OpenBLAS/installation
        key: openblas-linux-${{ runner.os }}-${{ hashFiles('OpenBLAS/**') }}
        restore-keys: |
          openblas-linux-${{ runner.os }}-

    - name: Build OpenBLAS
      if: steps.cache-openblas-linux.outputs.cache-hit != 'true'
      run: >
          cd OpenBLAS && mkdir installation && make -j && make PREFIX=installation install

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@v4
      id: cache-featomic-linux
      with:
        path: featomic/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('featomic/**') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-
  
    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: >
          cd featomic/featomic && mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON  -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install .. && make install

    - name: make_Linux
      run: make

    - name: tmate session if tests fail build
      if: failure() && github.event_name == 'workflow_dispatch'
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: false

    - name: Archive executable
      uses: actions/upload-artifact@v4
      with:
        name: executable_Linux
        path: Linux/NoSpherA2

    - name: Run Tests
      run: chmod +x NoSpherA2 && cd tests && make all -k

    - name: tmate session if tests fail tests
      if: failure() && github.event_name == 'workflow_dispatch'
      uses: mxschmitt/action-tmate@v3

  build_windows:
    runs-on: windows-2022
    needs: [build_Linux]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    # Cache OpenBLAS build
    - name: Cache OpenBLAS Build
      uses: actions/cache@v4
      id: cache-openblas-windows
      with:
        path: OpenBLAS/build  # Adjust if OpenBLAS installs elsewhere
        key: openblas-windows-${{ runner.os }}-${{ hashFiles('OpenBLAS/**') }}
        restore-keys: |
          openblas-windows-${{ runner.os }}-

    # Build OpenBLAS only if cache is missing
    - name: make_OpenBLAS
      if: steps.cache-openblas-windows.outputs.cache-hit != 'true'
      run: >
          cd OpenBLAS && mkdir build && cd build && cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DNOFORTRAN=ON .. &&
          msbuild -nologo OpenBLAS.sln -p:Configuration=Release -m &&
          cmake -DBUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -P cmake_install.cmake

    # Cache featomic build
    - name: Cache featomic Build
      uses: actions/cache@v4
      id: cache-featomic-windows
      with:
        path: featomic/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-windows-${{ runner.os }}-${{ hashFiles('featomic/**') }}
        restore-keys: |
          featomic-windows-${{ runner.os }}-

    # Build featomic only if cache is missing
    - name: make_featomic
      if: steps.cache-featomic-windows.outputs.cache-hit != 'true'
      run: >
          cd featomic\featomic && if not exist build mkdir build && cd build && cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install -fresh .. && make install

    - name: make_Windows
      run: cd Windows && msbuild NoSpherA2.sln -nologo -p:Configuration=Release

    - name: Upload .exe
      uses: actions/upload-artifact@v4
      with:
        name: executable_Windows
        path: Windows/x64/Release/NoSpherA2.exe

  combine_all:
    runs-on: ubuntu-latest
    needs: [build_Linux, build_Mac, build_windows]

    steps:
    - name: gather executables Linux
      uses: actions/download-artifact@v4
      with:
        name: executable_Linux

    - name: gather executables Mac
      uses: actions/download-artifact@v4
      with:
        name: executable_MacOS

    - name: gather executables Windows
      uses: actions/download-artifact@v4
      with:
        name: executable_Windows

    - name: Archive all executable
      uses: actions/upload-artifact@v4
      with:
        name: executables
        path: |
          NoSpherA2
          NoSpherA2.exe
          NoSpherA2_Mac