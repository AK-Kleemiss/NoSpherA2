name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_Mac:
    runs-on: macos-latest
    strategy:
      fail-fast: true

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    #Xcode Command Line Tools
    - name: Install Xcode Command Line Tools
      run: |
        xcode-select --install || echo "Xcode Command Line Tools already installed"
        sudo xcodebuild -license accept
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        git config --global --add safe.directory /Users/runner/work/NoSpherA2/NoSpherA2
        git config --global --add safe.directory /Users/runner/work/NoSpherA2/NoSpherA2/featomic
        git config --global --add safe.directory /Users/runner/work/NoSpherA2/NoSpherA2/metatensor

    - name: Get OMP library
      run: brew install libomp

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-featomic-mac
      with:
        path: Lib/featomic_install
        key: featomic-mac-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-mac-${{ runner.os }}-

    - name: make_featomic
      if: steps.cache-featomic-mac.outputs.cache-hit != 'true'
      run: |
          cd /Users/runner/work/NoSpherA2/NoSpherA2/metatensor/metatensor-core 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../Lib/featomic_install .. 
          make install
          cd /Users/runner/work/NoSpherA2/NoSpherA2/featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../Lib/featomic_install .. 
          make install

    - name: make_MacOS
      run: >
          cd Mac && make NoSpherA2_arm64 -j && mv NoSpherA2_arm64 ../NoSpherA2_Mac

    - name: Archive executable
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executable_MacOS
        path: NoSpherA2_Mac

  build_Linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Install Compiler
      run: sudo apt update && sudo apt install -y build-essential

    # Cache IntelMKL
    - name: Cache IntelMKL Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-intelmkl-linux
      with:
        path: Lib/MKL
        key: intelmkl-linux-${{ runner.os }}-${{ hashFiles('Lib/MKL/**') }}
        restore-keys: |
          intelmkl-linux-${{ runner.os }}-

    - name: Build IntelMKL
      if: steps.cache-intelmkl-linux.outputs.cache-hit != 'true'
      run: |
          wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/47c7d946-fca1-441a-b0df-b094e3f045ea/intel-onemkl-2025.2.0.629_offline.sh 
          sh intel-onemkl-2025.2.0.629_offline.sh -a -s --install-dir=/home/runner/work/NoSpherA2/NoSpherA2/Lib/MKL --eula accept

    - name: Set LD_LIBRARY_PATH for Intel OpenMP
      run: echo "LD_LIBRARY_PATH=/home/runner/work/NoSpherA2/NoSpherA2/Lib/MKL/compiler/2025.2/lib:\$LD_LIBRARY_PATH" >> $GITHUB_ENV

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-featomic-linux
      with:
        path: Lib/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-

    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: |
          cd metatensor/metatensor-core 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../featomic_install .. 
          make install
          cd ../../../featomic/featomic
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../featomic_install .. 
          make install

    - name: make_Linux
      run: cd Linux && make -j

    - name: Archive executable
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executable_Linux
        path: |
          Linux/NoSpherA2
          libiomp5.so

    - name: Run Tests
      run: chmod +x NoSpherA2 && cd tests && export LD_LIBRARY_PATH=../:$LD_LIBRARY_PATH && make all -k

  build_windows:
    runs-on: windows-2022
    strategy:
      fail-fast: true

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

    # Cache featomic build
    - name: Cache featomic Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-featomic-windows
      with:
        path: Lib/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-windows-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-windows-${{ runner.os }}-

    # Build featomic only if cache is missing
    - name: make_featomic
      if: steps.cache-featomic-windows.outputs.cache-hit != 'true'
      run: |
          cd metatensor\metatensor-core
          $buildDir = "build"
          if (-not (Test-Path $buildDir)) {
            mkdir $buildDir
          }
          cd $buildDir
          cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="../../../Lib/featomic_install" ..
          msbuild -nologo .\metatensor.sln -p:Configuration=Release
          msbuild -nologo .\INSTALL.vcxproj -p:Configuration=Release
          cd ..\..\featomic\featomic
          $buildDir = "build"
          if (-not (Test-Path $buildDir)) {
            mkdir $buildDir
          }
          cd $buildDir
          cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="..\..\..\Lib\featomic_install" ..
          msbuild -nologo .\featomic.sln -p:Configuration=Release
          msbuild -nologo .\INSTALL.vcxproj -p:Configuration=Release

    - name: Get Intel MKL
      run: MSBuild .\Windows\NoSpherA2.sln /t:Restore /p:RestorePackagesPath=Windows/packages

    - name: make_Windows
      run: |
        cd Windows 
        msbuild NoSpherA2.sln -nologo -p:Configuration=Release -p:Platform=x64

    - name: Archive executable
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executable_Windows
        path: |
            Windows/x64/Release/NoSpherA2.exe
            Windows/x64/Release/libiomp5md.dll

  combine_all:
    runs-on: ubuntu-latest
    needs: [build_Linux, build_Mac, build_windows]

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: gather executables Linux
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_Linux

    - name: gather executables Mac
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_MacOS

    - name: gather executables Windows
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: executable_Windows

    - name: Archive all executable
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executables
        path: |
          NoSpherA2
          NoSpherA2.exe
          NoSpherA2_Mac

  CodeQL:
    name: Analyze
    runs-on: ubuntu-latest
    needs: build_Linux
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Initialize CodeQL
      uses: github/codeql-action/init@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
      with:
        languages: ${{ matrix.language }}
        source-root: Src

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    # Cache IntelMKL
    - name: Cache IntelMKL Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-intelmkl-linux
      with:
        path: Lib/MKL
        key: intelmkl-linux-${{ runner.os }}-${{ hashFiles('Lib/MKL/**') }}
        restore-keys: |
          intelmkl-linux-${{ runner.os }}-

    - name: Build IntelMKL
      if: steps.cache-intelmkl-linux.outputs.cache-hit != 'true'
      run: |
          wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/47c7d946-fca1-441a-b0df-b094e3f045ea/intel-onemkl-2025.2.0.629_offline.sh 
          sh intel-onemkl-2025.2.0.629_offline.sh -a -s --install-dir=/home/runner/work/NoSpherA2/NoSpherA2/Lib/MKL --eula accept

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-featomic-linux
      with:
        path: Lib/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-

    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: |
          cd metatensor/metatensor-core 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../featomic_install .. 
          make install
          cd ../../../featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../featomic_install .. 
          make install

    - name: Build project
      run: cd Linux && make -j1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
      with:
        output: 'codeql-results.sarif'  # Specify output file for CodeQL results
      continue-on-error: true

    - name: Upload analysis results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
      with:
        sarif_file: ${{github.workspace}}/codeql-results.sarif
        category: codeql
      continue-on-error: true

  flawfinder:
    name: flawfinder
    runs-on: ubuntu-latest
    needs: build_Linux
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            submodules: false
            fetch-depth: 1

      - name: transfer to UTF8
        run: |
          find Src/. -type f -exec bash -c 'file="$1"; if [[ $(file -b --mime-encoding "$file") != "utf-8" ]]; then iconv -f ISO-8859-1 -t UTF-8 "$file" -o "${file}.utf8" && mv "${file}.utf8" "$file"; fi' _ {} \;

      - name: flawfinder_scan
        uses: david-a-wheeler/flawfinder@c57197cd6061453f10a496f30a732bc1905918d1 # 2.0.19
        with:
          arguments: '--sarif Src'
          output: 'flawfinder_results.sarif'
        continue-on-error: true

      - name: Upload analysis results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
        with:
          sarif_file: ${{github.workspace}}/flawfinder_results.sarif
          category: flawfinder
