name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_Mac:
    runs-on: macos-latest
    strategy:
      fail-fast: true

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    # Cache OpenBLAS
    - name: Cache OpenBLAS Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-openblas-mac
      with:
        path: Lib/OpenBLAS_build
        key: openblas-mac-${{ runner.os }}-${{ hashFiles('OpenBLAS/**,Lib/OpenBLAS_build/**') }}
        restore-keys: |
          openblas-mac-${{ runner.os }}-
    
    - name: make_OpenBLAS
      if: steps.cache-openblas-mac.outputs.cache-hit != 'true'
      run: |
          cd OpenBLAS 
          mkdir -p installation 
          make -j 
          make PREFIX=../Lib/OpenBLAS_build/ install

    - name: make_OpenMP
      run: |
          cd llvm-project/openmp 
          mkdir -p build 
          cd build 
          cmake -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DLIBOMP_ENABLE_SHARED=OFF -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 .. 
          make -j
          cd runtime/src
          cmake -DCMAKE_INSTALL_PREFIX=../../../../../Lib/OpenMP_build/ -P cmake_install.cmake

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-featomic-mac
      with:
        path: Lib/featomic_install
        key: featomic-mac-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-mac-${{ runner.os }}-

    - name: make_featomic
      if: steps.cache-featomic-mac.outputs.cache-hit != 'true'
      run: |
          cd featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../../Lib/featomic_install .. 
          make install

    - name: make_MacOS
      run: >
          cd Mac && make NoSpherA2_native -j && mv NoSpherA2_native ../NoSpherA2_Mac

    - name: Archive executable
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executable_MacOS
        path: NoSpherA2_Mac

  build_Linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Install Compiler
      run: sudo apt update && sudo apt install -y build-essential

    # Cache OpenBLAS
    - name: Cache OpenBLAS Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-openblas-linux
      with:
        path: Lib/OpenBLAS_build
        key: openblas-linux-${{ runner.os }}-${{ hashFiles('OpenBLAS/**,Lib/OpenBLAS_build/**') }}
        restore-keys: |
          openblas-linux-${{ runner.os }}-

    - name: Build OpenBLAS
      if: steps.cache-openblas-linux.outputs.cache-hit != 'true'
      run: |
          cd OpenBLAS 
          mkdir -p installation 
          make -j 
          make PREFIX=installation install
    

    - name: make_OpenMP
      run: |
        cd llvm-project/openmp 
        mkdir -p build 
        cd build 
        cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++ -DLIBOMP_ENABLE_SHARED=OFF .. 
        make -j
        cd runtime/src
        cmake -DCMAKE_INSTALL_PREFIX=../../../../../Lib/OpenMP_build/ -P cmake_install.cmake

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-featomic-linux
      with:
        path: Lib/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-
  
    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: |
          cd featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install .. 
          make install

    - name: make_Linux
      run: make

    - name: Archive executable
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executable_Linux
        path: Linux/NoSpherA2

    - name: Run Tests
      run: chmod +x NoSpherA2 && cd tests && make all -k

  build_windows:
    runs-on: windows-2022
    strategy:
      fail-fast: true

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

    # Cache OpenBLAS build
    - name: Cache OpenBLAS Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-openblas-windows
      with:
        path: Lib/OpenBLAS_build  # Adjust if OpenBLAS installs elsewhere
        key: openblas-windows-${{ runner.os }}-${{ hashFiles('OpenBLAS/**,Lib/OpenBLAS_build/**') }}
        restore-keys: |
          openblas-windows-${{ runner.os }}-

    # Build OpenBLAS only if cache is missing
    - name: make_OpenBLAS
      if: steps.cache-openblas-windows.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
          cd OpenBLAS 
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DNOFORTRAN=ON ..
          msbuild -nologo OpenBLAS.sln -p:Configuration=Release -m
          cmake -DBUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -P cmake_install.cmake
          robocopy ./install/ ../../Lib/OpenBLAS_build\ /E ; if ($LASTEXITCODE -le 7) { $global:LASTEXITCODE = 0 }

    # Cache featomic build
    - name: Cache featomic Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-featomic-windows
      with:
        path: Lib/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-windows-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-windows-${{ runner.os }}-

    # Build featomic only if cache is missing
    - name: make_featomic
      if: steps.cache-featomic-windows.outputs.cache-hit != 'true'
      run: |
          cd featomic\featomic
          $buildDir = "build"
          if (-not (Test-Path $buildDir)) {
            mkdir $buildDir
          }
          cd $buildDir
          cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="..\..\..\Lib\featomic_install" ..
          msbuild -nologo .\featomic.sln -p:Configuration=Release
          msbuild -nologo .\INSTALL.vcxproj -p:Configuration=Release

    - name: make_Windows
      run: |
        cd Windows 
        msbuild NoSpherA2.sln -nologo -p:Configuration=Release -p:Platform=x64

    - name: Upload .exe
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executable_Windows
        path: 'Windows/x64/Release/NoSpherA2.exe'

  combine_all:
    runs-on: ubuntu-latest
    needs: [build_Linux, build_Mac, build_windows]

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: gather executables Linux
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: executable_Linux

    - name: gather executables Mac
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: executable_MacOS

    - name: gather executables Windows
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: executable_Windows

    - name: Archive all executable
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: executables
        path: |
          NoSpherA2
          NoSpherA2.exe
          NoSpherA2_Mac
  CodeQL:
    name: Analyze
    runs-on: ubuntu-latest
    needs: build_Linux
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Initialize CodeQL
      uses: github/codeql-action/init@d6bbdef45e766d081b84a2def353b0055f728d3e # v3.29.3
      with:
        languages: ${{ matrix.language }}
        source-root: Src

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran libopenblas-dev clang build-essential

    # Cache OpenBLAS
    - name: Cache OpenBLAS Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-openblas-linux
      with:
        path: Lib/OpenBLAS_build
        key: openblas-linux-${{ runner.os }}-${{ hashFiles('OpenBLAS/**,Lib/OpenBLAS_build/**') }}
        restore-keys: |
          openblas-linux-${{ runner.os }}-

    - name: Build OpenBLAS
      if: steps.cache-openblas-linux.outputs.cache-hit != 'true'
      run: |
          cd OpenBLAS 
          mkdir -p installation 
          make -j 
          make PREFIX=installation install
    

    - name: make_OpenMP
      run: |
        cd llvm-project/openmp 
        mkdir -p build 
        cd build 
        cmake -DCMAKE_C_COMPILER=gcc -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=g++ -DLIBOMP_ENABLE_SHARED=OFF .. 
        make -j
        cd runtime/src
        cmake -DCMAKE_INSTALL_PREFIX=../../../../../Lib/OpenMP_build/ -P cmake_install.cmake

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      id: cache-featomic-linux
      with:
        path: Lib/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('featomic/**,Lib/featomic_install/**') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-
  
    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: |
          cd featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install .. 
          make install

    - name: make_Linux
      run: |
          cd Linux
          make -j

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@d6bbdef45e766d081b84a2def353b0055f728d3e # v3.29.3
      with:
        output: 'codeql-results.sarif'  # Specify output file for CodeQL results

    - name: Upload analysis results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@d6bbdef45e766d081b84a2def353b0055f728d3e # v3.29.3
      with:
        sarif_file: ${{github.workspace}}/codeql-results.sarif
        category: codeql


  flawfinder:
    name: flawfinder
    runs-on: ubuntu-latest
    needs: build_Linux
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            submodules: false
            fetch-depth: 1

      - name: flawfinder_scan
        uses: david-a-wheeler/flawfinder@c57197cd6061453f10a496f30a732bc1905918d1 # 2.0.19
        with:
          arguments: '--sarif Src'
          output: 'flawfinder_results.sarif'
          
      - name: Upload analysis results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@d6bbdef45e766d081b84a2def353b0055f728d3e # v3.29.3
        with:
          sarif_file: ${{github.workspace}}/flawfinder_results.sarif
          category: flawfinder
      