name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at midnight
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_Mac:
    runs-on: macos-latest
    strategy:
      fail-fast: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # Cache OpenBLAS
    - name: Cache OpenBLAS Build
      uses: actions/cache@v4
      id: cache-openblas-mac
      with:
        path: OpenBLAS/installation
        key: openblas-arm-mac-${{ runner.os }}-${{ hashFiles('OpenBLAS/**') }}
        restore-keys: |
          openblas-arm-mac-${{ runner.os }}-
    
    - name: make_OpenBLAS
      if: steps.cache-openblas-arm-mac.outputs.cache-hit != 'true'
      run: |
          cd OpenBLAS 
          mkdir -p installation 
          make -j 
          make PREFIX=installation install

    - name: make_OpenMP
      run: |
          cd llvm-project/openmp 
          mkdir -p build 
          cd build 
          cmake -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DLIBOMP_ARCH=aarch64 -DLIBOMP_ENABLE_SHARED=OFF -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 .. 
          make

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@v4
      id: cache-featomic-mac
      with:
        path: featomic/featomic_install
        key: featomic-arm-mac-${{ runner.os }}-${{ hashFiles('featomic/**') }}
        restore-keys: |
          featomic-arm-mac-${{ runner.os }}-

    - name: make_featomic
      if: steps.cache-featomic-arm-mac.outputs.cache-hit != 'true'
      run: |
          cd featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install_arm .. 
          make install

    - name: make_MacOS
      run: >
          cd Mac && make NoSpherA2_arm && mv NoSpherA2_arm ../NoSpherA2_Mac

    - name: Archive executable
      uses: actions/upload-artifact@v4
      with:
        name: executable_MacOS
        path: NoSpherA2_Mac

  build_Linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Compiler
      run: sudo apt update && sudo apt install -y build-essential

    # Cache OpenBLAS
    - name: Cache OpenBLAS Build
      uses: actions/cache@v4
      id: cache-openblas-linux
      with:
        path: OpenBLAS/installation
        key: openblas-linux-${{ runner.os }}-${{ hashFiles('OpenBLAS/**') }}
        restore-keys: |
          openblas-linux-${{ runner.os }}-

    - name: Build OpenBLAS
      if: steps.cache-openblas-linux.outputs.cache-hit != 'true'
      run: |
          cd OpenBLAS 
          mkdir -p installation 
          make -j 
          make PREFIX=installation install

    # Cache featomic
    - name: Cache featomic Build
      uses: actions/cache@v4
      id: cache-featomic-linux
      with:
        path: featomic/featomic_install  # Adjust if featomic installs elsewhere
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('featomic/**') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-
  
    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: |
          cd featomic/featomic 
          mkdir -p build
          cd build 
          cmake -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install .. 
          make install

    - name: make_Linux
      run: make

    - name: Archive executable
      uses: actions/upload-artifact@v4
      with:
        name: executable_Linux
        path: Linux/NoSpherA2

    - name: Run Tests
      run: chmod +x NoSpherA2 && cd tests && make all -k

  build_windows:
    runs-on: windows-2022
    strategy:
      fail-fast: true
      matrix:
        os: [ windows-2022 ]
        arch: [ x86_64 ]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    # Cache OpenBLAS build
    - name: Cache OpenBLAS Build
      uses: actions/cache@v4
      id: cache-openblas-windows
      with:
        path: OpenBLAS/build_${{ matrix.arch }}  # Adjust if OpenBLAS installs elsewhere
        key: openblas-windows-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('OpenBLAS/**') }}
        restore-keys: |
          openblas-windows-${{ runner.os }}-${{ matrix.arch }}-

    # Build OpenBLAS only if cache is missing
    - name: make_OpenBLAS
      if: steps.cache-openblas-windows_${{ matrix.arch }}.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
          cd OpenBLAS 
          $buildDir = "build_${{ matrix.arch }}"
          if (-not (Test-Path $buildDir)) {
            mkdir $buildDir
          }
          cd $buildDir
          cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release -DNOFORTRAN=ON ..
          if ("${{ matrix.arch }}" -eq "arm64") {
            msbuild -nologo OpenBLAS.sln -p:Configuration=Release -p:Platform="Any CPU" -m
          } else {
            msbuild -nologo OpenBLAS.sln -p:Configuration=Release -p:Platform=x64 -m
          }
          cmake -DBUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -P cmake_install.cmake

    # Cache featomic build
    - name: Cache featomic Build
      uses: actions/cache@v4
      id: cache-featomic-windows
      with:
        path: featomic/featomic_install_${{ matrix.arch }}  # Adjust if featomic installs elsewhere
        key: featomic-windows-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('featomic/**') }}
        restore-keys: |
          featomic-windows-${{ runner.os }}-${{ matrix.arch }}-

    # Build featomic only if cache is missing
    - name: make_featomic
      if: steps.cache-featomic-windows.outputs.cache-hit != 'true'
      run: |
          cd featomic\featomic
          $buildDir = "build_${{ matrix.arch }}"
          if (-not (Test-Path $buildDir)) {
            mkdir $buildDir
          }
          cd $buildDir
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DFEATOMIC_FETCH_METATENSOR=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../featomic_install_${{ matrix.arch }} ..
          make install

    - name: make_Windows
      run: |
        cd Windows 
        if ("${{ matrix.arch }}" -eq "arm64") {
          cp -r ../featomic/featomic_install_arm ../featomic_install
          cp -r ../OpenBLAS/build_arm64 ../OpenBLAS/build
          msbuild NoSpherA2.sln -nologo -p:Configuration=Release -p:Platform=ARM64
        } else {
          cp -r ../featomic/featomic_install_x64 ../featomic_install
          cp -r ../OpenBLAS/build_x64 ../OpenBLAS/build
          msbuild NoSpherA2.sln -nologo -p:Configuration=Release -p:Platform=x64
        }

    - name: Upload .exe
      uses: actions/upload-artifact@v4
      with:
        name: executable_Windows_${{ matrix.arch }}
        path: ${{ matrix.arch == 'arm64' && 'Windows/ARM64/Release/NoSpherA2.exe' || 'Windows/x64/Release/NoSpherA2.exe' }}

  combine_all:
    runs-on: ubuntu-latest
    needs: [build_Linux, build_Mac, build_windows]

    steps:
    - name: gather executables Linux
      uses: actions/download-artifact@v4
      with:
        name: executable_Linux

    - name: gather executables Mac
      uses: actions/download-artifact@v4
      with:
        name: executable_MacOS

    - name: gather executables Windows
      uses: actions/download-artifact@v4
      with:
        pattern: executable_Windows_*
        path: windows_executables

    - name: Rename Windows executables by architecture
      run: |
        mkdir -p output
        cp windows_executables/executable_Windows_x86_64/NoSpherA2.exe output/NoSpherA2_x64.exe
        if [ -f "windows_executables/executable_Windows_arm64/NoSpherA2.exe" ]; then
          cp windows_executables/executable_Windows_arm64/NoSpherA2.exe output/NoSpherA2_arm64.exe
        fi

    - name: Archive all executable
      uses: actions/upload-artifact@v4
      with:
        name: executables
        path: |
          NoSpherA2
          output/NoSpherA2_x64.exe
          output/NoSpherA2_arm64.exe
          NoSpherA2_Mac