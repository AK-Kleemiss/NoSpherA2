name: BUILD_CMAKE
on:
  workflow_dispatch:

jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Install Compiler
      run: sudo apt update && sudo apt install -y build-essential

    # Cache IntelMKL
    - name: Cache IntelMKL Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-intelmkl-linux
      with:
        path: Lib/MKL
        key: intelmkl-linux-${{ runner.os }}-${{ hashFiles('Lib/MKL/**') }}
        restore-keys: |
          intelmkl-linux-${{ runner.os }}-

    - name: Build IntelMKL
      if: steps.cache-intelmkl-linux.outputs.cache-hit != 'true'
      run: |
          wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/47c7d946-fca1-441a-b0df-b094e3f045ea/intel-onemkl-2025.2.0.629_offline.sh 
          sh intel-onemkl-2025.2.0.629_offline.sh -a -s --install-dir=/home/runner/work/NoSpherA2/NoSpherA2/Lib/MKL --eula accept

    - name: Cache featomic Build
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache-featomic-linux
      with:
        path: build/_deps  # Adjust if featomic installs elsewhere
        key: featomic-linux-${{ runner.os }}-${{ hashFiles('build/_deps/metatensor-build/metatensor-core/target/release/libmetatensor.a', 'build/_deps/featomic-build/target/release/libfeatomic.a') }}
        restore-keys: |
          featomic-linux-${{ runner.os }}-

    - name: Build featomic
      if: steps.cache-featomic-linux.outputs.cache-hit != 'true'
      run: |
        mkdir -p build
        cd build 
        cmake -GNinja -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --target featomic_target

    - name: Build NoSpherA2
      run: |
        cd build
        cmake -GNinja -DCMAKE_BUILD_TYPE=Release ..
        ninja -j0

  build_windows:
    runs-on:  windows-2022
    steps:
    - name: Setup Windows
      shell: powershell
      run: |
        # Install Rust and Cargo for Windows
        Write-Host "Installing Rust toolchain"
        
        # Download and install rustup
        Invoke-WebRequest -Uri "https://win.rustup.rs/x86_64" -OutFile "rustup-init.exe"
        .\rustup-init.exe -y
        
        # Add cargo to PATH for this session
        $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
        
        # Set default toolchain
        & "$env:USERPROFILE\.cargo\bin\rustup.exe"
        & "$env:USERPROFILE\.cargo\bin\rustup.exe" component add rust-src
        
        # Verify versions
        Write-Host "Rust version: $(& "$env:USERPROFILE\.cargo\bin\rustc.exe" --version)"
        Write-Host "Cargo version: $(& "$env:USERPROFILE\.cargo\bin\cargo.exe" --version)"
        
        # Update PATH for subsequent steps
        echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        vcpkg install intel-mkl

    - name: Setup MSBuild (Windows)
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

    - name: Setup Cargo environment (Windows)
      shell: powershell
      run: |
        # Ensure cargo is in PATH
        $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
        
        # Verify we have the right version
        & "$env:USERPROFILE\.cargo\bin\cargo.exe" --version
        & "$env:USERPROFILE\.cargo\bin\rustc.exe" --version

    - name: Build NoSpherA2
      run: |
        cd build
        cmake -G "Visual Studio 17 2022" -DCMAKE_BUILD_TYPE=Release ..
        MSBuild -nologo NoSpherA2.sln 
