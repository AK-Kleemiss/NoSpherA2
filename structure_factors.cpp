/*
 * structrue_factors.cpp
 *
 *  Created on: May 27, 2019
 *      Author: florian
 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <cmath>
#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#include <regex>
#include <omp.h>
#ifdef _WIN32
#include <windows.h>
#include <io.h>
#include <omp.h>
#else
#include <unistd.h>
#include <sys/wait.h>
#include <sys/time.h>
#endif
#include <sstream>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <vector>
#include <complex>
#include <algorithm>

#include "convenience.h"
#include "structure_factors.h"
#include "wfn_class.h"
using namespace std;
# define M_PI           3.14159265358979323846  /* pi */

//#include "numgrid.h"
//#include "becke_partitioning.h"
#include "AtomGrid.h"

const unsigned int Thakkar_nex[86] = { 1, 5,
 8,  8, 15, 15, 15, 15, 15, 15,
17, 17, 20, 20, 20, 20, 20, 20,
22, 22, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31,
33, 33, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 38, 38,
30, 30, 32, 38, 36, 36, 36, 36, 36, 38, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 40, 40, 40, 40, 40, 40};
const unsigned int Thakkar_ns[86] =  { 1, 5,
 8,  8,  8,  8,  8,  8,  8,  8,
10, 10, 10, 10, 10, 10, 10, 10,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13};
const unsigned int Thakkar_np[86] = { 0, 0,
 0,  0,  7,  7,  7,  7,  7,  7,
 7,  7, 10, 10, 10, 10, 10, 10,
10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13,
10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12};
const unsigned int Thakkar_nd[86] =  { 0, 0,
 0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
 8,  8, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
 7,  7,  9,  9,  7,  7,  7,  7,  7,  9,  7,  7,  7,  7,  7,  7,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9};
const unsigned int Thakkar_nf[86] =  { 0, 0,
 0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6};
const unsigned int Thakkar_occ[1290] = {
	//	1s,2s,3s,4s,5s,6s,2p,3p,4p,5p,6p,3d,4d,5d,4f,
		1, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //H
		2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //He

		2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //Li
		2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, //Be
		2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, //B
		2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, //C
		2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, //N
		2, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, //O
		2, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, //F
		2, 2, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, //Ne

		2, 2, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, //Na
		2, 2, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, //Mg
		2, 2, 2, 0, 0, 0, 6, 1, 0, 0, 0, 0, 0, 0, 0, //Al
		2, 2, 2, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, //Si
		2, 2, 2, 0, 0, 0, 6, 3, 0, 0, 0, 0, 0, 0, 0, //P
		2, 2, 2, 0, 0, 0, 6, 4, 0, 0, 0, 0, 0, 0, 0, //S
		2, 2, 2, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0, 0, 0, //Cl
		2, 2, 2, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, //Ar

		2, 2, 2, 1, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, //K
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, //Ca
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 1, 0, 0, 0, //Sc
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 2, 0, 0, 0, //Ti
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 3, 0, 0, 0, //V
		2, 2, 2, 1, 0, 0, 6, 6, 0, 0, 0, 5, 0, 0, 0, //Cr
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 5, 0, 0, 0, //Mn
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 6, 0, 0, 0, //Fe
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 7, 0, 0, 0, //Co
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0, 8, 0, 0, 0, //Ni
		2, 2, 2, 1, 0, 0, 6, 6, 0, 0, 0,10, 0, 0, 0, //Cu
		2, 2, 2, 2, 0, 0, 6, 6, 0, 0, 0,10, 0, 0, 0, //Zn
		2, 2, 2, 2, 0, 0, 6, 6, 1, 0, 0,10, 0, 0, 0, //Ga
		2, 2, 2, 2, 0, 0, 6, 6, 2, 0, 0,10, 0, 0, 0, //Ge
		2, 2, 2, 2, 0, 0, 6, 6, 3, 0, 0,10, 0, 0, 0, //As
		2, 2, 2, 2, 0, 0, 6, 6, 4, 0, 0,10, 0, 0, 0, //Se
		2, 2, 2, 2, 0, 0, 6, 6, 5, 0, 0,10, 0, 0, 0, //Br
		2, 2, 2, 2, 0, 0, 6, 6, 6, 0, 0,10, 0, 0, 0, //Kr

		2, 2, 2, 2, 1, 0, 6, 6, 6, 0, 0,10, 0, 0, 0, //Rb
		2, 2, 2, 2, 2, 0, 6, 6, 6, 0, 0,10, 0, 0, 0, //Sr
		2, 2, 2, 2, 2, 0, 6, 6, 6, 0, 0,10, 1, 0, 0, //Y
		2, 2, 2, 2, 2, 0, 6, 6, 6, 0, 0,10, 2, 0, 0, //Zr
		2, 2, 2, 2, 1, 0, 6, 6, 6, 0, 0,10, 4, 0, 0, //Nb
		2, 2, 2, 2, 1, 0, 6, 6, 6, 0, 0,10, 5, 0, 0, //Mo
		2, 2, 2, 2, 2, 0, 6, 6, 6, 0, 0,10, 5, 0, 0, //Tc
		2, 2, 2, 2, 1, 0, 6, 6, 6, 0, 0,10, 7, 0, 0, //Ru
		2, 2, 2, 2, 1, 0, 6, 6, 6, 0, 0,10, 8, 0, 0, //Rh
		2, 2, 2, 2, 0, 0, 6, 6, 6, 0, 0,10,10, 0, 0, //Pd
		2, 2, 2, 2, 1, 0, 6, 6, 6, 0, 0,10,10, 0, 0, //Ag
		2, 2, 2, 2, 2, 0, 6, 6, 6, 0, 0,10,10, 0, 0, //Cd
		2, 2, 2, 2, 2, 0, 6, 6, 6, 1, 0,10,10, 0, 0, //In
		2, 2, 2, 2, 2, 0, 6, 6, 6, 2, 0,10,10, 0, 0, //Sn
		2, 2, 2, 2, 2, 0, 6, 6, 6, 3, 0,10,10, 0, 0, //Sb
		2, 2, 2, 2, 2, 0, 6, 6, 6, 4, 0,10,10, 0, 0, //Te
		2, 2, 2, 2, 2, 0, 6, 6, 6, 5, 0,10,10, 0, 0, //I
		2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 0,10,10, 0, 0, //Xe

		2, 2, 2, 2, 2, 1, 6, 6, 6, 6, 0,10,10, 0, 0, //Cs
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0, 0, //Ba
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 1, 0, //La
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 1, 1, //Ce
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0, 3, //Pr
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0, 4, //Nd
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0, 5, //Pm
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0, 6, //Sm
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0, 7, //Eu
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 1, 7, //Gd
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0, 9, //Tb
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0,10, //Dy
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0,11, //Ho
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0,12, //Er
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0,13, //Tm
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 0,14, //Yb
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 1,14, //Lu
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 2,14, //Hf
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 3,14, //Ta
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 4,14, //W
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 5,14, //Re
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 6,14, //Os
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10, 7,14, //Ir
		2, 2, 2, 2, 2, 1, 6, 6, 6, 6, 0,10,10, 9,14, //Pt
		2, 2, 2, 2, 2, 1, 6, 6, 6, 6, 0,10,10,10,14, //Au
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0,10,10,10,14, //Hg
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 1,10,10,10,14, //Tl
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 2,10,10,10,14, //Pb
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 3,10,10,10,14, //Bi
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 4,10,10,10,14, //Po
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 5,10,10,10,14, //At
		2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6,10,10,10,14, //Rn
};
const unsigned int Thakkar_n[] = {
		1,																					//H
		2,1,1,1,2,																			//He

		1,1,1,1,1,1,2,1,																	//Li
		1,1,1,1,1,1,2,1,																	//Be
		2,1,2,1,1,2,1,1,				3,2,3,2,2,2,2,										//B
		2,1,2,1,1,2,1,1,				3,2,3,2,2,2,2,										//C
		2,1,2,1,1,2,1,1,				3,2,3,2,2,2,2,										//N
		2,1,2,1,1,2,1,1,				3,2,3,2,2,2,2,										//O
		2,1,2,1,1,2,1,1,				3,2,3,2,2,2,2,										//F
		2,1,2,1,1,2,1,1,				3,2,3,2,2,2,2,										//Ne

		2,1,2,1,1,2,1,1,2,1,			3,2,3,2,2,2,2,										//Na
		2,1,2,1,1,2,1,1,2,1,			3,2,3,2,2,2,2,										//Mg
		1,1,1,2,1,2,1,1,2,1,			2,2,2,2,2,2,2,2,2,3,								//Al
		1,1,1,2,1,2,1,1,2,1,			2,2,2,2,2,2,2,2,2,3,								//Si
		2,1,2,2,1,2,2,1,1,1,			2,3,2,3,2,3,2,2,2,2,								//P
		2,1,2,2,1,2,2,1,1,1,			2,3,2,3,2,3,2,2,2,2,								//S
		2,1,2,2,1,2,2,1,1,1,			2,3,2,3,2,3,2,2,2,2,								//Cl
		2,1,2,2,1,2,2,1,1,1,			2,3,2,3,2,3,2,2,2,2,								//Ar

		1,3,1,3,2,2,1,1,2,1,2,1,		2,3,2,3,2,2,3,2,2,2,								//K
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,								//Ca
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Sc
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Ti
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//V
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Cr
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Mn
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Fe
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Co
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Ni
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Cu
		1,3,1,3,2,1,2,2,1,1,2,1,		2,3,2,3,2,2,3,2,2,2,		3,4,3,3,3,3,3,3,		//Zn
		1,3,1,3,2,1,1,1,1,1,2,1,		2,3,2,3,2,3,3,3,2,2,2,		3,4,3,3,3,3,3,3,		//Ga
		1,3,1,3,2,2,1,1,1,1,2,1,		2,3,2,3,2,3,3,3,2,2,2,		3,4,3,3,3,3,3,3,		//Ge
		1,3,1,4,2,3,3,2,2,2,2,1,		2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,3,3,3,		//As
		1,3,1,4,2,3,3,2,2,2,2,1,		2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,3,3,3,		//Se
		1,3,1,4,2,3,3,2,2,2,2,1,		2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,3,3,3,		//Br
		1,3,1,4,2,3,3,2,2,2,2,1,		2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,3,3,3,		//Kr

		1,3,1,4,2,3,4,4,2,2,2,2,2,3,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,3,3,3,		//Rb
		1,3,1,4,2,3,4,4,2,2,2,2,2,3,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,3,3,3,		//Sr
		1,3,1,4,3,2,4,4,2,2,2,2,2,3,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,4,3,4,3,3,3,3,3,	//Y
		1,3,1,4,3,2,4,4,2,2,2,2,2,3,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,4,3,4,3,3,3,3,3,	//Zr
		1,3,1,4,3,2,4,4,2,2,2,2,2,3,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,4,3,4,3,3,3,3,3,	//Nb
		1,3,1,4,3,2,4,4,2,2,2,2,2,3,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,4,3,3,3,3,3,	//Mo
		1,3,1,4,3,2,4,4,2,2,2,2,2,2,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,4,3,3,3,3,3,	//Tc
		1,3,1,4,3,2,4,4,2,2,2,2,2,2,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,4,3,4,3,3,3,3,3,	//Ru
		1,3,1,4,3,2,4,4,2,2,2,2,2,2,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,4,3,4,3,3,3,3,3,	//Rh
		1,3,1,2,3,4,2,4,4,2,2,3,2,1,	2,3,2,3,3,2,3,3,3,2,2,		3,4,3,3,3,3,3,3,3,3,3,	//Pd
		1,3,1,4,3,2,4,4,2,2,2,2,2,2,	2,3,3,2,3,3,3,3,2,2,2,		3,4,3,3,3,3,3,3,3,3,3,	//Ag
		1,3,1,4,3,2,4,4,2,2,2,2,2,2,	2,3,3,2,3,3,3,2,2,2,2,		3,4,3,3,3,3,3,3,3,3,3,	//Cd
		1,3,1,4,3,2,2,4,4,2,2,2,2,2,	2,3,3,2,3,3,3,3,2,3,2,2,2,	3,4,3,3,3,3,3,3,3,3,3,	//In
		1,3,1,4,3,2,2,4,4,2,2,2,2,2,	2,3,3,2,3,3,3,3,2,2,3,2,2,	3,4,3,3,3,3,3,3,3,3,3,	//Sn
		1,3,1,4,3,2,2,4,4,2,3,2,2,2,	2,3,3,2,3,3,3,3,2,2,3,2,2,	3,4,3,3,3,3,3,3,3,3,3,	//Sb
		1,3,1,4,4,3,2,4,4,2,3,2,2,2,	2,3,3,2,3,3,3,3,2,2,2,2,2,	3,4,3,3,3,3,3,3,3,3,3,	//Te
		1,3,1,4,3,4,2,4,4,2,3,2,2,2,	2,3,3,2,3,3,3,3,2,2,2,2,2,	3,4,3,3,3,3,3,3,3,3,3,	//I
		1,3,1,4,3,4,2,4,4,2,4,3,2,2,	2,3,3,2,3,3,3,3,2,2,2,2,2,	3,4,3,3,3,3,3,3,3,3,3,	//Xe

		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,						//Cs
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,						//Ba
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,					//La
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Ce
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Pr
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Nd
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Pm
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Sm
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Eu
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Gd
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Tb
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Dy
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Ho
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Er
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Tm
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,		4,4,4,4,4,4,	//Yb
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Lu
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Hf
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Ta
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//W
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Re
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Os
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Ir
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Pt
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Au
		1,1,2,2,3,3,3,3,3,3,3,3,3,		2,2,3,4,3,3,3,4,3,3,		3,3,4,4,4,4,4,4,4,	4,4,4,4,4,4,	//Hg
		1,1,2,2,3,3,3,4,3,3,3,3,3,		2,2,3,3,4,4,3,3,3,3,3,3,	3,3,4,4,4,4,4,4,4,	4,4,4,5,4,4,	//Tl
		1,1,2,2,3,3,3,4,3,3,3,3,3,		2,2,3,3,4,4,3,3,3,3,3,3,	3,3,4,4,4,4,4,4,4,	4,4,4,5,4,4,	//Pb
		1,1,2,2,3,3,3,4,3,3,3,3,3,		2,2,3,3,4,4,3,3,3,3,3,3,	3,3,4,4,4,4,4,4,4,	4,4,4,5,4,4,	//Bi
		1,1,2,2,3,3,3,4,3,3,3,3,3,		2,2,3,3,4,4,3,3,3,3,3,3,	3,3,4,4,4,4,4,4,4,	4,4,4,5,4,4,	//Po
		1,1,2,2,3,3,3,4,3,3,3,3,3,		2,2,3,3,4,4,3,3,3,3,3,3,	3,3,4,4,4,4,4,4,4,	4,4,4,5,4,4,	//At
		1,1,2,2,3,3,3,4,3,3,3,3,3,		2,2,3,3,4,4,3,3,3,3,3,3,	3,3,4,4,4,4,4,4,4,	4,4,4,5,4,4		//Rn



};
const double Thakkar_z[] = {
		1.24,																				//H
		6.437494,3.384356,2.177906,1.455077,1.354958,										//He

		10.335672,5.553473,3.453336,2.416445,1.555772,0.889955,0.637402,0.626614,			//Li
		12.683501,8.105927,5.152556,3.472467,2.349757,1.406429,0.821620,0.786473,			//Be
		16.109305,7.628062,6.135799,4.167618,2.488602,1.642523,0.991698,0.787218,			//B
		12.135370,5.508493,3.930298,2.034395,1.301082,0.919434,0.787218,
		18.890445,9.238787,7.517513,5.100368,3.276630,2.270243,1.192963,0.930957,			//C
		15.083626,6.565676,4.729110,2.494494,1.601933,1.123315,0.930957,
		21.666277,10.957976,8.981511,6.085323,3.948957,2.648617,1.406521,1.065447,			//N
		17.587523,7.584576,5.559658,2.932934,1.874157,1.306305,1.065447,
		24.975698,12.554759,10.357096,7.071190,4.804646,2.785958,1.606267,1.124194,			//O
		20.797000,8.661006,6.427925,3.402194,2.135366,1.425500,1.124194,
		27.647598,14.291092,11.832995,8.080680,5.633450,3.182099,1.812284,1.208319,			//F
		22.939589,9.684811,7.284146,3.846095,2.385087,1.560088,1.208319,
		29.214419,16.354484,13.516489,9.144899,6.491668,3.574219,2.016153,1.304155,			//Ne
		25.731219,10.674843,8.124569,4.295590,2.648660,1.710436,1.304155,

		33.255324,17.591424,14.711825,9.845052,6.517050,5.163833,2.473455,1.097424,0.620107,0.603494,		//Na
		28.733630,11.509522,8.818515,4.565004,2.734448,1.904519,0.603494,
		35.988252,19.193253,16.093419,10.773377,7.853579,6.023976,2.905152,1.694174,0.750076,0.711410,		//Mg
		32.077221,12.495413,9.644163,5.042248,3.070882,2.086080,0.711410,
		39.496080,28.634791,13.079059,11.239687,5.819769,4.390969,3.270281,1.825554,0.707141,0.647998,		//Al
		32.912282,19.759796,11.877702,7.686895,5.052741,3.511684,2.582466,1.012303,0.703112,0.647998,
		40.744005,32.345799,14.154495,12.216360,6.257945,4.879641,3.586780,2.070236,0.975003,0.770863,		//Si
		35.986281,20.811651,11.079502,8.569582,5.733707,4.091940,3.057286,1.252393,0.870155,0.770863,
		46.439666,23.444385,19.934302,12.335517,11.479363,6.165177,4.690649,2.631803,1.110511,0.885109,		//P
		37.277335,18.380101,10.933923,9.369244,5.290342,3.672062,3.427525,1.537478,1.075424,0.885109,
		48.422248,25.147985,21.424545,12.574205,11.445276,6.468338,5.067763,2.950475,1.274078,0.935274,		//S
		40.400452,19.793965,11.660972,10.088606,5.687485,3.866997,3.641627,1.835517,1.197266,0.935274,
		52.549831,26.643633,22.754804,14.248239,13.203531,6.587648,5.115487,3.103725,1.427728,1.006380,		//Cl
		44.251905,21.017294,12.370142,10.884681,6.217866,4.148675,3.863174,2.015464,1.296207,1.006380,
		56.024242,28.780167,24.513979,15.086379,14.036870,6.944507,5.309126,3.317218,1.567689,1.087214,		//Ar
		47.041050,22.401098,13.130477,11.806433,6.780130,4.415953,4.077204,2.200943,1.412360,1.087214,

		48.538420,27.178567,20.222095,13.592814,7.647812,6.078224,6.077278,3.343549,2.301557,1.828604,0.555573,0.543093,		//K
		45.863372,23.956536,13.445654,9.280990,7.576272,5.560868,2.249040,1.893851,1.290943,0.543093,
		55.025070,29.333512,21.316999,14.563031,8.075590,6.763191,6.263443,2.577548,1.816117,1.500414,0.648569,0.625347,		//Ca
		47.329816,25.506017,14.174024,10.249231,8.135533,5.982999,2.330080,2.056882,1.208793,0.625347,
		57.498657,30.833372,22.361741,15.415630,8.610080,7.168035,6.645788,2.786909,1.961794,1.588713,0.676641,0.648242,		//Sc
		49.842595,26.926323,14.480714,10.991611,8.492563,6.351088,2.504892,2.207803,1.218695,0.648242,
		18.112701,13.806782,6.306244,4.161485,2.673453,1.714319,1.087439,0.648242,
		60.289820,32.299759,23.400426,16.255875,9.147991,7.563319,7.020328,2.979739,2.113198,1.621186,0.695769,0.664512,		//Ti
		51.299773,28.672833,15.156461,11.712761,8.887041,6.711089,2.704253,2.368233,1.251387,0.664512,
		19.104138,14.658566,6.716801,4.401956,2.774678,1.786630,1.173680,0.664512,
		62.875206,33.885936,24.457516,17.072833,9.664612,7.931088,7.398658,3.165850,2.266794,1.653671,0.712906,0.679086,		//V
		52.631581,30.669617,15.795601,12.334590,9.301379,7.202975,2.875851,2.512619,1.286363,0.679086,
		20.118919,15.491232,6.994400,4.606157,2.904122,1.867151,1.237729,0.679086,
		64.134378,35.194142,25.454647,17.708856,10.162320,8.462113,7.730720,3.367156,2.316006,1.537736,0.699029,0.666408,		//Cr
		54.119911,32.347673,16.361604,12.870877,9.705787,7.719275,3.078646,2.646262,1.486704,0.666408,
		21.010126,16.248352,7.319431,4.807319,3.023447,1.852525,1.147532,0.666408,
		65.615997,36.493146,26.490049,18.586295,10.770334,8.946835,8.222221,3.543574,2.463906,1.753364,0.743164,0.704089,		//Mn
		52.083296,33.806616,17.420626,13.771396,10.071962,7.859711,3.390377,2.922745,1.760084,0.704089,
		22.242214,17.176523,7.574462,5.005562,3.189753,2.065915,1.380034,0.704089,
		67.039851,37.739652,27.502599,19.356262,11.285074,9.367472,8.606144,3.732769,2.599956,1.821430,0.761362,0.718583,		//Fe
		53.958628,35.552297,18.139253,14.420001,10.398009,8.220976,3.526362,3.043306,1.742634,0.718583,
		23.292198,18.020857,7.891984,5.208309,3.309121,2.122232,1.404987,0.718583,
		67.880489,38.904351,28.510966,20.112028,11.806173,9.803070,8.992577,3.918210,2.729885,1.879157,0.777145,0.731328,		//Co
		55.920505,37.045603,18.633841,14.903522,10.432654,8.406347,3.670304,3.170172,1.761172,0.731328,
		24.172555,18.786883,8.199042,5.406704,3.442626,2.205849,1.453653,0.731328,
		69.226787,40.178379,29.523561,20.825217,12.335507,10.337108,9.378273,4.099637,2.864936,1.935115,0.792121,0.743304,		//Ni
		57.991635,38.657440,19.286668,15.489265,10.586878,8.440193,3.827276,3.303890,1.779584,0.743304,
		25.058793,19.533825,8.512016,5.601915,3.574636,2.291306,1.503687,0.743304,
		70.189946,41.413051,30.509673,21.267318,12.847734,11.192606,9.712223,4.300548,2.962479,1.808143,0.734806,0.690642,		//Cu
		60.062765,40.162787,19.924473,16.048602,10.881331,8.741628,3.948760,3.385906,1.798822,0.690642,
		26.287704,20.461389,8.922963,5.814383,3.626597,2.200138,1.349920,0.690642,
		72.171558,42.777264,31.527672,22.081772,13.336452,11.561129,10.027114,4.420748,3.230588,2.015129,0.818486,0.764862,		//Zn
		62.133895,41.854760,20.683667,16.687144,11.270401,9.043064,4.115574,3.555618,1.819362,0.764862,
		26.840425,21.076327,9.261571,6.082216,3.860363,2.445106,1.590058,0.764862,
		74.163075,44.111552,32.554208,22.941369,14.638429,11.507175,10.651417,6.419062,3.758419,2.128908,0.715996,0.645754,		//Ga
		65.541676,44.152054,22.005072,17.824611,12.176581,10.192581,6.855667,4.730498,3.006855,0.905335,0.645754,
		28.295386,22.128835,9.633176,6.261006,3.907149,2.459171,1.565609,0.645754,
		76.555432,45.858462,33.610460,23.935761,15.346717,12.026209,11.159105,6.438987,4.028666,2.450056,0.836054,0.758093,		//Ge
		69.491987,46.214210,22.646499,18.407375,12.503901,10.373220,7.108357,5.035482,3.291863,1.061577,0.758093,
		28.893923,22.744772,9.975534,6.535857,4.150742,2.687443,1.649905,0.758093,
		54.206035,39.953981,33.575117,22.687547,14.286912,13.481918,6.115775,5.148299,3.641403,1.809534,1.278811,0.859631,		//As
		50.718595,41.198849,24.082973,19.047410,13.627410,6.013469,5.462364,4.087596,1.841936,1.059631,0.859631,
		31.332509,24.312793,10.554143,6.987846,4.485271,2.935044,1.733242,0.859631,
		56.828412,41.684096,34.728365,23.727323,14.086853,14.072696,6.512291,5.392830,3.949425,1.993854,1.411000,0.897613,		//Se
		52.491766,42.761369,25.120026,19.850208,14.194446,6.300767,5.743780,4.284076,1.319656,1.131217,0.897613,
		31.897983,24.931347,10.860020,7.194093,4.709428,3.150997,1.826977,0.897613,
		58.508039,43.044755,35.835678,24.607114,14.767152,14.754419,6.850776,5.703885,4.364524,2.073131,1.496008,0.956123,		//Br
		53.964914,44.074427,25.967586,20.612559,14.804998,7.130435,6.280038,4.641256,1.483284,1.265163,0.956123,
		32.846999,25.721481,11.166998,7.375640,4.935945,3.345405,1.916340,0.956123,
		60.777807,44.499723,36.979014,25.529164,15.429937,15.427470,7.202997,6.034988,4.750173,2.188877,1.592153,1.023901,		//Kr
		55.423460,45.348388,26.746410,21.299661,15.365217,8.075067,6.762676,4.956675,1.641161,1.395473,1.023901,
		33.868162,26.569736,11.514091,7.536640,5.124374,3.510570,2.025551,1.023901,

		61.238288,45.419154,37.904166,26.159754,15.837093,15.837028,8.856530,6.318787,5.309624,2.093831,1.544223,1.011039,0.525141,0.525102,	//Rb
		58.153213,47.226370,27.305393,21.943275,15.955742,9.305393,7.290585,5.311460,1.664002,1.475167,0.525102,
		35.762583,27.863840,11.927910,7.697962,5.232765,3.513352,1.532313,0.525102,
		63.847506,47.274210,39.188703,27.364721,16.734172,16.730882,9.349486,6.986214,5.834851,4.333246,2.286303,1.569080,0.645727,0.597422,	//Sr
		59.272426,48.379341,28.210855,22.663072,16.507289,9.969782,7.589743,5.520342,1.729602,1.558351,0.597422,
		36.575295,28.607388,12.288934,7.865863,5.425616,3.736432,1.567766,0.597422,
		65.677600,48.695568,40.299003,28.271256,17.344941,17.267598,9.716539,7.333781,6.106382,4.377257,2.487865,1.782123,0.696713,0.626327,	//Y
		59.900446,49.386205,29.527649,23.603873,17.192929,10.613393,7.969468,5.813073,1.867462,1.678620,0.626327,
		40.810898,31.088920,13.030122,11.548644,8.178911,6.740759,4.532441,2.474758,1.534569,0.951074,0.626327,
		67.592359,50.153491,41.425649,29.178763,17.919326,17.912024,9.994816,7.642912,6.238086,4.544157,2.661086,1.940158,0.730087,0.643883,	//Zr
		60.343183,50.196004,30.901959,24.531890,17.884138,11.439539,8.353774,6.122179,2.017179,1.812481,0.643883,
		42.479679, 32.217117, 13.438794, 12.539994, 8.374347, 6.870380, 4.690315, 2.537352, 1.602841, 1.043033, 0.643884,
		69.224980,51.473096,42.500584,30.023131,18.478494,18.468216,10.314928,7.800341,6.414258,4.657761,2.765297,1.901811,0.740290,0.656651,	//Nb
		61.188113,51.173261,31.939090,25.360587,18.624521,12.519467,8.779237,6.486416,2.181603,1.942735,0.656651,
		43.214432,33.016274,14.004307,13.637693,8.606973,6.975387,4.590202,2.663261,1.622145,1.012512,0.656651,
		70.970218,52.859118,43.594250,30.932320,19.096160,19.034201,10.703418,8.196596,6.754842,5.299063,2.917595,2.061635,0.766969,0.667426,	//Mo
		67.532635,55.500761,33.311169,26.716574,19.618106,13.014445,9.180252,6.831291,2.310849,2.054575,0.667426,
		44.896919,34.167168,16.927667,14.083737,8.794719,7.132066,4.695625,2.791184,1.721238,1.089989,0.667426,
		74.164305,54.792743,44.805211,32.289572,20.180572,20.132338,11.529383,8.882526,7.851249,5.980539,3.063907,2.193010,0.862897,0.680109,	//Tc
		66.630255,55.413772,34.081682,27.355959,20.428471,14.321864,9.543653,7.107659,2.425902,2.175861,0.680109,
		47.460462,35.858566,19.502703,14.581944,9.140374,7.498466,5.110192,3.054737,1.987935,1.308653,0.680109,
		75.587991,56.101603,45.917485,33.095826,20.646878,20.626049,11.711121,9.098967,7.950497,6.803507,3.167893,2.231223,0.817674,0.666974,	//Ru
		68.619796,56.514248,33.820701,27.555949,21.389947,15.693563,9.931706,7.447787,2.569516,2.280173,0.666974,
		48.181841,36.523583,17.717806,16.634643,9.655157,7.941762,5.347505,3.199141,1.968988,1.217727,0.666974,
		77.024171,57.422340,46.951633,33.967751,21.231867,21.219242,12.051536,9.357721,8.131190,6.958132,3.298265,2.284775,0.825117,0.665761,	//Rh
		70.788924,58.080359,34.589353,28.182221,22.750752,16.701338,10.300968,7.763781,2.693156,2.388176,0.665761,
		48.021841,36.790557,19.119353,17.773712,10.020134,8.170279,5.403773,3.223903,1.964992,1.227727,0.665761,
		95.004581,65.455382,48.666335,36.523802,35.930115,32.224650,19.506212,16.996951,12.296306,7.791419,3.447402,2.734925,0.998788,0.819759,	//Pd
		72.015150,59.578992,36.479116,30.006145,24.034672,17.033197,10.715216,8.150158,2.806387,2.467078,0.819759,
		48.681034,37.530522,20.726814,16.600467,10.405856,7.629025,5.600123,3.476758,2.106938,1.250135,0.819759,
		81.922545,60.961344,49.339744,36.344474,22.846089,22.824480,13.009377,9.794366,8.903696,4.446178,3.589317,2.519920,0.826013,0.663294,	//Ag
		58.031368,51.182468,33.533569,23.909244,19.551930,10.860119,8.237653,3.358709,2.956246,1.903964,0.663294,
		53.296212,40.214567,21.872645,17.024065,10.708021,7.859216,5.770205,3.610289,2.243262,1.397570,0.663294,
		83.516231,62.584694,50.503156,37.421392,23.543997,23.541419,13.502173,10.284092,9.381965,5.195588,3.843181,2.816065,0.968171,0.727812,	//Cd
		60.437885,53.012348,34.580438,24.629908,19.895718,11.175126,8.476139,4.269777,3.164214,2.145405,0.727812,
		51.167417,39.515824,20.925917,17.638488,10.839796,7.941688,6.801382,3.849955,2.417483,1.559278,0.727812,
		78.931670,59.837425,50.067547,35.479347,23.025101,23.015102,17.915983,13.827518,10.265558,3.763681,2.140831,1.711542,0.959206,0.628144,	//In
		60.501482,53.257212,34.960599,24.975942,20.116604,11.258653,9.424572,4.754638,3.625842,2.688752,2.453862,0.824472,0.628144,
		55.317221,41.994493,21.613292,19.210472,11.680393,8.644928,6.351845,3.983040,2.589850,1.716691,0.628144,
		80.455846,61.077522,51.100199,36.186771,23.454426,23.445269,18.620156,14.151788,10.492947,3.907598,2.390486,1.849969,1.078565,0.728067,	//Sn
		61.677788,54.522439,35.964661,25.612520,20.778057,11.733191,9.474605,4.444605,3.619249,2.253177,2.247672,0.955341,0.728067,
		55.746534,42.546716,22.054380,19.421508,11.855840,9.048137,7.315308,4.324680,2.880503,1.913171,0.728067,
		81.669053,62.093595,52.030871,36.759376,23.815342,23.814678,19.636087,14.494462,10.724371,4.044819,2.384963,2.360123,1.204949,0.818182,	//Sb
		62.951697,55.728392,36.852535,26.182019,21.277839,12.070084,10.015351,4.633217,3.778525,2.345676,2.323959,1.067563,0.818182,
		56.325199,43.270728,23.861190,19.352127,12.040675,9.494720,7.952780,4.413147,2.960090,1.974195,0.818182,
		85.845242,64.575316,53.318205,38.055728,23.183837,23.181322,20.472540,14.954391,11.061281,4.106440,2.453937,2.078816,1.341043,0.848330,	//Te
		64.520612,57.342579,38.066026,26.860842,21.909185,12.422323,10.518869,4.865646,3.990216,2.979535,1.573641,1.082552,0.848330,
		57.659379,44.352216,24.129056,19.832277,12.290430,9.774302,8.292981,4.494608,3.020391,1.937052,0.848330,
		90.775507,67.802436,55.080861,39.986811,23.497728,23.479689,19.940176,15.302284,11.327208,4.191130,2.668132,2.302372,1.436633,0.897975,	//I
		65.960053,58.378207,38.587026,27.259158,22.203480,12.897653,11.549105,5.203779,4.277522,3.458100,1.408252,0.963088,0.897975,
		58.400845,45.117174,24.132009,20.588554,12.624386,10.217388,8.680013,4.627159,3.093797,1.795536,0.897975,
		91.946915,68.927732,56.137679,40.832514,24.369639,24.363016,20.633849,15.760476,11.686818,4.107994,3.311303,2.975274,1.535005,0.956336,	//Xe
		66.836641,59.325786,39.440533,27.876421,22.662415,13.533766,12.290050,5.472844,4.492251,3.729958,1.571562,1.115472,0.956336,
		59.845045,46.464727,25.986788,22.364559,13.517132,10.630383,8.943390,4.862982,3.343632,2.100705,0.956336,

		72.432562,54.152961,44.781947,26.827713,24.294310,13.933326,11.953711,5.980958,4.692356,2.500713,1.798027,0.588383,0.390475,			//Cs
		45.866789,27.025862,23.215568,18.118816,14.399860,10.231415,5.932205,4.962671,2.159681,1.445617,
		32.852137,18.354403,14.523221,10.312620,7.919345,5.157647,3.330606,
		73.408386,55.121608,45.589826,27.288659,24.735741,14.154755,12.256065,6.196423,5.035677,2.516335,1.862701,0.807625,0.594012,			//Ba
		46.966097,27.608616,23.743389,18.568484,14.716154,10.415319,6.176644,5.202768,2.231317,1.527034,
		33.450500,18.748779,14.846820,10.453672,8.414827,5.487808,3.614287,
		74.686053,56.122632,46.442201,27.670889,25.126010,14.473285,12.560364,6.313598,5.148584,2.721675,2.038687,0.883413,0.635998,			//La
		47.922059,28.166523,24.260607,19.029118,15.044910,10.575140,6.469568,5.487832,2.366537,1.608197,
		34.153392,19.107963,15.073064,10.165703,8.440305,5.562649,3.651979,2.027158,1.145554,
		76.035150,57.131650,47.312853,28.060473,25.534699,14.844127,12.885759,6.492214,5.307661,2.782600,2.081217,0.887910,0.637379,			//Ce
		48.894058,28.719833,24.767523,19.481959,15.389248,10.857138,6.613655,5.604644,2.429195,1.653439,
		34.797518,19.516555,15.424922,10.345200,8.740820,5.744808,3.775249,2.115986,1.206276,
		17.373634,10.034791,6.709780,4.338091,2.673664,1.640385,
		77.213125,58.122933,48.167912,28.433887,25.933524,15.251111,13.207237,6.750698,5.502002,2.702642,1.995310,0.841438,0.611222,			//Pr
		49.831272,29.252859,25.247558,19.914715,15.733819,11.166918,6.703596,5.617816,2.408498,1.640987,
		35.619597,20.021927,15.934469,11.161212,9.030128,5.920706,3.876835,
		17.604838,10.118322,6.763135,4.400819,2.713060,1.655041,
		78.361307,59.111063,49.001140,28.814173,26.316115,15.655808,13.516398,6.921522,5.627842,2.762145,2.037392,0.850786,0.615797,			//Nd
		51.237254,30.065452,26.130120,20.429427,15.899519,11.386007,6.861663,5.735242,2.462338,1.673724,
		36.662542,20.546525,16.415952,11.670571,9.170058,6.047923,3.955445,
		18.028978,10.369350,6.872231,4.452468,2.749827,1.693471,
		79.583280,60.106967,49.855683,29.205148,26.715753,16.060435,13.827036,7.090212,5.751454,2.821153,2.078318,0.860376,0.620681,			//Pm
		52.707402,30.902387,26.993566,20.940024,16.041755,11.552711,7.065332,5.888728,2.506045,1.698957,
		37.170325,20.912933,16.725468,11.821550,9.400657,6.192424,4.043059,
		18.396071,10.595185,7.014692,4.559395,2.824301,1.742054,
		80.553966,61.076422,50.677558,29.587248,27.096630,16.477257,14.129532,7.261204,5.877176,2.877709,2.119230,0.868757,0.624307,			//Sm
		54.405756,31.824093,27.897446,21.470139,16.141744,11.669037,7.244475,6.017516,2.554320,1.728467,
		38.244436,21.430627,17.191602,12.265523,9.551774,6.314693,4.118198,
		18.738213,10.788462,7.107954,4.631628,2.885482,1.789754,
		81.559162,62.048937,51.485471,29.994154,27.481309,16.892730,14.428066,7.444558,6.018308,2.917280,2.138866,0.880123,0.630366,			//Eu
		55.791864,32.553763,28.575313,21.951895,16.334643,11.814935,7.399224,6.128648,2.600679,1.754749,
		39.027658,21.857710,17.561048,12.522999,9.746916,6.446731,4.199686,
		19.096807,11.001211,7.210563,4.694780,2.936420,1.834357,
		82.305311,62.993249,52.253869,30.386501,27.824867,17.377886,14.723820,7.512262,6.078866,3.063994,2.257096,0.960339,0.672792,			//Gd
		57.230537,33.299220,29.261658,22.463074,16.519189,11.855231,7.661230,6.362660,2.703895,1.822405,
		39.152619,21.988128,17.542793,11.762997,9.278723,6.234138,3.901196,2.198174,1.221245,
		19.447696,11.191024,7.273950,4.772530,3.057018,1.968402,
		82.955621,63.922571,53.013606,30.826568,28.227966,17.761599,15.016489,7.765122,6.248189,3.045055,2.229203,0.897151,0.638579,			//Tb
		58.126052,33.821695,29.746277,22.877678,16.799271,12.072159,7.731577,6.372903,2.702424,1.813396,
		40.387469,22.687984,18.290794,13.044187,10.138627,6.712861,4.356704,
		19.867646,11.479325,7.441491,4.767002,2.941008,1.819700,
		84.058350,64.905516,53.852289,31.254498,28.652782,18.158666,15.320686,7.950956,6.399325,3.084138,2.248827,0.909579,0.645319,			//Dy
		59.112075,34.352966,30.233389,23.326779,17.106021,12.284446,7.875620,6.482252,2.749806,1.839803,
		41.304364,23.145620,18.693305,13.360685,10.318990,6.838979,4.431722,
		20.228223,11.715340,7.580714,4.847854,2.987440,1.843671,
		84.799047,65.843872,54.615194,31.642320,28.972112,18.655894,15.595011,8.081194,6.468844,3.164079,2.308228,0.914799,0.647160,			//Ho
		60.023728,34.882305,30.725141,23.756830,17.381020,12.417609,8.055475,6.614935,2.795860,1.865851,
		42.149351,23.588381,19.082168,13.653646,10.485149,6.956310,4.500166,
		20.613942,11.971861,7.727813,4.914573,3.010806,1.850632,
		85.931072,66.831633,55.449578,32.064174,29.377976,19.035249,15.883516,8.283918,6.636024,3.191019,2.316595,0.928801,0.654626,			//Er
		61.043988,35.420505,31.217644,24.193456,17.664179,12.614001,8.181173,6.710377,2.843177,1.891215,
		42.909407,24.019173,19.467034,13.956931,10.665832,7.079897,4.572507,
		21.070163,12.313465,7.999007,5.097240,3.114795,1.896657,
		86.510536,67.746514,56.182403,32.500079,29.732223,19.530983,16.170154,8.413489,6.712172,3.262439,2.366025,0.935103,0.657290,			//Tm
		62.010689,35.956011,31.711451,24.625796,17.939410,12.772710,8.329778,6.821091,2.888972,1.916143,
		43.554777,24.422389,19.822464,14.199502,10.868032,7.213810,4.653229,
		21.379996,12.494944,8.057008,5.103958,3.112255,1.898043,
		87.352555,68.693248,56.955480,32.933882,30.102689,19.971201,16.452439,8.583422,6.835797,3.307811,2.392500,0.943977,0.661442,			//Yb
		63.020058,36.488320,32.197498,25.055410,18.221343,12.943284,8.468270,6.924058,2.933562,1.939912,
		44.380596,24.846977,20.192372,14.457411,11.032791,7.328845,4.721620,
		21.813503,12.812141,8.292375,5.253542,3.193592,1.935523,
		88.158050,69.634798,57.735491,33.352021,30.451377,20.515313,16.747706,8.641112,6.885200,3.414551,2.490551,1.042682,0.714282,			//Lu
		63.903538,37.008976,32.687216,25.543805,18.549954,13.120080,8.701682,7.137705,3.013129,2.003340,
		36.177588,22.585179,18.486867,11.757966,8.137374,5.658663,3.305766,1.885996,1.068929,
		22.312950,13.203800,8.660479,5.596255,3.496657,2.185855,
		89.099347,70.595058,58.530393,33.759966,30.773278,21.051322,17.029709,8.701558,6.910123,3.575255,2.615632,1.108804,0.745946,			//Hf
		64.972139,37.551689,33.182576,26.023296,18.862732,13.291252,8.935252,7.356536,3.121242,2.075235,
		37.087770,23.120798,18.932868,12.064253,8.406485,5.915269,3.542840,2.089406,1.221170,
		22.572535,13.324140,8.629242,5.567960,3.525177,2.245564,
		90.555103,71.629551,59.404889,34.177342,31.149791,21.516317,17.314435,8.785183,6.954670,3.759950,2.747928,1.161882,0.770646,			//Ta
		65.874762,38.086014,33.684651,26.517276,19.188001,13.458863,9.170764,7.578027,3.241023,2.154956,
		37.575996,23.498893,19.288357,12.337771,8.617462,6.109997,3.734351,2.242696,1.328980,
		23.099473,13.699995,8.927752,5.810732,3.709864,2.355401,
		91.755953,72.626980,60.237715,34.604318,31.511899,21.938006,17.586218,8.892417,7.033853,3.956290,2.878493,1.206903,0.791160,			//W
		66.950836,38.643624,34.200713,27.033162,19.511957,13.606262,9.466379,7.833344,3.362330,2.236298,
		38.504169,24.042791,19.742726,12.667783,8.915037,6.384653,3.919845,2.382645,1.423574,
		23.482851,13.966058,9.123084,6.021852,3.920505,2.515460,
		92.339350,73.536027,60.962814,35.060807,31.839262,22.365935,17.850392,9.008373,7.134456,4.172463,3.011416,1.244577,0.807746,			//Re
		67.926990,39.178277,34.698572,27.543233,19.862335,13.806206,9.729731,8.070798,3.490619,2.324200,
		40.024199,24.780256,20.314071,13.074404,9.341177,6.767067,4.115949,2.531393,1.525586,
		24.113043,14.483275,9.678188,6.537670,4.313282,2.781860,
		94.092123,74.612868,61.895874,35.501252,32.311264,22.659050,18.132147,9.140779,7.303703,4.343471,3.121391,1.290204,0.828961,			//Os
		68.850122,39.720013,35.210952,28.070224,20.211146,14.001487,10.007660,8.311499,3.613318,2.404538,
		40.756046,25.241086,20.717645,13.383221,9.576954,6.964384,4.270338,2.617713,1.568701,
		24.530200,14.751454,9.837503,6.692180,4.453285,2.851061,
		95.032583,75.575655,62.684408,35.958786,32.687170,23.004698,18.395302,9.285849,7.566137,4.491834,3.226227,1.331963,0.847928,			//Ir
		70.152737,40.345105,35.784105,28.613630,20.480824,14.033605,10.321772,8.552420,3.740117,2.489419,
		41.611811,25.711049,21.115165,13.665803,9.750244,7.096141,4.480287,2.743124,1.639544,
		24.853136,14.911967,9.790906,6.623491,4.425274,2.775013,
		96.326260,76.585788,63.520880,36.406532,33.061689,23.311950,18.635661,9.434858,7.795365,4.597687,3.229778,1.315052,0.814405,			//Pt
		71.132349,40.899509,36.308364,29.162881,20.835297,14.228098,10.647981,8.812642,3.881013,2.545074,
		42.292119,26.205977,21.565757,14.108561,10.150504,7.418553,4.495700,2.690771,1.553534,
		25.359777,15.274529,10.107702,6.937964,4.649549,2.821879,
		97.761363,77.616148,64.400892,36.850898,33.489537,23.594782,18.894147,9.575477,8.034410,4.758171,3.330133,1.328966,0.813779,			//Au
		72.250241,41.486656,36.856869,29.730268,21.210778,14.475122,10.912089,9.042813,4.012662,2.634539,
		43.833656,26.923095,22.141347,14.590183,10.636243,7.807086,4.671112,2.813334,1.632420,
		25.916349,15.690312,10.503734,7.320309,4.940163,3.007791,
		98.407393,78.536315,65.150893,37.330051,33.891651,23.937157,19.164856,9.688704,8.234789,5.007613,3.538904,1.429284,0.889673,			//Hg
		73.351279,42.080191,37.417209,30.282585,21.476918,14.469768,11.281557,9.281333,4.128865,2.755971,
		45.619372,27.639683,22.702681,14.977821,11.080054,8.180613,4.964891,3.064010,1.838315,
		26.289706,15.957370,10.811471,7.904799,5.582508,3.629353,
		103.436743,79.972778,66.565494,37.786246,34.935192,23.854182,19.646005,13.028118,9.620853,4.644696,3.495830,1.538362,1.003827,			//Tl
		75.656351,42.807966,38.003252,22.085285,22.083330,12.487931,12.486752,8.716768,4.389847,3.082472,1.207403,0.752814,
		47.191938,28.279271,23.220471,15.344936,11.487604,8.518873,5.232079,3.290478,2.031593,
		26.929334,16.499440,11.444569,7.430050,6.673895,3.999648,
		104.713731,80.980311,67.443613,38.232020,35.410237,23.936443,19.871630,13.328775,9.876587,4.707823,3.603001,1.658677,1.106132,			//Pb
		76.554960,43.341456,38.511710,22.531112,22.530723,12.764238,12.761651,8.920439,4.517615,3.250700,1.317867,0.862335,
		48.110533,28.750592,23.625068,15.597300,11.717172,8.758467,5.493821,3.502864,2.194676,
		27.357639,16.730728,11.435776,7.517999,6.778528,4.158712,
		106.328367,82.011128,68.287892,38.691586,35.822829,24.123508,20.086799,13.611590,10.116856,4.757245,3.651788,1.800290,1.214185,			//Bi
		77.331767,43.879146,39.038245,23.017341,23.016667,13.120480,13.118232,9.144629,4.600151,3.378836,1.434936,0.962057,
		49.029127,29.255646,24.066237,15.927546,12.051763,9.043747,5.731630,3.700914,2.334962,
		27.764767,16.963291,11.441274,7.601823,6.885683,4.337840,
		107.662632,83.017194,69.115164,39.156661,36.235025,24.316654,20.292194,13.862770,10.340302,4.835940,3.714369,1.941823,1.311138,			//Po
		78.287503,44.424063,39.555229,23.458904,23.448994,13.364416,13.363421,9.337108,4.710557,3.530875,1.603240,1.031749,
		49.998233,29.763139,24.506491,16.257625,12.359076,9.303793,5.946018,3.885400,2.463053,
		28.178564,17.204040,11.459603,7.676215,6.997082,4.545544,
		108.903934,84.018911,69.951611,39.611892,36.654114,24.547370,20.496500,14.102471,10.565212,4.939179,3.843808,2.082126,1.407323,			//At
		79.295777,45.026511,40.133432,23.914315,23.911162,13.577284,13.501981,9.503258,4.822702,3.674635,1.751098,1.110812,
		50.967339,30.252536,24.929837,16.556179,12.631391,9.553285,6.184273,4.084597,2.594201,
		28.618551,17.482248,11.555443,7.769969,7.135223,4.780973,
		110.161562,85.019704,70.796388,40.050427,37.065897,24.761481,20.686346,14.330607,10.794813,5.057300,4.066550,2.209589,1.500547,			//Rn
		80.413094,45.595893,40.661311,24.299025,24.298213,13.697119,13.696884,9.640567,4.991556,3.885248,1.877545,1.190797,
		52.058235,30.769357,25.372633,16.878426,12.915741,9.793952,6.388020,4.266585,2.711132,
		29.091519,17.792862,11.693545,7.686730,7.106004,4.841159
};
const double Thakkar_c[] {
	//Sorry, i gave up with labelling...
	//believe me when i say it's the c values in the Thakkar Slater Basis with:
	//S in one block, below P if present, D afterwards and F is present in the end
	1.0,							//H
	0.098380109,					//He
	0.994709459,
	1.158109106,
	2.600492086,
	0.067123842,
	0.094833558,0.018129359,		//Li
	-1.347244281,-0.156674816,
	-1.888816785,-0.514095617,
	-6.089476327,-0.205560673,
	-0.03018989,-0.562090899,
	0.000688104,-1.016437599,
	-0.000188358,0.223071967,
	-0.000266959,0.990041326,
	-0.225104651,0.040129825,		//Be
	1.449387202,-0.143039375,
	1.987589199,-0.858610913,
	11.24048657,0.17977144,
	0.22753708,-2.591955339,
	-0.011770219,-0.855131866,
	-0.00029315,0.171983474,
	0.001715637,1.555497592,		
	-0.664979058,-0.149015926,      //B
	-9.902407656,0.51507232,
	-16.24854754,3.833159735,
	-10.92636447,-3.381477417,
	-0.00903494,-4.223398334,
	-0.003437966,-0.478994815,
	0.000930689,2.840734039,
	-0.000324505,0.041804043,
	0.157235692,
	0.935419882,
	0.482603167,
	1.123020634,
	0.750905127,
	0.383677074,
	0.084403659,
	-0.983212032,-0.245534371,
	-12.58167449,0.702765449,
	-26.08954894,5.622633788,
	-15.0470989,-4.378093737,
	-0.048397243,-5.612572439,
	-0.009937299,-0.199179098,
	-0.000529795,3.359110189,
	-0.000118209,0.031711794,
	0.310204404,
	1.753392235,
	1.580000002,
	2.282963089,
	1.369348022,
	0.588613375,
	0.091916873,
	-1.376589517,-0.328504317,
	-14.29546233,1.356089195,
	-35.78534117,9.411097747,
	-20.67287884,-6.203737993,
	-0.161423346,-7.059640932,
	-0.015861896,0.167419992,
	-0.001305447,4.108037875,
	-6.4006E-05,0.057473879,
	0.512722434,
	2.933423227,
	3.791262711,
	3.936972565,
	2.134393858,
	0.791790326,
	0.097832588,
	-1.71200607,-0.444919996,
	-16.48443838,1.462814599,
	-47.63949679,11.49805486,
	-26.2515816,-6.744440399,
	-0.418532028,-9.235006593,
	-0.021446877,1.12553846,
	-0.000226377,4.692364817,
	-0.000281303,0.033982796,
	0.831928944,
	4.379463994,
	7.609174403,
	6.233614973,
	2.964684557,
	0.961893531,
	0.100909335,
	-2.179884302,-0.611685652,
	-17.93493632,1.305178424,
	-59.7212187,12.4167864,
	-32.99074384,-6.81925617,
	-0.780798223,-11.90654982,
	-0.032678879,2.197744291,
	-0.000815353,5.418130472,
	-0.000272021,0.035438964,
	1.155491599,
	6.322325169,
	13.60737856,
	9.045385081,
	3.974743478,
	1.156008095,
	0.105376366,
	-3.011745754,-0.895959738,
	-17.74146568,0.609441125,
	-69.17856739,10.1756683,
	-41.63244688,-5.779166379,
	-1.382700948,-15.32466646,
	-0.048090609,3.508888198,
	-0.001181748,6.188795983,
	-0.000302038,0.03802106,
	1.490298652,
	8.72871746,
	21.96967239,
	12.37296505,
	5.218724166,
	1.415530358,
	0.114475915,
	3.314601632,-0.793118409,0.131818194,
	25.39866027,3.850411705,-0.363834696,
	110.6115632,31.14009635,-3.384707641,
	44.44961634,-14.64745573,1.663436693,
	0.433538488,-16.79951078,2.77210019,
	0.148213344,-1.722158874,-0.541972602,
	0.008584579,10.42273219,-0.982931948,
	-0.000132209,0.012528312,-0.824492485,
	-5.83919E-06,0.000380491,0.313981541,
	3.75059E-05,-0.002124427,0.315636686,
	2.176865031,
	13.58923529,
	40.29027951,
	17.19409497,
	6.985393657,
	1.077710839,
	0.000207456,
	-3.911629743,1.169900272,0.274531812,
	-29.09153224,-1.589306517,0.120125035,
	-140.2695392,-20.04935475,-1.146719481,
	-50.5267207,8.959533087,0.578220325,
	-0.652942679,27.524416,5.577891642,
	-0.295294951,15.28582544,0.432076996,
	-0.011603786,-14.58700001,-0.553138234,
	0.000276084,-0.023629886,-2.754064726,
	4.27608E-06,-8.2821E-05,0.303294133,
	-2.07614E-05,0.000432149,0.9389016,
	2.805933096,
	18.24273225,
	60.27789131,
	22.32832259,
	10.73361494,
	0.660342049,
	0.000330793,
	0.843142474,-0.340404377,-0.088663004,
	-3.258690941,0.949345722,0.24446158,
	-88.21322725,27.47167088,5.617423043,
	-34.82645858,87.44667771,18.3950498,
	-0.133032016,11.34218328,11.60180308,
	-0.1768904,-6.523176982,16.749506,
	0.050155022,-15.83538025,-10.08519635,
	-0.001677262,-0.010028054,-4.06766156,
	-2.12671E-05,9.30315E-05,-0.329496421,
	8.95113E-05,-0.000536337,2.221205689,
	-0.663034808,0.129162625,
	3.630277912,-0.707858098,
	1.977827534,-0.116273442,
	27.66305554,-4.912985087,
	20.11030285,-4.536669876,
	13.43196306,-0.599396354,
	1.232059344,-2.09698795,
	0.002800875,0.375088822,
	-0.000416964,0.356697919,
	2.46672E-05,0.002132178,
	1.421560024,0.566127307,-0.168579438,
	-3.729928785,-1.179376859,0.34798148,
	-99.17107228,-31.06996378,7.018832647,
	-44.88616539,-106.8737498,25.10956282,
	-0.133748377,-10.27760061,19.61868706,
	-0.209553976,19.45727163,32.33122741,
	0.051465951,14.92165333,-18.18700504,
	-0.002107147,0.007816759,-4.863904193,
	0.000227207,0.002475204,3.201866177,
	-7.45843E-05,-0.000409469,-0.044369399,
	-0.691617802,0.166849431,
	4.55996582,-1.053633651,
	1.287389147,0.474124956,
	32.88772741,-7.399829274,
	24.41752421,-6.655036842,
	20.39993396,-0.990193773,
	2.334041978,-4.109113665,
	0.005434787,0.802186686,
	-0.00064169,0.562673557,
	4.12573E-05,0.003983816,
	-5.181063219,-1.411937307,0.875672657,
	-46.76958262,9.740198907,5.242478358,
	-276.2899515,89.02228011,34.62682075,
	119.2529145,51.38565956,38.88362305,
	-66.04690601,-40.62096164,8.670139956,
	-0.250907717,47.93270234,12.38716273,
	0.022702879,35.21262733,-10.6656045,
	-0.001459325,0.246859953,-9.306281668,
	0.000184434,0.0025582,3.903578086,
	-5.8623E-05,-0.000126073,-0.096022921,
	-0.813129284,0.228264004,
	-42.01227418,10.8448462,
	56.40183984,-14.50560867,
	84.19435698,-27.45950435,
	38.15980791,-6.825611542,
	-5.600294185,0.005260772,
	11.7567311,-6.219313414,
	0.007165278,1.302332426,
	-0.000827063,0.807393174,
	0.000211489,0.140880653,
	-6.237936051,-1.816179509,0.708385369,
	-55.13585931,8.580401388,0.872716998,
	-357.927483,86.79043073,1.823037693,
	175.6149928,85.0388382,11.5627701,
	-69.33064289,-43.28378086,15.50135605,
	-0.074853313,63.70107865,17.96579039,
	-0.03114977,37.61008938,-19.10447569,
	0.00234345,0.320444519,-11.11541521,
	4.80331E-05,0.005418247,4.703886461,
	3.9798E-06,-0.000266646,0.016338335,
	-0.926007325,0.279119931,
	-50.69107889,14.13193492,
	65.92020267,-18.92546267,
	98.18533398,-38.35974613,
	52.63133695,-6.86517233,
	-5.380181321,4.022894326,
	10.76238879,-10.52577053,
	0.01343387,2.121434144,
	0.000252469,1.074459281,
	0.000257784,0.154937154,
	-5.834276776,-1.668917525,0.929231087,
	-49.91204619,12.26452731,1.033575639,
	-329.5191967,121.7106828,1.913418232,
	183.0334187,67.17734348,20.10674813,
	-86.57682347,-50.64031711,14.26480954,
	-0.226763043,99.2531333,5.854964932,
	0.028642076,22.43881467,-30.6830443,
	-0.000277772,0.106126425,-9.408853879,
	0.000180831,0.011254884,5.628811648,
	-1.63553E-05,-0.00082362,0.055725471,
	-0.929582142,0.297827288,
	-58.91534392,17.52924397,
	73.68580475,-22.97058831,
	102.6372782,-47.11790722,
	68.27675143,-7.88124776,
	-8.353913615,10.27567077,
	12.93376257,-15.3580873,
	0.014634416,3.058757374,
	0.001805248,1.253933633,
	0.000273944,0.151705656,
	-7.367821695,-1.969454547,0.973876284,
	-52.810208,8.622168044,-3.467147869,
	-392.0395496,98.49963363,-39.55418107,
	211.0198077,51.52475961,-9.486511404,
	-96.05881384,-51.01211152,18.42858844,
	-0.347734643,127.6438254,-8.239767251,
	0.109003887,17.64608321,-39.75288897,
	-0.009609969,0.10686484,-8.324189682,
	0.000731363,0.013935931,6.506251086,
	-0.000119712,-0.000702399,0.065374586,
	-1.074292046,0.354008146,
	-70.25244763,21.95935785,
	80.27175634,-26.14818182,
	101.3397729,-52.61782953,
	87.61939392,-11.02181656,
	-12.32735655,17.56891933,
	15.63043112,-19.84444634,
	0.009877517,4.059476135,
	-0.000246363,1.515301877,
	5.89193E-05,0.160308354,
	-1.472978417,1.26250462,-0.287507748,0.090763444,
	709.7655916,-454.267454,110.4082751,-34.95519194,
	148.9197142,-29.11735132,9.539333225,-1.875624126,
	-320.3295147,335.2209444,-184.9917451,26.98791017,
	-40.31006727,194.7478665,-14.37942831,5.171873334,
	-5.428590128,45.60928623,-67.79006482,8.636606603,
	14.19849842,-18.86844767,8.704377031,-3.634902442,
	0.003324687,0.240904679,-11.11988033,9.304403235,
	0.020648702,-0.056671649,1.441893146,5.485509756,
	-0.016874513,0.058912678,8.463033823,-6.409262039,
	-7.81033E-06,2.27137E-05,7.49951E-05,0.388091999,
	5.27505E-05,-0.000161133,0.000745711,-0.429683776,
	1.610337904,0.582287659,
	90.59297591,31.32505807,
	-66.32354061,-11.75919552,
	50.46622198,63.68008668,
	-121.5137794,-32.20562303,
	-27.52209555,-29.78470534,
	0.051729261,-2.446848054,
	-0.062778438,7.828410987,
	0.001141102,0.230789175,
	-2.3844E-06,0.000270391,
	1.162712591,0.976995316,-0.263187909,0.043592538,
	-746.8052445,-466.5897285,137.6177732,-23.87964627,
	-159.2346796,-29.76384124,10.11015089,-2.444430776,
	437.8033628,417.9941082,-210.2103778,60.6408392,
	51.23640977,248.9604862,-33.29130917,2.352262001,
	-16.75052927,-22.20323961,6.935532455,-0.824419729,
	0.648176339,34.56669894,-81.43085837,26.57350665,
	-0.150057719,-0.380077659,13.8869905,-1.5461937,
	0.132313155,0.398204311,0.291781865,3.774631094,
	-0.037398243,-0.123763802,0.422876597,-5.118057755,
	-7.15832E-05,-0.000340705,0.000922249,0.359804549,
	0.000491649,0.002215933,-0.006255843,0.392209194,
	-1.993078624,0.822144932,
	-107.2339686,41.6936581,
	76.47289558,-10.785433,
	-46.03039272,94.61817482,
	140.0813726,-44.30685593,
	33.56342848,-36.88177053,
	-0.042761516,-2.938189801,
	0.055306851,10.34013418,
	0.000245234,0.052032271,
	-1.63545E-05,0.000336624,
	1.180252169,1.042214549,-0.319413646,0.066010409,
	-827.4481144,-544.2955577,181.6285911,-38.50814377,
	-171.2584156,-31.22673464,10.86837207,-2.630229071,
	515.8688565,459.5425352,-230.1642546,63.40312016,
	59.38903454,296.8039586,-42.95594893,4.409186621,
	-18.19107617,-25.17653021,7.668523342,-1.016292287,
	1.299528739,42.17406196,-99.43063242,31.13431263,
	-0.171288788,-0.324705643,16.30396263,-2.175869314,
	0.134285633,0.320473311,0.858720447,3.585037432,
	-0.034851561,-0.093685623,0.351050353,-5.143021291,
	-9.07151E-05,-0.000349988,0.000844485,0.35873375,
	0.000555325,0.00204343,-0.005190307,0.530259881,
	-2.223685282,0.937674213,
	-123.8843117,49.58533216,
	111.7501664,-12.17351964,
	46.87010474,120.1690462,
	139.442124,-55.80863818,
	36.73922644,-41.88631064,
	-0.042523289,-4.49268451,
	0.05504378,13.02670758,
	5.67974E-07,0.037557637,
	-5.07874E-06,0.000240927,
	15.03378413,
	99.39326225,
	11.73842401,
	12.17066357,
	4.325677753,
	1.062179393,
	0.116956409,
	0.000367537,
	1.210208303,1.127255761,-0.38967097,0.088944599,
	-925.4219341,-644.860134,240.3731088,-55.6520917,
	-183.7261027,-32.72440201,11.59399578,-2.762441582,
	596.1639712,495.5434965,-243.4716375,63.55853656,
	67.78863806,349.8004518,-54.69995644,6.798396186,
	-19.51487684,-28.18377768,8.067336706,-1.108911433,
	2.286438206,51.25440103,-119.410462,35.59511752,
	-0.163605673,-0.136432743,17.97143498,-2.650558789,
	0.109382567,0.151773257,1.853723506,2.57881523,
	-0.021463841,-0.0378762,0.208498272,-4.395430505,
	-8.89166E-05,-0.000251969,0.000714596,0.348849443,
	0.000508651,0.001361494,-0.004135727,0.644578372,
	-2.685796703,1.203602575,
	-144.5811089,60.82135435,
	136.9866803,-12.16502095,
	110.083022,152.8360716,
	152.8270843,-70.58961059,
	39.36928165,-46.34364969,
	-0.053848836,-6.323647677,
	0.066176693,15.94566884,
	-0.000110241,0.034148355,
	9.14427E-07,0.000155037,
	19.36413279,
	133.8057228,
	17.15242164,
	17.42567315,
	5.605679499,
	1.128576022,
	0.105806981,
	0.000104204,
	1.287187246,1.177204479,-0.4538908,0.108187943,
	-1050.193475,-732.242714,302.2217822,-72.6760969,
	-196.4307939,-34.15018678,12.25542211,-2.867251624,
	693.9208926,550.1906019,-257.1041974,63.6656965,
	76.88189232,407.870066,-68.06537642,9.30863217,
	-20.95633436,-31.40212821,8.476430258,-1.18243296,
	3.752115106,60.2768476,-141.1624326,40.38528192,
	-0.119177346,-0.034536638,19.51837306,-3.04228202,
	0.06996971,0.078765325,2.833680086,1.874125329,
	-0.010266087,-0.018217647,0.148200311,-3.957290766,
	-5.59923E-05,-0.00018864,0.000642871,0.339254166,
	0.000305548,0.000955706,-0.003526564,0.742062999,
	-3.749961118,1.5965181,
	-179.5613866,75.27081833,
	177.4674698,-17.71744615,
	248.5442051,161.1815115,
	147.1504085,-75.39853559,
	49.61694268,-56.61011923,
	-0.099178205,-8.414593087,
	0.108712294,18.90726794,
	3.68406E-06,0.031288754,
	-5.00249E-06,0.000105447,
	24.22149086,
	176.485143,
	24.29440987,
	22.36234431,
	6.854192086,
	1.23411079,
	0.101314094,
	4.87259E-05,
	1.445308057,1.398774685,-0.596099691,0.14699615,
	-1207.594053,-890.288215,401.2119693,-99.37887996,
	-210.7590565,-36.50479124,13.13595701,-2.87128168,
	750.5502466,590.2765525,-252.2445104,51.47941668,
	77.73902908,465.7329934,-83.21443796,13.12058262,
	-21.15113255,-33.912596,7.565524,-1.442642856,
	3.389248141,64.12359703,-163.061368,40.06033433,
	-0.015953682,0.218530135,17.9477558,-4.473229016,
	0.007889459,-0.061614898,4.882000966,0.579127309,
	-0.001152516,0.006379648,0.015430448,-2.294702942,
	-1.74074E-05,0.00011737,-4.25514E-05,0.347478535,
	9.00888E-05,-0.000188991,-0.000337506,0.599907182,
	4.687518029,1.726718425,
	215.1948543,83.32794111,
	-226.7640118,-25.98929731,
	-428.5363088,152.7740262,
	-132.0100558,-73.60509529,
	-63.80790331,-70.37342308,
	0.187504934,-11.73553921,
	-0.177588235,22.0111415,
	0.000107051,0.086200002,
	-1.25586E-07,9.79989E-05,
	27.18379507,
	205.5679326,
	30.2440682,
	25.87813923,
	7.438320279,
	1.203831988,
	0.113755312,
	0.000298875,
	1.537457007,1.55063855,-0.680337747,0.162749546,
	-1329.903254,-1027.439824,474.6029259,-114.0334417,
	-224.1697411,-37.63122276,13.85037151,-3.116084087,
	841.2797892,588.1570687,-262.3090822,59.80180228,
	87.60539558,529.3815451,-91.38670081,12.79353324,
	-22.5654988,-37.75902868,9.806534255,-1.439704963,
	4.128189928,84.49569224,-191.3752601,51.00672964,
	-0.044751855,0.33939462,23.84218684,-4.152164799,
	0.021795205,-0.108863864,4.170781621,1.451723683,
	-0.0033493,0.013025262,0.033056983,-3.832688604,
	-2.58942E-05,4.12877E-05,0.000319196,0.326059563,
	0.000126077,-0.000239274,-0.001512924,0.881970185,
	7.385240672,3.562638292,
	284.0198815,131.1502178,
	-233.3614465,-26.29715623,
	-431.9183761,195.9640908,
	-191.8539531,-106.9016105,
	-50.84132729,-64.52083551,
	0.187657741,-12.92875727,
	-0.177179314,26.39668573,
	0.000638775,0.191046405,
	-2.44967E-06,0.000272298,
	35.38551507,
	287.7480127,
	44.20178046,
	33.45973127,
	9.519043798,
	1.585403821,
	0.118488701,
	3.64175E-05,
	1.666923815,1.718411385,-0.817104449,0.200241638,
	-1483.866557,-1172.953095,584.234952,-143.545645,
	-238.564677,-39.42687839,14.63302317,-3.26151055,
	920.6679358,625.8745203,-250.8335722,52.58580403,
	94.50976743,601.0131243,-109.9444259,16.38087363,
	-23.3239646,-41.11009423,10.4973079,-1.596980879,
	4.637531254,94.73926391,-217.1626123,56.40052407,
	-0.042486614,0.34876139,26.26290424,-4.800968777,
	0.018551623,-0.099386088,4.880358744,1.330556147,
	-0.002429693,0.010842666,0.035467033,-3.877530014,
	-1.68205E-05,3.59189E-05,0.000287993,0.321745679,
	7.99189E-05,-0.000196508,-0.001277362,0.953341522,
	8.739813734,3.963662346,
	332.8304478,149.847699,
	-276.7349454,-30.45626978,
	-611.6352071,216.7392133,
	-202.3283298,-126.9917507,
	-52.66571734,-66.17881994,
	0.23525748,-16.60763025,
	-0.211004729,30.31905252,
	0.000393,0.133875972,
	-1.81955E-06,0.000208591,
	41.28180249,
	351.4421971,
	57.15184853,
	40.05425874,
	10.71668197,
	1.682179447,
	0.123624504,
	4.21068E-05,
	1.847698866,1.938970872,-0.980167393,0.243392017,
	-1655.008959,-1334.422885,703.6261925,-175.004503,
	-253.4513601,-41.29184312,15.42374841,-3.396906939,
	994.6154189,654.7025714,-230.6783305,42.5764031,
	100.8548561,677.587044,-130.2411055,20.26841366,
	-23.94156682,-44.54250271,11.20265057,-1.757699199,
	5.014715136,106.1560883,-244.64968,61.76386913,
	-0.044133229,0.371260216,28.65408388,-5.466870803,
	0.017453503,-0.096615801,5.61726215,1.179909298,
	-0.001957239,0.010025248,0.03402474,-3.874388075,
	-1.18039E-05,4.47565E-05,0.00026153,0.315613021,
	5.60372E-05,-0.000220271,-0.001091099,1.018292718,
	9.658640913,4.128616706,
	375.8113376,161.9939442,
	-349.409889,-42.20917468,
	-930.2655879,202.445119,
	-200.8924269,-159.1736459,
	-40.25701361,-49.38664885,
	0.269994807,-20.51871069,
	-0.2340572,34.35803409,
	0.00027948,0.113043583,
	-1.69005E-06,0.000174445,
	48.06567324,
	422.5708259,
	72.53308066,
	46.99609421,
	12.08618405,
	1.867391137,
	0.138489924,
	5.22117E-05,
	2.034149045,2.139208731,-1.124207755,0.279928768,
	-1856.753959,-1510.583312,826.3025751,-206.1769495,
	-268.6782116,-43.08635087,16.12829779,-3.503978379,
	1075.809948,683.7010896,-208.0227214,31.94093447,
	104.8597162,756.747434,-151.8652171,24.35747726,
	-24.51354843,-48.12194225,11.9398797,-1.918762409,
	4.44911381,116.8202065,-273.6638077,67.30834642,
	-0.038382966,0.405355241,30.97946228,-6.099968049,
	0.014290668,-0.097591635,6.412212445,1.010380762,
	-0.001420251,0.00915141,0.041722416,-3.861261137,
	-8.76975E-06,4.43646E-05,0.000277537,0.309700541,
	4.01166E-05,-0.000208273,-0.001115959,1.077012597,
	10.70511463,4.802515514,
	423.6821552,188.1248117,
	-407.2819791,-54.67234526,
	-1202.395463,179.5957697,
	-220.3801993,-194.7378427,
	-25.52512749,-30.85718289,
	0.294369167,-25.04839478,
	-0.247489964,38.78956881,
	0.000224888,0.099537631,
	-2.25512E-06,0.000131512,
	55.60407166,
	503.3146598,
	90.49007395,
	54.55372599,
	13.53714357,
	2.074076282,
	0.154628601,
	6.03566E-05,
	2.376534917,2.472857088,1.2854717,0.291671529,
	-2158.92652,-1757.86409,-952.9255676,-217.4806364,
	-285.5464955,-45.77897229,-16.84062872,-3.046673603,
	1119.883891,721.6618863,179.8870851,0.830455267,
	92.77090922,825.8441572,175.6225102,28.11938381,
	-23.87763512,-51.06747553,-11.35800042,-2.050966634,
	1.576947169,116.7991818,302.0796289,57.49263498,
	0.005527051,0.370197253,-29.16734068,-6.924991571,
	-0.001419555,-0.065669705,-8.373620082,0.025311314,
	0.000113788,0.004958028,-0.03671839,-1.959070273,
	1.17577E-06,4.17934E-05,-0.000166425,0.355050717,
	-5.62478E-06,-0.000198934,0.000164726,0.615229502,
	11.56400452,4.99105276,
	469.3704834,202.4867797,
	-464.1654076,-63.64146274,
	-1476.903149,169.6269299,
	-232.3504577,-222.4116839,
	-22.89221904,-22.48651578,
	0.401284848,-31.80492723,
	-0.31051919,42.82828815,
	9.62146E-05,0.112540037,
	-3.84487E-06,4.0188E-05,
	59.5860354,
	569.188665,
	105.4227685,
	62.70019083,
	14.14400905,
	1.852772914,
	0.135081093,
	0.00013532,
	2.424174163,2.543365689,-1.441211945,0.353895829,
	-2322.912474,-1900.203666,1122.54639,-276.9129089,
	-300.7530697,-47.2722603,17.3066955,-3.62737563,
	1239.328677,793.6531679,-103.9314323,-4.151454642,
	102.5168189,926.8430555,-221.3413708,38.29803223,
	-24.90152884,-54.97415415,12.10929234,-1.892387476,
	1.916778578,123.4836412,-327.8400524,77.0810122,
	-0.005859705,0.458769796,31.76401156,-6.230578838,
	0.00252239,-0.106206309,9.60278162,0.064014348,
	-0.000149322,0.00542309,0.112807592,-3.636710654,
	-1.53964E-06,3.20526E-05,0.000657638,0.293840692,
	6.15407E-06,-0.000138868,-0.002653073,1.189940067,
	13.2298767,5.330603708,
	538.0594965,222.5680647,
	-514.0714223,-70.39024354,
	-1746.626272,176.128134,
	-253.2198998,-254.7170904,
	-22.76718125,-18.00515876,
	0.432608031,-35.04784531,
	-0.334699426,47.78441406,
	0.0001227,0.079312581,
	-1.47695E-06,7.59745E-05,
	71.36503721,
	682.4632846,
	131.8448601,
	75.33918047,
	17.71362662,
	2.512696367,
	0.171451944,
	5.34925E-05,
	-2.570676796,2.730857104,1.358083761,0.300050673,
	2572.967196,-2170.667656,-1106.690292,-243.7064609,
	315.5256344,-43.99698954,-18.81513265,-4.866261196,
	-1261.717697,317.6465468,315.1349864,142.9833744,
	-110.5310717,909.4296398,71.15881674,-14.94096303,
	-56.50894531,435.0980854,450.6775849,131.1629396,
	26.73051107,-65.59107197,-36.2927797,-6.844911314,
	-0.001772694,1.56549075,46.80527435,9.348467765,
	-0.002585184,0.020448307,-33.1052602,-3.547590423,
	0.000254091,0.002617941,-0.099903589,-5.993400867,
	4.00715E-06,3.51628E-05,-0.000181324,-0.398501526,
	-1.35957E-05,-0.000124748,0.000601636,2.263030924,
	-14.17950084,6.738375082,-0.843300815,
	-589.150091,283.0486153,-36.4842865,
	470.9613028,-45.88654247,6.859060819,
	1563.768806,381.6874777,-61.35775203,
	393.2494276,-286.5397964,49.62915915,
	69.17839379,81.012114,-0.969406911,
	0.971018842,151.4551769,-25.44324063,
	0.078641428,44.64421728,-1.738450257,
	0.004715832,3.912878643,-3.755000559,
	5.13296E-06,0.001374191,0.507357802,
	-1.7799E-06,-0.000181085,0.196633427,
	82.15359595,
	841.7261396,
	165.9983046,
	90.85931746,
	20.1505776,
	2.202968939,
	0.043214403,
	-6.75158E-07,
	-2.421834129,2.605367305,1.295315532,0.256946446,
	2627.990036,-2228.244325,-1135.655616,-225.1099525,
	329.4785087,-42.98794871,-19.01231982,-5.55469418,
	-1461.287868,231.9201465,358.1756808,233.2525169,
	-128.3144543,993.2738029,67.47074578,-31.5748179,
	-64.36727821,514.769693,512.2198682,170.4088173,
	29.33540367,-71.98579178,-39.0960754,-7.275478448,
	0.022064229,1.537283965,54.6543789,9.976916824,
	-0.00665652,-0.006946004,-40.37082005,-1.80530942,
	0.000793076,0.005865231,-0.184848726,-9.505909165,
	1.11438E-05,7.49806E-05,-9.66039E-05,-0.569977413,
	-3.40591E-05,-0.000243958,5.30689E-05,2.955657093,
	-13.45255324,6.819245197,-0.97152164,
	-605.1794767,303.3960408,-45.32268345,
	528.3972906,-58.53235528,9.699404275,
	1889.331245,357.2621404,-76.14419586,
	411.9726045,-309.9570294,67.45241295,
	62.48244005,110.3159232,0.136420239,
	0.865030868,160.4463888,-30.27575735,
	0.116576152,54.51102096,0.8921881,
	0.003916182,5.501068575,-7.109261701,
	6.4356E-06,0.002355163,0.953530157,
	-3.06233E-06,-0.000275667,0.225789357,
	96.03060823,
	987.6345218,
	201.0061795,
	106.2182769,
	25.34657665,
	2.663718877,
	0.029668911,
	-6.28579E-06,
	-7.813235466,37.73792411,15.69208142,4.37291515,
	3374.689614,-8946.189402,-3765.049688,-1056.666391,
	381.217173,-154.2283443,-61.06419346,-16.97876929,
	-3239.330195,14720.70662,5511.956581,1401.371407,
	47.08187069,707.9918977,373.7933066,107.9258424,
	-66.47233035,733.7253116,1389.607642,467.7290063,
	-1.780814173,-9.85205591,-32.57703077,3.311161849,
	0.711909292,4.730995117,-71.94952501,-17.57547982,
	-0.003795337,-0.141166681,-3.842172799,-14.74843841,
	-0.00048369,0.002786174,0.024862968,2.471794769,
	0.000301096,-0.001216981,-0.010806555,1.529336446,
	-0.000168968,0.000610038,0.004943584,0.110862965,
	-130.2859572,80.20656525,-20.04952594,
	-2659.818039,1607.889291,-404.5603203,
	1136.021574,-539.2385599,125.8508253,
	5564.900284,-2551.177445,576.7133153,
	1214.147761,-1180.272015,304.1537868,
	2.057182422,66.04486866,-19.35061119,
	-0.958452671,69.91573029,-12.76679323,
	0.09310637,10.57652737,-10.03155352,
	-0.001061362,0.010538881,0.77407186,
	0.000515161,-0.002163277,0.912126083,
	-0.000142087,0.000465265,0.156501628,
	103.3571029,
	1212.683423,
	235.2433411,
	132.1637737,
	34.72144671,
	3.381622336,
	0.023765368,
	-6.25794E-06,
	9.957788188,38.08791221,-15.93121018,4.70116313,
	-4149.190604,-10106.20903,4282.988396,-1273.188719,
	-400.6123445,-160.3278894,64.03351801,-18.87235915,
	4391.810865,18256.97881,-6837.070109,1834.214098,
	-57.30971309,745.7687182,-392.8359409,121.035543,
	132.2436331,428.8608,-1346.935672,496.708419,
	3.587601905,-18.69829287,70.83550202,-3.005978012,
	-1.327726177,8.021071352,69.87155301,-14.30235927,
	0.033359533,-0.384021195,5.589733316,-21.91047305,
	0.000417435,0.007481416,-0.028823093,3.332027208,
	-0.000284001,-0.002560927,0.011566497,1.996692317,
	0.000116848,0.000854502,-0.003333648,0.109282261,
	-149.1955837,-91.27663316,-24.42065438,
	-3105.119582,-1873.889825,-503.0900812,
	1239.441528,595.3176333,150.6579176,
	6393.736622,2962.029066,729.9950149,
	1436.67556,1380.963395,386.0885233,
	2.550035293,-71.78008979,-24.25537942,
	-1.334064529,-90.33746154,-18.80552277,
	0.133448521,-11.23188747,-16.68074951,
	0.00068347,0.004254325,-0.564366078,
	-0.00105091,-0.010398146,2.372665315,
	-8.55877E-05,0.000306476,0.10172739,
	118.8606529,
	1396.049653,
	283.1317238,
	148.560229,
	41.10424231,
	3.747035016,
	0.02212612,
	-1.72763E-05,
	11.86029272,40.29526129,-16.92724092,5.20720447,
	-4839.154595,-11186.98187,4774.665186,-1483.278456,
	-420.0237829,-168.3788099,67.83309329,-20.88641087,
	5201.44489,21723.62735,-7954.557859,2163.164582,
	-64.90967946,797.926683,-414.5560901,135.0329723,
	150.4845956,715.8241423,-1641.873629,635.2527074,
	3.629832422,-23.53884016,125.3268695,-11.23578192,
	-1.312669634,9.964042241,62.46695163,-4.562721395,
	0.036936827,-0.556690093,10.33124613,-34.42114324,
	0.000595225,0.005218402,-0.015911017,4.438049054,
	-0.000351803,-0.002026106,0.010282884,2.076532137,
	0.000130514,0.000624895,-0.002660946,0.07866535,
	-156.5052774,-97.60119189,-28.29471151,
	-3314.782977,-2041.191941,-593.441369,
	1334.426573,648.4113342,176.8652815,
	7152.237782,3331.355846,881.8443799,
	1695.490346,1612.74087,490.0455817,
	4.02610309,-76.90786855,-29.23415381,
	-1.514180366,-150.6256821,-36.09058678,
	0.156448975,-17.94334522,-25.41192888,
	0.00092957,0.00934614,-0.847719205,
	-0.001378525,-0.020026343,3.134415233,
	-5.12992E-05,0.000250509,0.144023242,
	134.8306903,
	1628.324194,
	339.3135306,
	164.9071545,
	47.96236648,
	3.99139488,
	0.019620158,
	-7.56757E-07,
	14.09713259,41.69570557,-17.59291519,5.607713288,
	-5810.005778,-12591.11351,5405.315934,-1741.940934,
	-440.0215743,-175.7094257,71.36588435,-22.80580797,
	6266.164226,25706.73456,-9300.198201,2574.066559,
	-74.45499944,849.3603939,-434.5202139,147.8791353,
	177.0427179,1054.215489,-1964.657046,790.5869736,
	4.038712833,-28.95138952,193.3972578,-21.71024354,
	-1.415622733,12.16357363,50.71391653,9.954993054,
	0.03613307,-0.761787097,17.5951922,-51.32869783,
	0.000888081,0.004489515,-0.004111364,5.5611344,
	-0.000494552,-0.002004801,0.009271649,2.294974183,
	0.000170743,0.000601539,-0.002163925,0.070194639,
	-164.066075,-104.3329474,-32.02261784,
	-3546.732946,-2226.399486,-684.1436654,
	1433.291216,707.4838375,204.2592964,
	7934.11116,3746.067997,1049.323175,
	1926.812756,1859.946932,603.9885603,
	6.138435316,-84.95487925,-35.63728698,
	-1.183767182,-222.1050678,-59.65003745,
	0.139030566,-25.23533942,-35.54008558,
	0.000897751,0.013561765,-1.201635695,
	-0.001230386,-0.024059738,4.044875826,
	-2.0824E-05,0.000581111,0.17632806,
	150.4618885,
	1867.574765,
	402.2262285,
	186.3804237,
	53.43227211,
	3.896381822,
	0.019788938,
	4.12177E-06,

		-13.69628751, 45.55231377, -19.3967962, 6.529558573, -1.375935281,
		5768.729501, -13384.58769, 5793.915925, -1960.014992, 400.7463618,
		457.6381587, -185.6013659, 76.11279222, -25.68939229, 5.409568008,
		-6502.104652, 28833.15452, -10566.85464, 3211.172463, -778.3793518,
		74.6325001, 930.7799779, -502.1367087, 182.1004419, -38.32824253,
		-177.7661057, 1068.596784, -2253.457553, 948.2311929, -196.2353374,
		-9.066315882, -76.51268259, 224.0919858, -102.1922213, 29.0800519,
		-1.096144447, -11.62922828, -87.74393808, -56.46168972, 15.61145594,
		0.669854141, 6.653661931, 100.0027797, -55.95048601, 12.24374851,
		-0.000769886, 0.00028422, -0.017255398, 8.708797692, -2.187216908,
		0.0003497, -0.000718561, 0.013605099, 0.482768699, 0.012640858,
		-5.42382E-05, 0.000151914, -0.001949015, -0.00185751, -0.432483847,
		4.96132E-06, -1.59224E-05, 0.000168224, 3.54216E-05, 0.285601491,
		-4.55647E-07, 1.49965E-06, -1.5377E-05, 1.53062E-05, 0.00152468,
		-145.3759395, -98.89756706, -34.99576068,
		-3389.033811, -2267.728531, -804.7517046,
		1507.307584, 761.4901391, 247.004865,
		8605.42093, 4139.255931, 1290.250626,
		2165.740846, 2169.068528, 807.6128299,
		11.15755058, -97.83084648, -48.74004569,
		-0.438921131, -310.5085313, -93.74435954,
		0.090379344, -37.98972762, -52.39143658,
		0.000242328, 0.012336427, -1.480755369,
		-0.000412314, -0.023349891, 5.363014009,
		-3.92218E-07, -1.61502E-06, 0.000570608,
		162.6028385,
		2190.357378,
		472.2741827,
		217.873045,
		56.71239516,
		2.684365658,
		0.001067919,
		-1.18999E-06,
		-18.11566781, 46.37006916, -19.69689231, 6.955571595, -1.786415343,
		7450.868803, -14878.67445, 6467.514736, -2305.886572, 601.5409541,
		480.3193326, -192.5399277, 79.42309735, -28.19576037, 7.264997585,
		-8846.947784, 35354.86857, -12185.81156, 3699.326202, -828.1876244,
		95.52855626, 961.5395558, -519.9520773, 197.7481445, -52.36634678,
		-231.7929599, 1897.884015, -2923.003435, 1282.440816, -351.9888723,
		-10.39170132, -97.36026298, 549.945315, -195.2868434, 40.98337455,
		-1.185178273, -16.80577683, -36.98225912, -96.99964714, 44.29178085,
		0.804440368, 9.14894827, 104.119376, -49.02179627, 17.02767406,
		-0.029671017, -0.155310216, 0.08191349, -14.80473162, 1.112694725,
		0.000574969, 0.00057862, 0.035045726, 12.6213914, -2.476653147,
		-7.97683E-05, -0.000146004, -0.00200667, 0.191414616, -1.469662835,
		1.70233E-06, 2.70826E-06, 3.93084E-05, -0.000438389, 0.440001746,
		-1.45929E-07, -2.29317E-07, -3.23824E-06, 3.08745E-05, 0.005878467,
		-163.5343761, -114.1533096, -41.80103683,
		-3814.421756, -2633.462992, -959.8569289,
		1623.897014, 840.1556388, 291.9280357,
		9590.145504, 4689.174819, 1590.159409,
		2434.605287, 2516.290326, 996.3350898,
		14.85349299, -112.0884636, -60.12850838,
		-0.136763383, -375.8874301, -129.658391,
		0.069945318, -40.98144028, -66.25616522,
		0.000173582, 0.010902697, -2.398766726,
		-0.000307346, -0.020744082, 7.070226972,
		-3.18546E-07, -7.80438E-06, 0.00073718,
		180.3242651,
		2454.395309,
		547.7313619,
		248.3639285,
		60.31786471,
		2.850815069,
		0.000706526,
		-2.32792E-06,
		-20.09727587, 48.29729102, -20.61623186, 7.523956976, -1.988745798,
		8452.626226, -16292.2524, 7119.572795, -2622.21194, 702.148871,
		500.809135, -200.6776838, 83.39865617, -30.62531683, 8.121443002,
		-10460.55199, 41056.28478, -14170.84576, 4442.056261, -1042.985455,
		-274.8855156, 2261.130396, -3347.371266, 1522.276439, -428.6784963,
		107.0092149, 1018.072253, -553.7812607, 218.6157047, -59.55983918,
		-11.80151099, -119.8545463, 753.4002833, -279.6312814, 62.99733167,
		-1.413059276, -21.38480316, -26.33329137, -147.5098113, 64.15723437,
		0.866943853, 10.75657484, 110.8560962, -56.73509243, 19.63441313,
		-0.027694497, -0.194305852, 0.151516627, -16.90194289, 1.814070576,
		0.000924379, 0.003538569, 0.046681158, 16.00520163, -2.965005463,
		-0.000132673, -0.00063546, -0.002563381, 0.449298646, -2.150403155,
		1.5439E-06, 7.48556E-06, 3.21411E-05, -0.000225268, 0.52278271,
		-1.2298E-07, -5.90303E-07, -2.4514E-06, 1.69712E-05, 0.007738302,
		-212.7257069, -142.3024031, -55.35550013,
		-4802.900102, -3191.273694, -1238.584237,
		1773.348669, 921.808975, 339.0581555,
		10890.22809, 5327.785619, 1901.149619,
		2884.99302, 2880.587777, 1214.288431,
		21.17709944, -114.0679359, -69.08164252,
		-0.167970945, -455.0685947, -164.0690545,
		0.088203609, -51.53638818, -88.38424954,
		0.000302076, 0.012233129, -3.402730294,
		-0.000504175, -0.02247669, 8.929321988,
		-5.37729E-07, 3.58486E-06, 0.000709265,
		177.0442145, -38.28329396,
		2906.452122, -629.0328242,
		629.7104537, -159.4010817,
		79.08337387, -131.5263378,
		359.1254686, -61.35596732,
		123.1573245, -59.24091408,
		11.99798804, 0.594912613,
		0.040045824, 2.966551697,
		-0.001548143, 0.910921697,
		0.00013605, 0.118743547,
		-8.49381E-06, 0.001367077,
		-22.33211374, 50.18829533, -21.53923001, 8.067208516, -2.130138712,
		9641.122403, -17860.81418, 7849.473395, -2962.236723, 792.2703404,
		521.7939846, -208.8668302, 87.42755078, -32.96031212, 8.732671248,
		-12450.05041, 47676.24492, -16581.03502, 5396.330858, -1271.964854,
		-309.1187208, 2783.571995, -3876.498864, 1803.070327, -507.1288379,
		120.1229873, 1076.433937, -588.7317893, 239.2614614, -65.19377197,
		-13.6355292, -134.9293102, 936.7691042, -363.7263372, 82.41862201,
		-1.746428117, -26.77597778, -58.13163882, -189.8494606, 82.70632416,
		0.967173197, 11.82937663, 118.6228387, -65.10637816, 22.73570777,
		-0.048642359, -0.403182635, -0.763395311, -17.84993107, 1.451661814,
		0.001898111, 0.011544728, 0.078137335, 19.045543, -3.454541517,
		-0.000280918, -0.001896804, -0.005402835, 0.74745711, -2.64745013,
		2.36656E-06, 1.64082E-05, 4.73839E-05, -0.000136051, 0.577598399,
		-1.80631E-07, -1.26442E-06, -3.49522E-06, 1.14159E-05, 0.009033328,
		-285.3888719, -187.7399356, -77.02301952,
		-6209.600575, -4079.396446, -1672.328498,
		1945.820401, 1027.912307, 398.8140824,
		12266.92254, 6036.150303, 2258.689197,
		3346.80795, 3324.150891, 1488.5935,
		32.38972631, -120.7414612, -82.59255504,
		0.224286351, -544.8916473, -202.9506588,
		0.070261582, -65.22065459, -115.244124,
		0.000271812, 0.017975505, -4.404531599,
		-0.000475448, -0.031191613, 10.90502869,
		-3.84138E-08, 3.45724E-06, 0.000750682,
		191.9915227, -48.17693793,
		3313.403857, -843.0109761,
		712.0993683, -192.8578149,
		68.67473264, -135.4568545,
		414.1541303, -93.09829872,
		128.6173585, -78.45912172,
		10.95364182, 3.746068938,
		0.033208938, 4.220285658,
		-0.001443079, 1.058625391,
		0.000158024, 0.117972184,
		-5.85249E-06, 0.000390094,
		-23.94564371, 52.48481928, -22.64627216, 8.618012693, -2.212732989,
		10612.35165, -19409.59439, 8574.716769, -3282.691185, 850.5822003,
		542.3973329, -217.5473672, 91.68001515, -35.13037849, 9.044510608,
		-14178.02364, 54344.66746, -19056.4084, 6367.922325, -1506.042828,
		-343.7711189, 3208.737434, -4376.035514, 2069.760451, -560.0841489,
		130.1983399, 1142.968521, -628.2289376, 261.3561648, -68.88472669,
		-15.71674267, -168.1151883, 1153.338342, -506.037242, 122.5316771,
		-1.977277891, -31.26837196, -75.06175655, -263.8792115, 98.2525347,
		1.021463042, 13.23803878, 126.2918444, -83.39282703, 25.73256422,
		-0.043543566, -0.368098299, -0.956833913, -8.194943478, 0.505276211,
		0.001615164, 0.009511845, 0.082944522, 20.58124378, -5.07599363,
		-0.000172786, -0.001168611, -0.003362419, 0.676281664, -1.940274219,
		2.12343E-06, 1.20872E-05, 3.3866E-05, -0.003197728, 0.600051188,
		-1.64459E-07, -1.21893E-06, -3.85996E-06, -7.3523E-07, 0.008175133,
		-324.2151731, -217.880523, -97.30885239,
		-6991.783404, -4697.903199, -2103.828318,
		2074.191123, 1121.471486, 464.3520008,
		13291.91546, 6613.87153, 2596.445246,
		3744.762911, 3804.216915, 1854.48154,
		58.57235756, -127.6643376, -104.9491047,
		0.971309131, -645.8533667, -238.2943377,
		0.036456579, -88.47589675, -151.6438651,
		0.000248305, 0.034668901, -5.466383316,
		-0.000488382, -0.054090696, 12.78550208,
		8.0693E-08, -5.32574E-06, 0.000801161,
		207.1112323, -53.01367539,
		3585.009453, -928.2016105,
		799.8524531, -208.1571897,
		169.7303286, -155.8709138,
		480.5556381, -116.5776445,
		147.9644537, -86.50136165,
		6.105723115, 5.800548353,
		0.014465816, 5.20857109,
		6.00557E-05, 1.044978417,
		3.06513E-05, 0.114426378,
		-1.12219E-06, 0.000564473,
		-25.7814335, 54.51113409, -23.61519377, 9.143621846, -2.327308669,
		11749.54083, -21019.73228, 9329.682793, -3631.552779, 939.3203614,
		563.4577836, -226.0440175, 95.85192295, -37.39876536, 9.556356971,
		-16370.31628, 61899.448, -21689.36664, 7380.458489, -1643.939709,
		-395.597009, 3755.308418, -4958.398266, 2385.854606, -649.6356201,
		143.2566503, 1204.434545, -665.5634725, 282.1898113, -74.30933387,
		-17.92968767, -206.6310013, 1510.659049, -650.3074252, 147.9834308,
		-2.108454196, -36.82724918, -41.68649416, -358.3472192, 135.9391586,
		1.166133062, 16.17373057, 132.9907105, -83.71136321, 27.73358032,
		-0.083521284, -0.845535443, -0.110040598, -16.93320512, 1.537209604,
		0.001222259, 0.00890503, 0.071554201, 23.19326376, -5.708443383,
		-0.000141643, -0.001337504, -0.000685664, 1.051125769, -2.314932963,
		1.13023E-06, 8.26854E-06, 1.18972E-06, -0.003394443, 0.639775999,
		-8.19294E-08, -1.03436E-06, -9.21705E-07, -3.06109E-05, 0.009921658,
		-275.1788888, -185.6438334, -87.40584432,
		-6940.628041, -4708.908283, -2228.068068,
		2123.67454, 1111.135225, 472.9528828,
		14836.8415, 7044.423781, 2801.466511,
		4794.773867, 4297.048433, 2153.854254,
		80.37688816, -90.47040734, -97.67501411,
		-0.105263899, -748.0050721, -274.4317827,
		0.201725906, -114.6717273, -194.4079846,
		0.001457688, 0.055227628, -6.760026616,
		-0.002002399, -0.079869577, 14.87097877,
		-1.21864E-06, -1.10938E-05, 0.000741479,
		219.78246, -64.86599594,
		3985.550637, -1198.295355,
		40.20703279, 43.2951564,
		870.4505486, -287.1526324,
		535.613597, -148.0227657,
		151.8506748, -102.3361478,
		5.19027452, 8.860189196,
		0.007501161, 6.64712522,
		0.000403948, 1.266065601,
		-3.57424E-05, 0.126503233,
		1.26991E-06, 0.000302084,
		-27.98690407, 53.06737016, -22.87352508, 8.995868149, -2.273365123,
		13837.38222, -22888.70064, 10170.25722, -4056.910418, 1046.18775,
		585.1166368, -231.1507354, 98.36999783, -39.14999771, 9.964672012,
		-20902.59594, 70296.51888, -22931.37138, 7207.630887, -1446.858099,
		-499.6379824, 5592.829194, -6183.607494, 3014.964086, -831.505364,
		176.2784476, 1207.390683, -663.3440747, 283.0403792, -75.62773346,
		-24.04770708, -394.0804561, 2569.304378, -941.0050527, 203.9555749,
		-1.666068061, -45.88283283, 350.3210724, -566.5172894, 230.2109248,
		1.483328651, 28.91377985, 113.9390022, -32.52714722, 18.865741,
		-0.047853669, -0.367861193, 13.07225283, -68.61406124, 12.03069318,
		0.000481939, 0.000567322, 0.0821649, 27.40236784, -6.322978379,
		-5.6744E-05, -0.000364313, -0.002313346, 1.000588431, -2.823540596,
		6.38935E-07, 5.19135E-06, 6.58902E-05, -0.000699794, 0.482080933,
		-1.76188E-07, -1.67378E-06, -2.11425E-05, 0.00021746, 0.248572259,
		-312.8238967, -221.3246749, -113.3048765,
		-7494.968767, -5327.48635, -2736.270307,
		2208.514108, 1198.611544, 555.5671519,
		15128.73499, 7253.064603, 3114.947627,
		4866.458129, 4742.580549, 2632.320585,
		158.3184288, -80.56999399, -125.0009234,
		1.754638324, -868.7449057, -338.0849623,
		0.047749247, -134.3286813, -233.7484655,
		0.000980679, 0.062469992, -8.090757008,
		-0.001466024, -0.09017258, 17.38500191,
		-3.96422E-07, -7.62012E-06, 0.000740561,
		218.0526791, -80.11619369,
		4282.68082, -1611.388503,
		45.74129283, 42.183207,
		976.1644967, -340.4656341,
		613.5495742, -193.7258247,
		178.189051, -140.9413841,
		8.406768022, 11.22655994,
		0.019422316, 9.390156193,
		0.000554367, 2.207182044,
		-4.12941E-05, 0.194410399,
		7.11012E-07, 0.000111137,
		30.6037222, 56.15536715, -24.37727818, 9.681855613, -2.289062316,
		-15291.65452, -24739.37672, 11050.70774, -4450.61859, 1076.687011,
		-607.4223676, -240.8772851, 103.1617093, -41.42868364, 9.863518908,
		23823.33974, 80381.69252, -27145.37423, 8809.784718, -1654.56171,
		-189.6939302, 1283.954687, -709.7294096, 305.571575, -76.64435336,
		541.5690695, 6100.208901, -6788.855682, 3337.322625, -863.4415543,
		27.31069839, -394.2917702, 2816.268337, -1020.237019, 209.1324889,
		1.416352218, -44.17765428, 219.8910699, -609.5472956, 239.8348656,
		-1.832607581, 30.05953077, 93.28955512, 19.30191887, 10.82875854,
		0.246857568, -2.169773042, 42.9470408, -127.7382308, 20.89488219,
		-0.000495002, 0.000829128, 0.113008935, 28.78737412, -7.275812319,
		5.06616E-05, -0.000393271, -0.003905236, 1.183963101, -2.15280163,
		-4.18862E-07, 3.69995E-06, 9.63383E-05, -0.000447973, 0.410266654,
		1.67804E-07, -3.10437E-06, -3.80495E-05, -0.000495734, 0.226624103,
		-227.3860868, -184.9364202, -111.179843,
		-5884.199966, -4751.619629, -2860.572049,
		2075.093187, 1166.32711, 609.0486245,
		13578.57776, 6401.493924, 2995.240249,
		4070.094769, 4811.021446, 3154.248541,
		336.1607788, -20.5984702, -155.2653235,
		3.845061719, -987.5913066, -383.5323448,
		-0.132343719, -168.2530765, -286.757512,
		0.000550376, 0.101491658, -9.954785519,
		-0.001023488, -0.132197678, 19.6835323,
		-4.19509E-08, -1.23755E-05, 0.000663832,
		251.0552686, -84.16522304,
		4975.44058, -1701.218698,
		1058.844977, -314.7438342,
		2581.44427, -1019.270467,
		748.352262, -231.265582,
		249.1143387, -195.2239526,
		10.153319, 14.94720921,
		0.025679639, 11.31305379,
		0.001835904, 2.03391184,
		5.04098E-05, 0.176045386,
		1.21581E-06, 0.00029816,
		-31.67731725, 58.37109784, -25.43238244, 10.21921776, -2.319052777,
		16187.58196, -26310.38625, 11796.58904, -4783.547104, 1110.331258,
		628.4125141, -249.8159053, 107.559314, -43.71620539, 9.991933578,
		-26655.95538, 89834.06606, -30441.89091, 10307.82392, -1885.317381,
		-593.7548687, 6873.140105, -7546.455761, 3743.399559, -929.4383159,
		202.9799832, 1350.530651, -747.4559014, 328.7498427, -79.37370945,
		-28.14550535, -490.9895813, 3387.429203, -1374.119075, 283.0270824,
		-2.128089858, -51.43443314, 242.0622255, -802.6744711, 296.134105,
		1.708930096, 35.29186647, 100.3200963, -13.47668805, 21.45641195,
		-0.161935818, -3.402584013, 40.94264227, -105.9907309, 12.2891604,
		6.15952E-05, 0.006223398, 0.11777462, 32.16658564, -8.076798458,
		2.36893E-05, -0.001196307, -0.002039098, 1.226925481, -2.005838955,
		-1.07115E-06, 2.02804E-05, 5.96272E-05, -0.001066863, 0.402507126,
		4.17605E-07, -8.9785E-06, -2.15484E-05, 0.000107366, 0.23032951,
		-219.304993, -184.0288596, -123.0331827,
		-5944.110254, -4941.589371, -3301.12927,
		1986.490833, 1090.913262, 620.7546194,
		12600.7844, 5143.10931, 2410.750917,
		3521.946444, 4733.324523, 3542.268226,
		551.3504349, 120.7130659, -126.3319922,
		5.55154133, -1114.495736, -439.7911754,
		-0.291442583, -202.7630544, -343.854362,
		0.000313575, 0.137902899, -11.7720415,
		-0.000868129, -0.170560362, 22.23507558,
		1.25281E-07, -1.43238E-05, 0.000640522,
		300.4714654, -110.2742574,
		5827.810203, -2192.300505,
		1102.737806, -330.9166932,
		3899.269095, -1523.68499,
		878.7754926, -289.1489403,
		292.5732363, -248.3508396,
		8.113396925, 23.31672688,
		0.027764598, 12.62295047,
		0.001816619, 1.927779768,
		0.000111528, 0.142678052,
		4.06081E-08, 7.24144E-05,
		-12.05964519, -13.8844453, 6.922498586, 2.308734212,
		12262.75633, 12835.11268, -6513.93759, -2073.416603,
		628.9327056, 212.131272, -92.42344145, -37.4354456,
		1090.599582, 2017.538058, -1754.570827, -1624.570622,
		-4516.561494, -6535.485079, -8479.790893, -14727.89498,
		5869.970374, -25016.19864, -44880.85108, -82934.91358,
		-11.09062312, -2132.822198, 2035.823149, 2001.812939,
		20.84120321, -964.5153748, 1562.310877, 14307.63141,
		-5.499653686, 11.81323444, -3148.234656, 2381.512651,
		0.121292069, -0.435547904, -187.4292553, -401.9517622,
		-0.000779688, 0.008171432, -0.156108233, 36.92220996,
		0.000810207, -0.003486173, 0.011227359, 1.482853022,
		9.65861E-05, -0.000393252, 0.00117515, -0.013734796,
		-0.000194163, 0.000793872, -0.002428377, 0.029958588,
		-277.4380368, -209.2232333, -152.1632755,
		-7342.42689, -5536.863563, -4052.520228,
		2166.746247, 1089.94617, 633.5173369,
		13648.82643, 4844.398245, 1941.449548,
		5860.719412, 5346.050655, 4075.144762,
		568.7596644, 216.4045123, -82.26001807,
		5.068410453, -1233.247893, -460.0864913,
		-0.132547269, -263.1721462, -429.7469838,
		0.002422964, 0.222302239, -14.26853522,
		-0.003024664, -0.248284068, 24.58625481,
		-1.68615E-06, -5.23409E-05, 0.001733994,
		330.5990183, -133.9569167,
		6397.026, -2678.324914,
		-235.8287611, 215.2837145,
		1477.056312, -584.881852,
		776.0248253, -159.8815029,
		173.8727628, -133.069974,
		7.16677537, 23.62115343,
		0.036985769, 15.37463149,
		0.000491142, 2.425918023,
		-1.16975E-05, 0.202944893,
		1.00944E-06, 0.004022524,
		-36.99485163, 59.00345387, -25.73888889, 10.51788384, -2.194957965,
		20831.95753, -30237.6961, 13638.00023, -5627.751249, 1190.242018,
		674.2300254, -264.130379, 114.6790186, -47.53997061, 9.970711317,
		-40035.63114, 114915.9984, -37801.83464, 12792.79668, -2344.389873,
		-871.061332, 10275.62648, -9946.763084, 5013.925028, -1108.453764,
		275.9771339, 1391.329251, -768.9236322, 358.1660654, -78.02896178,
		-48.94545089, -960.3469545, 5777.543516, -2942.895005, 612.2419063,
		-3.061710127, -87.57711233, 720.8162667, -1634.141209, 445.941942,
		2.243950734, 51.54187014, 135.4925926, -139.1895446, 36.05538149,
		-0.009342477, -0.024191287, 1.359173911, -5.212827571, -2.380666148,
		0.004019004, 0.012073922, -0.24460684, 41.21203618, -7.295780176,
		-0.000289825, -0.001592291, 0.020394822, 1.933911507, -2.546559308,
		2.07651E-06, 1.54664E-05, -7.38236E-05, -0.000150655, 0.38764946,
		-7.86119E-07, -5.99933E-06, 2.61074E-05, 0.000195164, 0.227663955,
		-355.3138685, 821.5444594, -569.9874778,
		-5875.541854, 13018.34158, -8956.750372,
		-8384.719296, 14255.32099, -9725.386829,
		2957.480261, -1991.026614, 999.3512839,
		3141.456993, -1339.795899, -150.1424889,
		10.99940866, 1408.066689, -608.2810209,
		-1.327512138, 227.9613124, -444.4161441,
		-0.021583774, -0.405155429, -11.46342289,
		0.015155969, 0.413406595, 29.90514176,
		0.000297456, 0.00037312, 0.459233523,
		-2.11011E-06, -2.11011E-06, 0.00019413,
		309.6964831, -136.814456,
		6954.587028, -3147.141732,
		-149.2078468, 191.4858107,
		1544.348864, -638.1177777,
		881.8033754, -199.8097712,
		187.3837548, -161.1908314,
		7.274869705, 32.1655846,
		0.028025811, 18.29172347,
		0.001242556, 3.077597708,
		-6.44948E-05, 0.236432424,
		8.31741E-07, 0.000137798,
		-40.07377926, 60.9586955, -26.6781492, 11.04380828, -2.600177338,
		22783.34816, -31751.3714, 14371.50295, -6024.008244, 1448.499532,
		697.8931593, -273.0536204, 119.1045183, -50.08807971, 11.88114377,
		-47899.22579, 130421.7236, -43509.09991, 14690.75413, -2829.871147,
		-1005.204451, 11849.77057, -11071.92623, 5679.76267, -1445.410276,
		312.4801629, 1421.246937, -786.1030821, 372.7954832, -93.25390558,
		-55.57907478, -1186.107138, 7002.6868, -3416.85316, 773.7788016,
		-3.640032196, -101.2312963, 1052.940654, -2077.650745, 671.3783714,
		2.526779424, 62.28484506, 131.5300702, -137.6755761, 44.32249552,
		-0.003225611, -0.160214817, 2.93330949, -21.1359507, -1.722419405,
		0.000304255, 0.045203614, -0.23474785, 50.27978245, -7.69569125,
		4.91729E-05, -0.006377114, 0.037150144, 3.801137712, -5.642841968,
		-1.1715E-06, 4.41975E-05, -0.000120025, -0.000186268, 0.688280429,
		3.65271E-07, -1.26801E-05, 3.3605E-05, 7.30021E-05, 0.253891301,
		-568.1701596, 891.6836744, -582.0141325,
		-9858.3993, 15081.087, -9761.62188,
		-12150.12258, 15843.57546, -10232.38477,
		3319.963828, -2136.128181, 1044.723376,
		3325.540899, -1598.128125, -51.17501946,
		6.696140322, 1578.072609, -711.1599625,
		-0.000672782, 248.260892, -511.0496932,
		-0.027752559, 0.482289882, 12.88767059,
		0.006852341, -0.001287385, 21.85365234,
		-0.000784699, 0.00176168, 0.9157539,
		2.66126E-06, -1.09581E-06, 0.00046045,
		366.2147747, -161.5724717,
		7447.716934, -3367.708367,
		-411.699573, 371.1501493,
		1921.564795, -896.203939,
		1010.850931, -219.7190604,
		146.1945844, -256.5895909,
		20.90453211, 97.74522374,
		0.170819755, 24.60280825,
		-0.005466507, 4.139310371,
		0.00032835, 0.270803549,
		-2.98157E-06, 5.41952E-05,
		-19.93770577, 76.64916533, -32.75232791, 13.03635946, -3.523814217,
		12229.1652, -33591.45663, 14772.81423, -5992.924046, 1560.737373,
		698.5566099, -295.783488, 128.7037681, -54.14068678, 14.60039096,
		-18995.73844, 114932.3857, -30415.8993, 4611.308993, -2119.264317,
		-345.5504963, 4691.527896, -14195.81136, 10128.06786, -2784.72219,
		138.2697528, 1508.41795, -2114.193998, 1585.031427, -452.5702208,
		0.648860748, 471.835973, 1268.825385, -1300.74993, 379.9032613,
		3.416084682, 47.07303417, 11385.98335, -8375.562552, 2545.940511,
		-0.566550211, -1.946238304, 1211.872954, -2431.806718, 790.0488561,
		0.00262426, -0.004017308, 0.341598078, 49.01549099, -15.64211713,
		-0.000882735, -0.000351545, -0.035041469, 0.386465108, -5.279752183,
		0.000396945, 0.000200464, 0.013490389, -0.066966937, 2.696138192,
		-2.04982E-05, -1.27984E-05, -0.000549601, 0.001210017, 1.01272998,
		2.09433E-06, 1.40826E-06, 5.095E-05, -7.26877E-05, 0.008415673,
		571.5662676, -1006.810497, -667.2760752, 147.3553616,
		9775.19031, -16722.97453, -10997.42027, 2424.938443,
		12483.43759, -17880.43535, -11720.63145, 2585.365889,
		-3478.57172, 2346.456659, 1190.971207, -248.890221,
		-3278.626734, 1593.964276, 0.843646733, 55.24654499,
		5.677088734, -1622.808878, -435.5935009, 73.31637663,
		-10.61979153, -188.6852888, -680.8474176, 174.0215291,
		-1.690434329, 37.38365972, 42.63061728, -6.13972745,
		1.005038058, -24.83697291, 0.84825352, -4.495506624,
		0.150753116, -4.238152079, -7.840378284, -0.998488088,
		-0.250939854, 6.921280953, 14.99090178, -1.898667426,
		3.49938E-05, -0.000209963, 0.000745488, 0.401011127,
		-9.89391E-06, 4.73752E-05, -6.05912E-05, 0.196294351,
		394.8263691, -193.0604335,
		9173.284545, -4593.569192,
		-1184.255911, 847.8965094,
		2676.096603, -1386.502983,
		1155.170428, -276.2235422,
		287.3052364, -263.1545335,
		12.93192245, 45.34527804,
		0.009517943, 27.93605105,
		0.003696374, 5.280485059,
		-0.000263835, 0.287697771,
		5.79754E-07, 2.56748E-05,
		-20.92500224, 79.83332106, -34.2329613, 13.82856911, -4.087373434,
		13119.0107, -36169.21476, 15952.97649, -6536.305662, 1841.484631,
		720.5566993, -306.0874799, 133.7574046, -57.04916534, 16.72282617,
		-20836.39896, 128638.517, -34671.30477, 6261.05566, -3406.477372,
		-362.1901704, 4522.709819, -15955.2765, 11682.08272, -3401.488181,
		145.0092581, 1515.728499, -2492.537264, 1952.443524, -594.2618819,
		0.039733378, 580.9583086, 1594.459356, -1648.493123, 509.0828731,
		4.514297301, 59.29117182, 12879.78669, -9844.728545, 3269.641774,
		-0.760657676, -2.870940663, 1290.118341, -2721.959729, 951.4659323,
		0.004154515, -0.002335172, 0.371254003, 55.44760917, -17.74955495,
		-0.00153744, -0.001236481, -0.039606164, 0.160943529, -7.761620696,
		0.00059179, 0.000541803, 0.011849243, 0.022266579, 3.364729693,
		-3.94795E-05, -3.8503E-05, -0.000602097, -0.001132908, 1.382138271,
		4.33487E-06, 4.43932E-06, 5.70322E-05, 0.000147072, 0.012747696,
		555.9285242, 955.7579736, -664.2240037, 178.9814624,
		9495.671114, 15851.98798, -10925.01738, 2935.039379,
		12549.03814, 17464.03181, -11989.65425, 3227.690676,
		-3622.003409, -2364.74946, 1214.625738, -302.6431336,
		-3796.01874, -1944.695581, -1.763728111, 97.50330362,
		-3.414425404, 1810.593086, -641.350448, 138.9621682,
		-2.896121701, 330.6519487, -775.8974624, 235.4692538,
		-0.400996406, -12.25269225, 14.28142391, 4.137180269,
		0.200889875, 6.91136962, 31.02961854, -9.78084843,
		-0.003092142, -0.302463207, 1.530623381, -3.389082426,
		-1.86628E-05, 0.085266136, -0.264999897, 0.557059453,
		5.08853E-05, -0.00069375, 0.002868736, 0.756766833,
		-1.30046E-05, 0.00013553, -0.00040215, 0.219874299,
		412.9091719, -216.298742,
		9464.269677, -5115.951644,
		-1050.563241, 876.6797386,
		2717.823248, -1513.822124,
		1262.427553, -260.0392122,
		267.2076772, -366.5670983,
		41.88044504, 74.71381752,
		0.174289485, 36.98746974,
		-0.00318462, 8.25732375,
		2.00112E-05, 0.425070098,
		-2.6381E-07, 5.59695E-05,
		-19.87393783, -83.66957645, 35.88270341, 14.60218828, -4.630973808,
		13154.91865, 38777.58304, -17089.75708, -7038.13323, 2102.324329,
		740.7312769, 317.1204115, -139.0250648, -59.98623077, 18.7217288,
		-21465.64964, -141843.4679, 37982.19792, 6766.171164, -4668.170341,
		-347.3864573, -3479.67056, 18953.97932, 14666.50114, -4407.814134,
		145.2611368, -1365.594534, 3407.03225, 2874.581934, -905.8489295,
		-2.029135427, -875.7282898, -2447.127263, -2549.89878, 807.7525489,
		5.781106541, -80.20078167, -14605.61631, -11572.76791, 4102.402344,
		-0.989956024, 4.54803761, -1384.870862, -3055.487064, 1121.923312,
		0.006588191, -0.003879206, -0.383520872, 62.7782505, -19.20386295,
		0.001090033, -0.00172515, -0.013016796, 0.181418949, 4.330605815,
		-0.001861602, 0.002777581, 0.030918997, -0.284790537, -7.085069845,
		-5.72336E-05, 9.36718E-05, 0.000351315, -0.003909371, 1.961588478,
		6.50245E-06, -1.09773E-05, -2.72683E-05, 0.000425316, 0.021474661,
		565.7180353, 951.6811037, -683.3702208, 202.7698475,
		9765.397383, 15972.84746, -11369.77493, 3366.082251,
		13070.88407, 17795.9623, -12616.37151, 3738.36872,
		-3796.605567, -2446.889529, 1282.919622, -352.2683598,
		-4162.203915, -2281.383262, 116.4895251, 84.2779877,
		-1.439398871, 1909.147002, -525.2077469, 110.1794409,
		-4.783076908, 427.7091689, -991.1528403, 334.3832028,
		-0.53050693, -18.01683531, 34.35724489, 0.238520956,
		0.25469916, 9.729566233, 27.17512076, -9.060091258,
		-0.003340514, -0.405590691, 1.767086886, -5.173284837,
		-0.000331574, 0.116096806, -0.346825363, 1.239573636,
		0.000101436, -0.001457496, 0.004960028, 1.140510539,
		-2.46114E-05, 0.000268069, -0.000889997, 0.241896578,
		427.4842356, -260.3356377,
		9689.604935, -6155.953853,
		-474.7624705, 587.6204775,
		2332.814951, -1312.534565,
		1385.22424, -215.1402208,
		218.2260216, -513.2894897,
		91.63084096, 121.8671441,
		0.247515158, 44.95060122,
		-0.011243889, 8.47930871,
		0.00044717, 0.305255922,
		-2.46488E-06, 8.73152E-05,
		24.17937497, -79.33511919, 34.36738982, 14.05005912, -4.671899575,
		-16681.24987, 42718.9589, -19040.18592, -7986.989808, 2512.305678,
		-766.4724117, 320.0560118, -141.1717463, -61.64196747, 20.21699245,
		31216.74566, -168132.5526, 48417.06273, 7506.64003, -5279.361539,
		451.3470781, 9673.098027, -37013.29759, -31685.32042, 10257.14999,
		1113.961855, 133.9529888, 5909.271487, 3400.663539, -900.4715922,
		-181.0868309, -2264.145202, 979.6041054, 327.9928703, -103.6865302,
		0.448953365, -91.52110496, -16891.88127, -13551.78156, 5044.363734,
		0.578439308, 5.720433736, -1659.434653, -3623.292207, 1399.182409,
		-0.006522377, -0.010929816, -0.464020002, 70.97348864, -20.40703929,
		-0.002530831, -0.006730664, -0.058821086, 2.883010106, 10.24107932,
		0.002457691, 0.006386688, 0.065755477, -3.104305313, -10.09638926,
		1.51501E-05, 5.36267E-05, -0.000891454, 0.037751506, 2.912164925,
		-2.67886E-06, -8.34273E-06, 4.00298E-05, -0.00102914, 0.025862677,
		559.4444549, 891.1086699, -659.6835138, 207.5864769,
		9665.268249, 15002.45312, -11001.92739, 3458.469307,
		13362.08674, 17291.74762, -12628.85539, 3965.547603,
		-3960.338684, -2475.506102, 1311.482647, -382.009593,
		-4808.05865, -2862.487466, 378.7979868, 22.74788739,
		-2.548742934, 2001.286797, -386.9884561, 67.08746058,
		-5.694698499, 552.1056351, -1237.36042, 448.1266158,
		-0.608664874, -23.94194688, 60.85464904, -4.093995243,
		0.288341721, 12.82451898, 19.82305446, -4.039274041,
		-0.006032087, -0.705021625, 4.20155298, -11.11235175,
		-0.000545227, 0.012611237, -0.005934721, 0.933428103,
		0.000203451, -0.002726802, 0.00450337, 1.050240255,
		-4.56936E-05, 0.000479362, -0.000563172, 0.202761207,
		437.7185314, -269.3699712,
		10160.15609, -6491.848101,
		-525.4551084, 664.2128487,
		2554.054873, -1495.438328,
		1557.486148, -230.3270106,
		184.2814248, -629.8894081,
		120.55679, 169.6628164,
		0.220220591, 53.43705022,
		-0.009915846, 8.265427731,
		0.000227758, 0.149442802,
		-2.18124E-06, 4.353E-05,
		36.48213047, -75.49782391, 33.55626049, 14.33494665, -4.927535208,
		-25505.98614, 46958.14677, -21447.72372, -9353.45024, 3059.523616,
		-800.4153511, 323.5665602, -144.0669422, -64.16935868, 21.87496637,
		55251.30281, -206810.6734, 70337.24639, 19677.42069, -9637.674951,
		2105.977389, -905.4331827, 5992.628546, 3122.417289, -869.6242218,
		1242.255889, 24717.68096, -43882.74114, -34434.04543, 11639.69953,
		-277.9257862, -2178.897103, 970.164919, 334.3608657, -109.0242278,
		35.72094408, 5.285993958, -18890.20397, -15486.47826, 5992.112839,
		-3.130487601, -2.014775327, -1823.442847, -4115.902538, 1652.541574,
		0.016626134, 0.033019734, -0.543687858, 82.44814132, -20.4370187,
		0.007032724, 0.010454898, -0.095093525, 6.778665744, 14.92157926,
		-0.007026144, -0.010828528, 0.106839181, -7.42314468, -14.34083331,
		-2.88506E-05, -1.08547E-05, -0.000715838, 0.051309279, 3.453153046,
		4.05871E-06, 3.17638E-06, 3.35285E-05, -0.001346168, 0.026007407,
		572.7617436, 961.212684, -756.6196546, 266.0884454,
		10336.5436, 16928.59622, -13202.94883, 4631.806265,
		14028.43368, 18885.57246, -14643.18099, 5140.480526,
		-4149.110515, -2642.693643, 1478.044144, -470.2859382,
		-4844.537726, -2958.885687, 402.6469295, 86.0206684,
		19.83731758, 1516.76793, 729.008101, -377.2962938,
		-21.66138609, 1198.031191, -2245.406533, 893.5105447,
		-0.970654678, -40.27011997, 126.1900822, -15.07820473,
		0.456133799, 21.52250546, -10.44630996, 12.07438418,
		-0.022078048, -1.852483831, 14.20263282, -23.82453797,
		-0.000354363, 0.005708934, 0.00961888, 1.807599638,
		0.000393628, -0.004346621, 0.00099579, 0.764405424,
		-0.000253052, 0.00263119, -0.000293374, -0.11748954,
		469.9966139, -291.6379371,
		10956.8672, -7024.613911,
		-858.6755453, 962.321247,
		3012.909476, -1885.668925,
		1750.470953, -219.7316719,
		156.1408517, -761.4519194,
		167.4040539, 189.7645311,
		0.235292661, 64.72875402,
		-0.011075136, 8.141641204,
		0.000147828, 0.054267578,
		-3.50065E-06, -5.44192E-05,
		38.53988331, -78.86743939, 34.8345797, 14.85172021, -5.261802683,
		-27076.58652, 49484.08452, -22481.78156, -9812.651797, 3341.040627,
		-824.3240168, 334.3610666, -149.0957727, -66.96353661, 23.5820335,
		59236.55367, -221717.9672, 72078.75683, 17532.82206, -8784.926895,
		2187.588443, -2148.30091, 7455.765973, 4089.662974, -1252.863247,
		1809.247052, 26804.06719, -47950.76888, -39344.83311, 14030.61996,
		-289.9757016, -2278.60536, 1005.77608, 342.6289427, -114.6245688,
		35.84087944, -9.713057741, -21477.82573, -17676.67206, 7054.768556,
		-3.139713548, -1.610459616, -2200.252901, -4844.209345, 2033.612371,
		0.008775824, 0.023606257, -0.502098011, 79.40021121, -38.67454863,
		0.006989127, 0.013297831, -0.172410793, 16.12940873, 10.68975761,
		-0.007196549, -0.014456311, 0.204912983, -19.03293492, -8.804492725,
		-5.22487E-05, -6.60693E-05, -0.000261581, 0.045540648, 4.090701324,
		4.33755E-06, 4.9572E-06, 2.23074E-05, -0.001261815, 0.030589878,
		654.3258453, 1013.042638, -834.7131951, 307.5137068,
		11743.12569, 17761.56406, -14488.9386, 5326.102665,
		15785.08644, 20115.44297, -16340.16955, 6009.658376,
		-4411.547173, -2793.361788, 1625.19709, -541.2562305,
		-5252.429271, -3360.399996, 540.3588551, 83.01927502,
		45.60904658, 706.362116, 1850.204183, -849.8646788,
		-41.17739015, 2203.815754, -3295.84801, 1360.630035,
		-1.321528716, -55.45721882, 189.4623035, -30.14387728,
		0.600420926, 29.26738149, -37.3608353, 29.46822147,
		-0.037278034, -3.221067225, 23.81957146, -37.31985715,
		-0.000608496, 0.008200753, 0.010629731, 2.113443152,
		0.000374356, -0.003348873, 0.000250684, 0.892002556,
		-0.000138698, 0.001085525, -0.000272543, 0.114783149,
		611.2904037, -446.4433347,
		14648.43738, -11089.89073,
		-1774.579879, 1678.925475,
		3740.796307, -2467.334778,
		1964.099443, -354.0500452,
		392.7304785, -801.8999427,
		154.8160924, 153.329451,
		0.488347609, 77.41950967,
		-0.040807123, 10.71710209,
		0.001404407, 0.142283035,
		-1.37765E-05, 3.75067E-05,


			46.55745198, 12.80473872, -5.475345629, 1.007286057, -0.735059911, -0.023301966,
			761.2683915, -275.7825411, 123.5224708, -55.45119438, 20.96875286, -4.560566063,
			152.6133329, -3737.080325, 1823.416613, -901.7984506, 325.3268601, -79.51904041,
			7.087884118, 4192.682326, -2023.392906, 970.2442115, -356.1986763, 83.62549638,
			-27.52254889, 8473.595628, -11321.91423, 5670.866839, -2213.792133, 471.5009551,
			3.239351797, 113.6442433, 2094.089591, 578.3122082, -351.4656256, 107.8420189,
			-1.640408302, -37.67037809, 1886.808934, -2954.932862, 1297.546782, -316.8099539,
			0.046660216, 0.41696363, 8.197659401, 245.9772806, -95.00240545, 23.5631001,
			-0.01466419, -0.131968277, -1.606304464, 25.60025093, -44.92011411, 10.46645734,
			0.000472346, 0.003968542, 0.031930811, 0.03429567, 8.130952778, -1.980908366,
			-7.16444E-05, -0.000567239, -0.004580638, 0.001379318, 1.680991442, -0.642969283,
			2.37166E-07, 1.84462E-06, 1.34657E-05, -1.95662E-06, 5.0345E-05, 0.066395641,
			-3.29408E-08, -2.57252E-07, -1.86508E-06, 2.2588E-07, 1.25803E-06, 0.000787544,
			346.3134632, -121.3456868, 61.03313931, -25.47078179,
			3594.704959, -1728.165798, 769.6953127, -252.966614,
			4775.284661, -8260.806215, 5720.26837, -2435.334323,
			480.9765675, -20214.13117, 20334.96077, -9910.513928,
			-27.81170298, 6316.217616, -4538.937765, 1996.108244,
			1.280248979, 533.7489873, -688.9848456, 226.9779025,
			-0.079751379, 0.767092502, 232.9950699, -99.58968512,
			0.011922193, 0.056474349, 42.53905591, -40.32825797,
			-0.000121713, -0.000745882, 0.059343515, 4.595993435,
			1.19459E-05, 5.75855E-05, -0.002979895, 0.724173631,
			635.2097302, -219.4854751,
			4871.959503, -2156.291952,
			9123.868308, -3931.065439,
			689.5362289, -482.7106005,
			1.578353337, 541.5615435,
			0.212424692, 116.209762,
			-0.006369607, 3.314057937,
			48.99874539, 13.55960773, -5.739451939, 1.127965142, -0.879905896, 0.093462485,
			781.0854647, -284.1121606, 127.6280438, -57.93027326, 23.04332825, -6.199808142,
			152.0756212, -3917.228627, 1921.577814, -958.1410699, 361.5853238, -104.236303,
			7.694082942, 4401.681584, -2133.673545, 1032.653825, -397.3320736, 111.8083345,
			-30.90620949, 8859.189731, -12098.30838, 6149.865969, -2533.871197, 674.8934821,
			3.984140019, 124.3154259, 2297.179735, 773.332105, -466.4210587, 158.3916099,
			-2.122900629, -44.85347713, 2012.777197, -3389.59565, 1563.643763, -457.5511205,
			0.068220223, 0.572705273, 10.83350619, 267.5874306, -94.4301974, 27.0840027,
			-0.024647418, -0.206869164, -2.58359312, 39.46518021, -70.60459546, 21.52967686,
			0.000604243, 0.00468368, 0.036540164, 0.079603379, 10.70230483, -3.255925993,
			-0.000129053, -0.000952838, -0.00741629, -0.006309853, 1.116594735, -0.835695835,
			1.95614E-06, 1.39724E-05, 0.000100481, 6.19776E-05, -0.000635245, 0.136710243,
			-3.74615E-07, -2.65636E-06, -1.89419E-05, -1.08298E-05, 0.000103557, 0.029917532,
			348.4627438, -122.5144247, 61.10971395, -26.85692419,
			3784.155636, -1825.598155, 824.9490347, -290.4423659,
			5236.605561, -9050.384286, 6169.403667, -2750.007454,
			512.9384649, -22620.0737, 21942.65758, -11147.22458,
			-26.72240154, 6894.72549, -4859.559884, 2234.96065,
			1.192577316, 551.1009393, -772.2552318, 278.9620833,
			-0.090919391, 0.444225923, 271.1469594, -124.4600286,
			0.013578915, 0.155319429, 55.20179067, -57.14378262,
			-0.000114049, -0.001491031, 0.069283609, 6.333750265,
			1.24304E-05, 0.000148608, -0.004705729, 0.602793666,
			670.828628, -233.8626743,
			5273.783664, -2388.743228,
			10181.92301, -4477.09994,
			719.3656448, -649.0850974,
			-7.421704901, 712.2907606,
			0.390023604, 157.8847153,
			-0.01163991, 5.264851395,
			49.65770085, 14.00099365, -5.78215478, 1.163995572, -0.90310669, 0.112694703,
			802.887473, -292.200767, 131.5504517, -60.34154764, 24.70615104, -6.839260914,
			158.6100341, -4105.435305, 2028.056295, -1019.148816, 397.7708825, -116.8995837,
			7.8435649, 4608.216927, -2246.075152, 1096.808025, -435.7096814, 125.4082082,
			-33.04576744, 8970.234514, -12764.25873, 6571.30021, -2789.911629, 765.5340176,
			4.541271903, 131.0991958, 2471.746017, 941.8548321, -584.3262046, 198.9386394,
			-2.440205715, -48.04697244, 2215.156033, -3817.219633, 1827.901811, -547.624387,
			0.080922012, 0.621992982, 12.32102292, 308.5094254, -109.1150279, 31.32679063,
			-0.031154192, -0.238957611, -3.200446854, 32.57715204, -82.86120536, 26.80674553,
			0.001016725, 0.007247499, 0.061922082, 0.124168114, 13.73545792, -4.339524187,
			-0.000215267, -0.00145688, -0.012320739, -0.009922702, 1.919616833, -1.303320239,
			2.7322E-06, 1.77866E-05, 0.00013732, 8.65014E-05, -0.000255515, 0.174262548,
			-4.58469E-07, -2.98437E-06, -2.28023E-05, -1.3261E-05, 5.05354E-05, 0.0425964,
			355.1213444, -125.6389761, 61.886021, -28.98979721,
			3974.526463, -1924.116176, 881.4440703, -322.2450658,
			5685.596312, -9942.494025, 6657.733043, -3183.086639,
			621.2976008, -25748.76741, 23781.28848, -13295.49279,
			-33.84699657, 7590.531217, -5224.376428, 2602.101337,
			1.583317262, 563.329493, -866.1622703, 311.5068067,
			-0.130449366, -0.30721813, 318.6095362, -149.030414,
			0.022362751, 0.376431662, 78.05730241, -85.21208983,
			-0.000161619, -0.002867882, 0.091512611, 8.250645513,
			1.73469E-05, 0.000264206, -0.005790958, 0.656117594,
			703.755537, -255.5728809, 87.66144907,
			5702.732827, -2633.095909, 684.3454782,
			11271.69093, -5169.093216, 1513.83118,
			638.729264, -560.4285222, 6.530593507,
			-50.93031218, 817.0217812, -150.417228,
			1.035095485, 164.9208964, -69.37610685,
			-0.036672909, 4.135787916, 3.90717021,
			0.000452465, -0.002524324, 1.727062926,
			-9.76209E-06, 9.08913E-05, 0.089067091,
			49.86542318, 14.29321999, -5.83676282, 1.147939563, -0.905940059, 0.101440888,
			825.3422985, -300.2340163, 135.5332532, -62.41825366, 25.4420061, -6.906121671,
			167.1157348, -4301.239767, 2134.90289, -1077.243452, 418.7245337, -120.9337316,
			7.889459429, 4818.531294, -2358.324668, 1156.499584, -457.4687228, 129.3084375,
			-34.83790636, 9115.495521, -13519.7433, 6987.666011, -2955.879826, 793.9821713,
			5.004778348, 138.5461223, 2585.009728, 1152.355661, -693.3182835, 229.9482845,
			-2.675524568, -50.37220661, 2508.863221, -4281.399219, 2040.4858, -600.0820776,
			0.088163759, 0.637166156, 13.82268976, 334.5514485, -116.8667798, 33.08701486,
			-0.033900079, -0.245681162, -3.588644324, 39.6207969, -92.42794011, 29.0797025,
			0.0010259, 0.006925206, 0.063945257, 0.136378058, 14.51877378, -4.470849069,
			-0.000214949, -0.001374139, -0.012603035, -0.010815996, 2.131392255, -1.380422698,
			2.53088E-06, 1.56859E-05, 0.000131244, 8.80245E-05, -0.00023387, 0.178272778,
			-4.27097E-07, -2.63231E-06, -2.17994E-05, -1.35451E-05, 4.6388E-05, 0.042185658,
			361.4726709, -127.5748428, 63.80961908, -28.98243785,
			4171.180518, -2027.142031, 932.674188, -339.5878252,
			6134.830387, -10737.60539, 7327.761274, -3387.986717,
			679.2288514, -28043.14433, 26868.39232, -14287.43634,
			-35.53601348, 8154.562009, -5746.873514, 2755.709094,
			1.680429329, 622.9133355, -945.9896093, 349.6203362,
			-0.136136269, -0.09212724, 347.4576815, -163.8208337,
			0.023848939, 0.362919779, 82.92291837, -89.98049326,
			-0.000172388, -0.002781765, 0.098829447, 8.81284395,
			1.86256E-05, 0.000254387, -0.006184689, 0.774923463,
			737.5343536, -268.0761732, 94.85369209,
			6158.47903, -2868.177406, 774.6806679,
			12537.60783, -5820.714558, 1761.435711,
			704.4448862, -681.8269606, 20.40810917,
			-73.11040792, 989.5784576, -189.7612015,
			1.289453958, 191.0895926, -83.4614901,
			-0.043004261, 4.923087185, 4.686779462,
			0.000619103, -0.002466227, 2.122757271,
			-1.12682E-05, 0.000110271, 0.109294326,
			757.4792035,
			494.3342487,
			182.9196288,
			34.56690553,
			2.516450755,
			0.062871282,
			51.08936647, 14.78854506, -5.95976344, 1.116098686, -0.914590291, 0.071376038,
			846.9803181, -308.5630174, 139.6316094, -64.20231712, 25.307554, -6.533448854,
			171.699053, -4496.582196, 2243.033752, -1131.808444, 423.7002264, -117.7645433,
			8.14957873, 5035.37236, -2474.687208, 1213.082043, -462.7986015, 125.3858312,
			-37.53258774, 9173.893956, -14283.48278, 7366.55118, -3016.493552, 767.2983674,
			5.529760228, 144.2217775, 2704.017121, 1328.64712, -748.9627112, 239.5104049,
			-2.891462483, -50.72114461, 2837.521935, -4715.429212, 2156.756022, -607.1287545,
			0.092108296, 0.618099578, 15.1677053, 342.4675753, -117.7067181, 32.83460221,
			-0.03269805, -0.222659718, -3.521044609, 65.43431604, -98.92835336, 28.48403719,
			0.000686914, 0.004351367, 0.042061843, 0.111230785, 13.07640422, -3.751019021,
			-0.00014383, -0.000861086, -0.008375243, -0.009023423, 1.582857468, -1.055668066,
			1.88943E-06, 1.09679E-05, 9.84345E-05, 7.76047E-05, -0.000626598, 0.154931825,
			-3.46253E-07, -2.00977E-06, -1.78471E-05, -1.31275E-05, 0.000100029, 0.033334103,
			369.403876, -129.4915365, 66.90746893, -27.7620657,
			4372.284836, -2133.53214, 978.4249267, -341.1026309,
			6536.693546, -11504.87114, 8165.887176, -3427.603517,
			684.7081531, -30101.32577, 31249.39007, -14547.52112,
			-32.83395992, 8708.525186, -6454.278803, 2774.926256,
			1.543920475, 697.5603009, -995.8126176, 374.0087999,
			-0.121284992, 0.495729386, 366.0011754, -168.6112974,
			0.018914642, 0.254323452, 78.70475497, -76.45888736,
			-0.000143533, -0.001829354, 0.089553341, 7.868227727,
			1.52752E-05, 0.000179722, -0.005735358, 0.861976986,
			754.4189974, -265.976537,
			6660.393214, -3098.167879,
			14152.41743, -6527.232297,
			934.149561, -833.0813918,
			-19.4164931, 1045.278675,
			0.701547426, 218.7273656,
			-0.011778514, 6.423214746,
			841.6187065,
			556.2156456,
			186.2510464,
			35.4712353,
			2.743071844,
			0.081083203,
			52.50091982, 15.43525295, -6.107619908, 1.12374435, -0.923135173, 0.062707709,
			868.6249237, -317.0974805, 143.7805352, -66.29304171, 26.00337717, -6.636139367,
			175.4907111, -4698.691446, 2357.360331, -1193.319756, 445.0742233, -122.4908511,
			8.416058781, 5262.722528, -2598.179483, 1277.762438, -485.4378999, 130.1715321,
			-40.32650504, 9202.141846, -15053.77396, 7785.100783, -3173.30569, 796.5647631,
			6.117571877, 148.1334564, 2856.480986, 1485.230067, -829.7324962, 261.9717639,
			-3.120826168, -50.19083135, 3164.921187, -5161.965144, 2349.987846, -654.1076333,
			0.098945633, 0.595439368, 16.43865819, 371.5024491, -129.0380892, 35.74044988,
			-0.03453544, -0.212864542, -3.722410518, 72.46931361, -105.772746, 29.98184333,
			0.000720645, 0.004158475, 0.044253198, 0.118618418, 13.83672585, -3.89873377,
			-0.00014964, -0.000812839, -0.008727462, -0.009408985, 1.776557445, -1.140022767,
			1.86812E-06, 9.84355E-06, 9.74535E-05, 7.7479E-05, -0.000603498, 0.160666607,
			-3.39956E-07, -1.78477E-06, -1.75E-05, -1.29801E-05, 9.64085E-05, 0.034140576,
			357.1629926, -125.6268712, 66.8168482, -27.2948116,
			4598.994167, -2248.61042, 1034.000312, -358.4942059,
			8011.441921, -11923.52717, 8407.418655, -3436.214083,
			1235.017268, -27222.52137, 30678.94967, -14024.87462,
			-65.50129123, 8398.261989, -6326.50153, 2658.415707,
			3.491826817, 722.1031495, -1040.836984, 393.2239696,
			-0.189931959, 0.598626429, 399.4728326, -183.7692507,
			0.036235092, 0.262726314, 85.35621136, -81.72146084,
			-0.000271637, -0.001762181, 0.093793644, 8.362088375,
			2.86451E-05, 0.00017008, -0.005833624, 0.952533178,
			755.7954866, -263.9257868,
			7202.349087, -3371.150477,
			16021.75957, -7483.715526,
			1168.519412, -907.1099534,
			-3.851798892, 1104.113821,
			0.62808188, 238.0748445,
			-0.007899803, 6.768880757,
			951.5036911,
			657.4529719,
			211.815239,
			37.14608764,
			2.729003753,
			0.078552571,
			53.46354081, 15.88133794, -6.213411775, 1.118610068, -0.930613149, 0.054524786,
			890.9131257, -325.5037484, 147.9231039, -68.37629215, 26.69144176, -6.738473438,
			181.1527709, -4908.986772, 2473.457785, -1255.488611, 466.2591443, -127.1372663,
			8.640058549, 5493.594381, -2722.062342, 1342.446769, -507.7190717, 134.8318581,
			-43.08436471, 9278.414081, -15908.09966, 8245.129009, -3345.849152, 829.4695975,
			6.705165072, 154.1438982, 3006.454201, 1660.329489, -917.4715377, 286.0870431,
			-3.343095491, -50.48505237, 3519.909018, -5640.143614, 2554.413424, -703.4285722,
			0.105325104, 0.584850452, 17.8167497, 401.8200322, -140.7728034, 38.7117376,
			-0.036205965, -0.207424399, -3.942737298, 79.79775554, -112.7973961, 31.50994403,
			0.00075213, 0.004054825, 0.046789505, 0.12573616, 14.61330447, -4.049290152,
			-0.000154425, -0.000781946, -0.009127982, -0.009676926, 1.98153375, -1.226496125,
			1.86814E-06, 9.0667E-06, 9.75915E-05, 7.65189E-05, -0.000590232, 0.166290555,
			-3.33601E-07, -1.62829E-06, -1.73631E-05, -1.26927E-05, 9.48937E-05, 0.035173409,
			343.5736939, -120.9693709, 65.88420967, -26.65643916,
			4832.823105, -2367.616154, 1091.779806, -376.2835507,
			9709.089321, -12549.64354, 8711.057341, -3489.018632,
			1789.671297, -24436.73167, 29810.2765, -13535.67931,
			-90.98032102, 8210.330337, -6232.54204, 2579.786548,
			5.630083006, 717.0989813, -1073.929881, 404.5410971,
			-0.285193144, 0.459510784, 441.8025623, -201.6353478,
			0.058531742, 0.336130036, 100.2114058, -91.8729344,
			-0.000404446, -0.00187831, 0.100900336, 8.819880011,
			4.25828E-05, 0.000180573, -0.006245117, 1.008565988,
			801.5604789, -281.8537843,
			7725.599341, -3637.915371,
			17529.2226, -8284.172303,
			1201.484789, -965.2923417,
			-12.12902825, 1262.297768,
			0.800708915, 263.9123636,
			-0.008264236, 7.340682148,
			1071.603061,
			762.0610955,
			236.8841006,
			40.70625271,
			2.985883102,
			0.086098573,
			56.04001119, 16.71776925, -6.426051614, 1.13320957, -0.959837326, 0.049163105,
			911.7799543, -334.3716373, 152.2079686, -70.48004715, 27.38360922, -6.841439355,
			180.2688409, -5116.045369, 2591.819266, -1319.033554, 487.266945, -131.7621229,
			9.236094657, 5733.836622, -2852.92836, 1410.515175, -530.719151, 139.6861722,
			-47.6351089, 9266.314641, -16751.60282, 8697.579649, -3514.500781, 860.9863629,
			7.583861986, 159.1408931, 3194.38239, 1799.584985, -986.2420112, 304.9133631,
			-3.662038309, -49.95501313, 3880.790443, -6105.165982, 2747.472966, -749.0413006,
			0.115269615, 0.5758696, 19.21022514, 432.7140458, -152.2524579, 41.58305705,
			-0.038990244, -0.203023176, -4.146681976, 88.46809612, -120.5473765, 33.21701117,
			0.00080283, 0.003963015, 0.048783441, 0.133101067, 15.34568356, -4.182655055,
			-0.00016416, -0.000758292, -0.00946522, -0.010040073, 2.203614921, -1.318644937,
			1.85531E-06, 8.37464E-06, 9.60378E-05, 7.54491E-05, -0.000509359, 0.17216443,
			-3.32366E-07, -1.48349E-06, -1.68858E-05, -1.23705E-05, 8.21511E-05, 0.035681948,
			323.4330921, -113.8758371, 63.96660648, -25.57605418,
			5079.04742, -2492.247536, 1151.854111, -394.5090846,
			11887.56245, -13396.37643, 9150.216429, -3579.328121,
			2387.079406, -20970.95419, 28876.61874, -12958.09979,
			-109.2512598, 8019.761492, -6195.024212, 2515.468542,
			7.792071017, 681.4130403, -1061.070304, 399.8123356,
			-0.400631283, 0.177382359, 484.412669, -219.7824817,
			0.085031603, 0.415951697, 111.6871625, -99.79437278,
			-0.000563775, -0.002031612, 0.106244684, 9.289144218,
			5.89685E-05, 0.000193508, -0.006470787, 1.096251137,
			800.8139591, -278.8934087,
			8325.354121, -3938.839312,
			19714.36216, -9424.692075,
			1455.642681, -1051.151797,
			-1.504017392, 1353.994556,
			0.784616641, 285.1108486,
			-0.005340885, 7.709969188,
			1204.559071,
			880.1854164,
			258.9029677,
			42.73824883,
			3.147058863,
			0.092179463,
			58.46679459, 17.61767198, -6.689600668, 1.173637412, -1.006879843, 0.059956122,
			932.987692, -343.3737844, 156.5784324, -72.60989496, 28.07504663, -6.958765558,
			179.7847431, -5333.228971, 2714.786957, -1384.685137, 508.2817331, -136.0355117,
			9.765730126, 5985.534616, -2989.369358, 1481.124167, -554.009614, 144.447466,
			-51.93891116, 9324.456657, -17685.74974, 9194.201098, -3699.957012, 899.3340365,
			8.462479398, 161.4278511, 3411.73002, 1931.067626, -1047.72011, 319.5375414,
			-3.962679473, -48.26791807, 4248.838036, -6582.502212, 2939.802613, -792.5551356,
			0.125545348, 0.542004662, 20.78841105, 461.6559238, -161.4365561, 43.52507705,
			-0.041690402, -0.190233597, -4.361911857, 101.6408843, -130.9857865, 35.81552762,
			0.000806378, 0.003509801, 0.047930323, 0.139667891, 16.13148137, -4.380828268,
			-0.000162909, -0.00066129, -0.009210391, -0.010580636, 2.22474836, -1.322294768,
			1.91469E-06, 7.5509E-06, 9.71369E-05, 8.22508E-05, -0.000600728, 0.177607865,
			-3.35408E-07, -1.31648E-06, -1.68123E-05, -1.32738E-05, 9.3822E-05, 0.037633829,
			-316.1991674, -110.6984349, 63.54696371, -25.11004443,
			-5318.193422, -2616.111721, 1211.670313, -412.0698419,
			-13407.66162, -14316.74084, 9776.840434, -3757.916622,
			-2738.127319, -19756.06909, 30030.48929, -13252.25963,
			115.2263719, 8228.620313, -6499.735285, 2593.477943,
			-8.754393191, 668.6984378, -1056.830107, 399.083923,
			0.467585438, -0.036286191, 524.5467204, -236.9609542,
			-0.099925993, 0.476330954, 120.0634614, -105.5288145,
			0.000647053, -0.002125347, 0.109449975, 9.7669478,
			-6.66935E-05, 0.000198572, -0.00649643, 1.177794572,
			826.2217565, -287.5945685,
			8927.320667, -4241.944373,
			21731.508, -10499.07905,
			1585.127117, -1113.284972,
			-2.751349683, 1498.763844,
			0.910217451, 310.8677255,
			-0.004662245, 8.266505508,
			1346.087702,
			1010.652955,
			284.8459502,
			44.69265171,
			3.242840781,
			0.095244873,
			62.82536309, 19.03393857, -7.097461572, 1.218303487, -1.038499932, 0.10752372,
			952.4511165, -352.9455381, 161.1188441, -74.98769399, 29.6489207, -7.641889844,
			172.4147557, -5545.669906, 2840.962143, -1458.601484, 549.630436, -150.1911432,
			10.65361598, 6248.071012, -3134.858973, 1562.321311, -599.0280188, 160.4824696,
			-58.2192488, 9240.263449, -18584.6086, 9678.22303, -3979.027643, 1011.130026,
			9.678015697, 160.4307284, 3638.61659, 2010.890944, -1135.405025, 348.0783392,
			-4.266218622, -43.86908041, 4679.492348, -7041.903809, 3226.614838, -891.3479097,
			0.137671041, 0.470286237, 21.69901386, 517.919242, -186.5976639, 50.21088252,
			-0.047847548, -0.176024802, -4.854552946, 85.65089458, -138.025559, 40.5327581,
			0.001161271, 0.004171661, 0.067988516, 0.161469806, 19.60877542, -5.672683664,
			-0.000234542, -0.000781562, -0.012934017, -0.011333745, 2.757811916, -1.669953762,
			2.89102E-06, 9.33179E-06, 0.000141258, 9.566E-05, -0.000350912, 0.223532533,
			-4.42355E-07, -1.41132E-06, -2.11277E-05, -1.31548E-05, 5.9897E-05, 0.053371484,
			-307.9672538, -107.6045676, 62.10673905, -25.47844065,
			-5563.903663, -2742.863869, 1279.119281, -449.0616076,
			-15110.90452, -15403.28003, 10377.85914, -4148.882963,
			-3164.294149, -18972.84646, 30335.01184, -14400.87881,
			121.1336239, 8537.26501, -6739.319033, 2832.81818,
			-9.77514946, 620.190914, -1083.071853, 405.2585725,
			0.645488635, -1.536262952, 595.450566, -273.4710738,
			-0.141106889, 0.806298459, 152.3057167, -141.6012987,
			0.000827828, -0.003448369, 0.128198195, 11.96889464,
			-8.44038E-05, 0.000304543, -0.00749299, 1.205744359,
			923.3355089, -349.0535046, 112.9309379,
			9482.268366, -4544.535289, 1105.272649,
			22582.49817, -11358.74117, 3035.228394,
			1040.211813, -239.7981488, -115.2702822,
			-59.75360016, 1356.414433, -294.5787786,
			2.060600901, 241.2450407, -94.66171986,
			-0.045816284, 3.145419123, 8.950739828,
			0.000993144, -0.006891939, 2.400584599,
			-1.43765E-05, 0.000161937, 0.111914542,
			1553.65324,
			1200.041279,
			318.4529551,
			46.80681055,
			3.30984851,
			0.080600524,
			68.31074791, 20.590208, -7.645205371, 1.370282891, -1.136361639, 0.054098067,
			970.9792417, -362.7564504, 165.853724, -77.06809587, 29.59796917, -7.174723209,
			160.5845963, -5761.173827, 2963.870591, -1519.866265, 553.8847736, -146.0057588,
			11.89037006, 6520.389677, -3281.796967, 1633.542623, -606.590424, 155.462461,
			-66.1529072, 9409.221898, -19687.85897, 10250.57663, -4093.771057, 970.8388835,
			11.19558487, 162.3170624, 3926.846415, 2139.037765, -1161.776914, 350.9702348,
			-4.824967931, -42.88528428, 5044.601068, -7552.190734, 3343.509135, -884.2305608,
			0.1530985, 0.443892129, 23.57194282, 535.7851161, -190.7012627, 50.75102492,
			-0.049540456, -0.158442052, -4.751307693, 116.4183246, -145.7113625, 38.8038544,
			0.000984691, 0.003074563, 0.054045838, 0.157961925, 17.91126561, -4.708193122,
			-0.000193868, -0.000557895, -0.010123003, -0.011123727, 2.821743827, -1.554756843,
			2.04751E-06, 5.68113E-06, 9.4647E-05, 7.8065E-05, -0.000435572, 0.189816347,
			-3.50954E-07, -9.73897E-07, -1.61439E-05, -1.2415E-05, 7.12173E-05, 0.039029677,
			-316.3193506, -109.7248735, 64.636249, -25.1364843,
			-5799.506658, -2868.176132, 1334.954089, -449.3806818,
			-15881.47166, -16257.20837, 11172.01881, -4198.291868,
			-3307.809248, -19383.09217, 33996.15487, -14603.28839,
			121.6400024, 9040.337843, -7394.882009, 2878.52335,
			-9.747563916, 643.86424, -1060.178702, 404.0541668,
			0.603780616, -1.157115234, 618.3894194, -277.7214733,
			-0.128711815, 0.739189653, 142.9228566, -121.7517574,
			0.000786582, -0.002923348, 0.121160929, 10.91839171,
			-7.85509E-05, 0.000268834, -0.006824784, 1.368966646,
			890.2598169, -310.5750445,
			10206.80334, -4894.272817,
			26123.9066, -12877.26646,
			1871.894776, -1245.197795,
			-4.598390723, 1824.65122,
			1.164870142, 368.989633,
			-0.001745634, 9.294263679,
			1637.903388,
			1310.565819,
			345.9169083,
			47.13644727,
			3.053594953,
			0.082876446,
			70.30467602, 21.27540918, -7.895103338, 1.419121011, -1.193313226, 0.066894593,
			993.1847989, -371.7510327, 170.3141911, -79.25287583, 30.3299273, -7.295564106,
			162.1014019, -5997.525787, 3092.388224, -1588.02804, 575.498804, -150.2222227,
			12.4113755, 6787.373393, -3423.437234, 1706.613318, -630.6034372, 160.1547953,
			-71.18467758, 9578.82534, -20863.60889, 10874.44169, -4330.903816, 1019.47841,
			12.27060273, 171.3721027, 4155.603244, 2339.591693, -1253.121587, 373.0280443,
			-5.190058959, -44.20126028, 5487.358831, -8147.901157, 3584.359171, -938.1133946,
			0.165354349, 0.461581854, 25.81410262, 566.6737156, -198.903772, 52.29500099,
			-0.05291258, -0.164132418, -5.12502917, 134.1700062, -159.8979304, 42.26946443,
			0.000977506, 0.002978136, 0.054125609, 0.171602315, 18.83577063, -4.937542821,
			-0.000191279, -0.000535724, -0.010074489, -0.012662504, 2.833915702, -1.555041633,
			2.08799E-06, 5.68903E-06, 9.84989E-05, 9.30519E-05, -0.00053492, 0.195629242,
			-3.54988E-07, -9.6484E-07, -1.65297E-05, -1.46182E-05, 8.37408E-05, 0.041503974,
			-322.7517248, -111.7511018, 65.95436862, -25.44366358,
			-6042.764719, -2996.627264, 1397.861593, -467.7953847,
			-16706.04427, -17265.31497, 11962.36289, -4450.280971,
			-3461.945105, -20677.0131, 37323.862, -15742.05896,
			120.9268899, 9650.542098, -7997.8618, 3072.899128,
			-9.62330636, 675.1604022, -1099.98197, 422.1978761,
			0.602517653, -1.286187913, 661.6827013, -296.637405,
			-0.128314727, 0.801397152, 152.0819278, -127.9997407,
			0.000767591, -0.003022389, 0.125788969, 11.48878979,
			-7.55047E-05, 0.000274239, -0.006914739, 1.459667998,
			904.8457989, -314.3454088,
			10911.82974, -5250.915186,
			28783.73295, -14322.13236,
			2097.203295, -1324.212548,
			-1.769375884, 1988.427574,
			1.26541684, 398.4144516,
			0.000329423, 9.79910806,
			1802.867199,
			1477.157707,
			379.9525741,
			50.26941321,
			3.217357049,
			0.087415475,
			75.52443381, 22.91082067, -8.313914487, 1.475558178, -1.2158362, 0.042792437,
			1012.349149, -381.7628219, 174.9785759, -81.45731633, 31.02871262, -7.37965232,
			152.498962, -6223.860067, 3230.513045, -1662.664273, 601.1175534, -156.1795852,
			13.4256096, 7071.684925, -3583.231079, 1789.622574, -659.1191306, 166.2989758,
			-78.94539136, 9387.277053, -21896.35755, 11403.80638, -4514.446728, 1047.55523,
			13.90127207, 166.6780968, 4571.250508, 2288.368615, -1250.198062, 375.466784,
			-5.484770479, -38.47801733, 5904.583084, -8558.439013, 3751.09042, -974.4653091,
			0.175852237, 0.367518524, 26.28472241, 616.8696581, -223.1872311, 58.57252148,
			-0.055300249, -0.134520397, -5.055662009, 131.7910317, -159.9245764, 41.64410678,
			0.001121363, 0.002739263, 0.058864447, 0.172799238, 19.73443132, -5.052829897,
			-0.000214281, -0.000476617, -0.010702219, -0.011131569, 3.398060592, -1.766694162,
			2.09936E-06, 4.50746E-06, 9.25572E-05, 7.36938E-05, -0.000296628, 0.201828002,
			-3.58545E-07, -7.63058E-07, -1.55002E-05, -1.14918E-05, 5.24212E-05, 0.041010737,
			-330.7471387, -113.8148939, 67.73069153, -25.97836555,
			-6290.477244, -3128.286291, 1461.899324, -486.3333144,
			-17569.10811, -18242.38747, 12734.49622, -4706.495076,
			-3654.623584, -21469.32804, 40345.56356, -16892.94383,
			122.3751569, 10255.55576, -8605.729424, 3283.128195,
			-9.717998281, 674.5205168, -1120.024124, 428.6821018,
			0.661637757, -2.220555648, 717.5980361, -319.6370314,
			-0.13906598, 1.017467973, 169.3238181, -139.261094,
			0.000793505, -0.003687104, 0.133304301, 12.05569508,
			-7.74423E-05, 0.000335209, -0.007218972, 1.552010244,
			924.57293, -321.0772486,
			11643.56553, -5621.305223,
			31568.07129, -15858.76735,
			2314.552181, -1374.484771,
			-0.331648692, 2156.925778,
			1.380005146, 426.2743263,
			0.002107859, 10.17427325,
			1973.667004,
			1660.966669,
			420.1342442,
			53.30753088,
			3.258038801,
			0.08503256,
			77.31963463, 23.68959013, -8.515520032, 1.552041985, -1.295545619, 0.067549353,
			1035.122704, -390.9856321, 179.4591667, -83.69282288, 31.78505292, -7.511694277,
			155.1782631, -6472.982717, 3370.239651, -1734.526933, 623.3171138, -160.2436251,
			13.79421105, 7353.246874, -3735.304966, 1866.801773, -684.0732105, 171.0125887,
			-83.4522584, 9472.028342, -23129.9274, 12083.3968, -4776.439437, 1102.668446,
			14.99469685, 174.464021, 4929.585889, 2414.123354, -1306.596622, 387.4843839,
			-5.827320227, -39.58120063, 6319.160464, -9148.875922, 3984.077698, -1024.458922,
			0.189712829, 0.39232613, 28.73245634, 647.9244307, -229.6070912, 59.44468678,
			-0.058752043, -0.142452279, -5.401156892, 156.2978284, -178.2521433, 46.19592842,
			0.001069481, 0.002625979, 0.056129393, 0.188191931, 20.7450003, -5.32930416,
			-0.000204246, -0.000455565, -0.01019875, -0.013220158, 3.252801132, -1.707268919,
			2.14888E-06, 4.68846E-06, 9.59507E-05, 9.45833E-05, -0.000494796, 0.207981437,
			-3.54093E-07, -7.75176E-07, -1.57236E-05, -1.45082E-05, 7.76707E-05, 0.044134512,
			-336.4694262, -115.0521374, 68.85041564, -26.27611566,
			-6546.619856, -3264.145642, 1528.152712, -505.4635425,
			-18489.57342, -19256.59604, 13564.42683, -4963.941711,
			-3821.690597, -22001.13544, 43750.58301, -17994.79018,
			121.8993249, 10843.53225, -9251.320353, 3484.258271,
			-9.685680817, 696.1788216, -1134.233017, 438.6036098,
			0.663416743, -2.315288773, 760.5977864, -338.7247002,
			-0.140749775, 1.065152631, 175.5128982, -143.5917606,
			0.000800661, -0.003740229, 0.136234852, 12.67634782,
			-7.64833E-05, 0.000333389, -0.007140008, 1.6464654,
			951.1072881, -330.3246869,
			12401.41301, -6006.055301,
			34472.27724, -17466.2101,
			2555.863884, -1446.303201,
			2.823790634, 2345.840375,
			1.474001739, 458.346212,
			0.005013908, 10.67717015,
			2136.55219,
			1854.60889,
			483.4727985,
			63.10605503,
			3.896865863,
			0.102785187,
			84.61695357, 25.77530598, -9.230065522, 1.6957057, -1.361295863, 0.054876686,
			1052.575672, -401.5820198, 184.4854387, -86.0033998, 32.51969436, -7.605686699,
			139.2493892, -6705.11585, 3507.417583, -1809.856858, 648.5009421, -165.9185254,
			15.23709121, 7658.464225, -3903.142852, 1954.253248, -713.5873159, 177.2624257,
			-93.84389556, 9505.443951, -24439.71798, 12734.11508, -5001.571453, 1140.623302,
			17.18119608, 169.7712079, 5342.224709, 2437.296211, -1336.786182, 397.7718994,
			-6.259678234, -34.48414587, 6821.452096, -9665.861499, 4192.152823, -1069.792774,
			0.202779677, 0.291641461, 29.64239728, 699.7234697, -253.7293091, 65.41283428,
			-0.062004581, -0.112447306, -5.457493258, 155.5470641, -179.4992653, 45.96300168,
			0.001205874, 0.00228217, 0.061028867, 0.190641825, 21.7222147, -5.485254346,
			-0.000225065, -0.000380549, -0.010827166, -0.012022071, 3.727479433, -1.8775331,
			2.20034E-06, 3.60056E-06, 9.38814E-05, 8.0546E-05, -0.000335653, 0.214162197,
			-3.59162E-07, -5.92131E-07, -1.53178E-05, -1.226E-05, 5.78736E-05, 0.044223884,
			-343.2496692, -116.6543279, 70.22406622, -26.67843185,
			-6807.820309, -3402.984564, 1595.645602, -524.6242508,
			-19439.72095, -20299.67265, 14402.44564, -5229.551823,
			-4005.054531, -22455.38962, 47087.18449, -19156.68481,
			121.8758969, 11461.78428, -9910.326355, 3698.650817,
			-9.659262879, 704.5616185, -1145.119399, 444.0783466,
			0.690734968, -2.896360524, 812.2577619, -360.3767798,
			-0.146217618, 1.207394369, 187.4458255, -151.3614199,
			0.000810426, -0.004105696, 0.141297474, 13.28204552,
			-7.63747E-05, 0.000361753, -0.007233832, 1.744092549,
			987.7763341, -343.0995562,
			13182.62721, -6403.762793,
			37415.0341, -19099.17625,
			2734.701314, -1506.814406,
			0.71365407, 2566.091694,
			1.683184497, 496.7867897,
			0.006450391, 11.44215099,
			2346.90394,
			2072.142118,
			512.4186503,
			62.50838508,
			3.709640652,
			0.096116227,
			89.69022361, 27.38254985, -9.72780273, 1.827147048, -1.448654925, 0.069722233,
			1072.434394, -411.7664827, 189.3282811, -88.30735467, 33.2644391, -7.725249567,
			130.9073959, -6953.179068, 3652.044399, -1886.117537, 672.411374, -170.6477468,
			16.27317466, 7964.994859, -4071.344751, 2040.305785, -741.4885224, 182.7891298,
			-102.4746727, 9556.124496, -25811.02825, 13451.59452, -5262.796036, 1192.250127,
			19.19207981, 168.8353692, 5811.727088, 2472.147605, -1361.899221, 403.464436,
			-6.708447958, -31.87883716, 7290.395917, -10230.39075, 4411.381087, -1115.874307,
			0.218964375, 0.241618556, 31.37986815, 742.7744209, -269.1118257, 68.69739708,
			-0.065918396, -0.098349402, -5.632501576, 169.6857124, -190.3338048, 48.42061836,
			0.001248946, 0.001998314, 0.061267739, 0.199312351, 22.70527177, -5.705645969,
			-0.000231324, -0.000325104, -0.010768614, -0.012511134, 3.871752141, -1.921845255,
			2.23984E-06, 3.10132E-06, 9.33841E-05, 8.39079E-05, -0.000344108, 0.22046096,
			-3.67165E-07, -5.06093E-07, -1.50538E-05, -1.26225E-05, 5.8548E-05, 0.045379023,
			-349.2847776, -117.9609285, 71.43476758, -27.02740365,
			-7075.990438, -3545.514532, 1664.771496, -543.9034922,
			-20391.57051, -21386.24464, 15288.12778, -5506.276332,
			-4149.642772, -22972.88494, 50760.16643, -20406.56723,
			119.9983621, 12116.30015, -10615.92319, 3924.3099,
			-9.416082531, 718.8694016, -1154.894841, 449.5366146,
			0.693100975, -3.376613294, 862.6237716, -381.3850329,
			-0.14619252, 1.3329759, 197.6253658, -157.8569792,
			0.000794893, -0.004432075, 0.145131784, 13.88883732,
			-7.37402E-05, 0.00038585, -0.007239401, 1.841309411,
			1012.343799, -352.1718922,
			14011.79923, -6822.856527,
			40693.90993, -20949.3677,
			2950.176167, -1519.655158,
			-0.297805878, 2768.633586,
			1.8630949, 528.7179758,
			0.007764349, 11.91983324,
			2535.834518,
			2301.99467,
			579.886364,
			71.49114823,
			4.210319355,
			0.107602698,
			95.41949981, 29.03010069, -10.24143837, 1.867542775, -1.486617686, 0.165713174,
			1091.815599, -422.0445291, 194.210611, -90.71813811, 34.89867188, -8.642241097,
			121.5930592, -7202.497227, 3798.008557, -1971.056392, 719.9888423, -189.3576095,
			17.38582513, 8275.382755, -4242.16952, 2134.385606, -793.8085286, 204.7058887,
			-112.4449398, 9491.404113, -27249.6104, 14153.66762, -5644.722838, 1375.737394,
			21.60642892, 170.3070736, 6257.3755, 2519.252228, -1449.01752, 433.1113635,
			-6.997519654, -28.49991759, 7904.494008, -10826.16313, 4777.678329, -1261.609915,
			0.229596704, 0.177055765, 32.3522628, 812.9273951, -303.5026112, 78.91033183,
			-0.071825967, -0.08320112, -6.160060688, 149.6814507, -196.4523247, 54.79862644,
			0.001634621, 0.002152612, 0.081346413, 0.201768633, 26.81948676, -7.320429638,
			-0.000316609, -0.000364923, -0.014879603, -0.011945829, 4.198568611, -2.317040487,
			3.66043E-06, 4.09968E-06, 0.000152957, 9.53175E-05, -7.30133E-05, 0.291021931,
			-5.06463E-07, -5.71394E-07, -2.09338E-05, -1.18175E-05, 3.53874E-05, 0.067020744,
			-358.4400046, -121.5544729, 72.28357901, -28.09394631,
			-7346.927375, -3688.93726, 1740.33507, -586.7574928,
			-21339.56177, -22702.13794, 16161.67972, -6054.90812,
			-4435.425739, -25518.67059, 54094.10083, -23049.85471,
			122.7745745, 12968.75905, -11246.42829, 4353.571018,
			-9.708419655, 752.4834066, -1278.749632, 494.627546,
			0.789508131, -4.990766573, 949.9756993, -428.8629637,
			-0.170038508, 1.735236724, 238.8962896, -201.9054124,
			0.00084892, -0.005632102, 0.161508983, 16.52362007,
			-8.15697E-05, 0.000487499, -0.008546108, 1.812226334,
			2781.708042, -1188.390019, 226.4623591,
			13078.75523, -6467.686286, 1309.807237,
			24381.36527, -13244.56417, 2703.326619,
			425.8193832, 2753.063095, -655.5399211,
			-15.05984016, 849.9233793, -202.4188933,
			1.115126346, 54.27562037, -10.34080218,
			-0.020846771, 0.172338203, 7.917469171,
			0.000599338, -0.000642217, 1.077988991,
			-1.39785E-05, 1.69598E-05, 0.047312775,
			2783.607913,
			2607.853231,
			693.3710317,
			95.30056848,
			6.219012829,
			0.155228112,
			99.7696062, 30.4887038, -10.58521075, 1.895346492, -1.492661055, 0.217826918,
			1112.75478, -432.1961512, 198.9565183, -93.16695073, 36.49270132, -9.274308875,
			116.7636616, -7463.958634, 3954.563262, -2060.372314, 769.8315185, -204.5527937,
			18.18080722, 8591.069912, -4418.735235, 2231.44098, -847.5272025, 221.9647466,
			-121.0297214, 9334.079858, -28728.09072, 14900.31554, -6038.72601, 1517.390706,
			24.05728958, 169.3196437, 6861.254492, 2475.870485, -1505.275257, 449.6673786,
			-7.220158109, -25.03079807, 8476.739748, -11403.44227, 5141.992598, -1378.115239,
			0.238708997, 0.112184215, 32.96560602, 892.4012541, -343.82364, 89.40385373,
			-0.076726333, -0.06608412, -6.522798879, 124.9079103, -200.9824353, 59.04233961,
			0.002237081, 0.002357315, 0.112473432, 0.207625882, 31.69211281, -9.05491644,
			-0.000422214, -0.000384386, -0.019929498, -0.008499201, 5.284472537, -2.865411988,
			4.7209E-06, 4.17618E-06, 0.00019616, 7.34766E-05, 0.000583939, 0.348760285,
			-5.89494E-07, -5.13918E-07, -2.40634E-05, -7.79946E-06, -1.81534E-05, 0.081886532,
			-363.1304289, -123.057768, 72.42806178, -28.76062776,
			-7628.628222, -3837.869152, 1819.376688, -630.1938729,
			-22415.31642, -24049.03733, 17071.25649, -6625.408279,
			-4650.358374, -27473.89957, 57265.92605, -25820.63683,
			121.1396614, 13791.85989, -11882.72946, 4801.395004,
			-9.606071834, 782.3514789, -1402.138915, 533.6092597,
			0.863145058, -6.893292222, 1044.589119, -478.1811036,
			-0.1889701, 2.205068911, 286.7905482, -257.0186715,
			0.000881119, -0.007103311, 0.187488002, 19.56754286,
			-8.46835E-05, 0.000584099, -0.009718518, 1.918362047,
			2765.512574, -1181.604283, 255.7365573,
			14018.86432, -6978.76352, 1585.783515,
			27539.21854, -15119.03113, 3493.678962,
			511.3201218, 2973.007676, -811.5533837,
			-20.00249297, 984.4045462, -258.4243705,
			1.604710823, 70.13840924, -19.42937276,
			-0.036025971, 0.271362676, 11.2702075,
			0.001194262, -0.001283358, 1.751556673,
			-3.07944E-05, 3.89915E-05, 0.076565155,
			3127.294239,
			2967.01551,
			725.8189139,
			90.91154175,
			5.398463566,
			0.098410295,
			97.88884337, 30.6809064, -10.55563124, 1.914756039, -1.474241508, 0.242834497,
			1140.102921, -441.1440775, 203.3621026, -95.65274804, 38.06999087, -9.800334921,
			129.980527, -7761.831172, 4120.595645, -2151.355799, 820.5896235, -218.9530866,
			17.94523591, 8903.532977, -4588.485168, 2324.013713, -899.7188373, 237.2953473,
			-123.7886399, 9305.9625, -30345.23023, 15776.72843, -6490.901856, 1655.889994,
			25.30865635, 176.3598972, 7432.512006, 2507.536318, -1596.47729, 476.3836832,
			-7.279099983, -24.45551745, 9050.001282, -12076.54414, 5555.582502, -1499.765981,
			0.244293112, 0.092531418, 34.34398492, 971.7784275, -381.6487156, 98.89083486,
			-0.080753104, -0.062350822, -7.059332377, 106.291694, -212.4719644, 64.67661602,
			0.002959532, 0.002894344, 0.156876944, 0.238648693, 37.4583621, -11.05699976,
			-0.000526458, -0.000440891, -0.025999505, -0.006258039, 6.893014494, -3.560526831,
			5.34647E-06, 4.41975E-06, 0.000232251, 6.77932E-05, 0.001299834, 0.403752107,
			-6.26805E-07, -5.08221E-07, -2.63597E-05, -6.52216E-06, -6.5679E-05, 0.093831646,
			-371.3760525, -126.4938166, 73.44474278, -29.67234306,
			-7912.957059, -3988.351837, 1900.150437, -674.2917775,
			-23517.35072, -25515.40398, 18066.66569, -7225.772128,
			-4987.317845, -30312.59221, 61140.68645, -28837.98729,
			124.086152, 14712.22568, -12589.91407, 5272.654158,
			-9.936848295, 816.8881229, -1540.351771, 579.6376678,
			0.987284751, -9.541553152, 1148.911586, -531.9310999,
			-0.222707999, 2.842007768, 341.800615, -323.1616844,
			0.000992333, -0.009251436, 0.222466031, 22.99584276,
			-9.47686E-05, 0.000723462, -0.011131288, 2.120409645,
			2896.67381, -1242.597219, 291.8353715,
			14844.85169, -7447.487717, 1828.175854,
			29824.03274, -16565.00399, 4153.13952,
			577.1370958, 3245.293177, -969.1825198,
			-23.34461369, 1109.075745, -312.1525961,
			1.990357059, 80.98762911, -27.69562573,
			-0.051343889, 0.350255608, 15.02834435,
			0.001795178, -0.001705099, 2.433577245,
			-4.76152E-05, 5.60846E-05, 0.102931981,
			3400.261604,
			3349.714418,
			849.5771488,
			111.4524084,
			6.39010013,
			0.08788158,
			99.0979897, 31.52085518, -10.70230726, 2.020470733, -1.525636461, 0.272642257,
			1164.536965, -450.8019553, 207.9776941, -98.26701502, 39.72193994, -10.27486195,
			134.1094089, -8052.174107, 4288.450779, -2242.605893, 870.706313, -232.2167503,
			18.25475521, 9229.296126, -4768.268461, 2421.486813, -953.5037045, 251.8006096,
			-129.5505379, 9289.24461, -32015.37296, 16735.11956, -6993.166478, 1796.02135,
			27.29199183, 178.9461403, 8140.117531, 2461.990378, -1648.603949, 491.8980665,
			-7.609017774, -23.7060526, 9558.893975, -12749.98254, 5971.599849, -1614.853418,
			0.263112229, 0.074884428, 36.08094427, 1051.895904, -414.5826509, 106.343845,
			-0.089932194, -0.060201257, -7.720937651, 94.58749856, -233.6963365, 72.94859073,
			0.003952135, 0.003484734, 0.209208699, 0.30873915, 44.24958727, -13.40890966,
			-0.00064663, -0.00048284, -0.031690004, -0.006241092, 8.900849373, -4.35316995,
			5.94449E-06, 4.47873E-06, 0.000253903, 8.22457E-05, 0.002021209, 0.456583298,
			-6.50028E-07, -4.82878E-07, -2.71897E-05, -7.57747E-06, -0.000108499, 0.104032839,
			-375.6877745, -128.3603778, 73.29615161, -29.95880144,
			-8207.646902, -4143.91448, 1984.655463, -719.9384485,
			-24786.91547, -27104.34118, 19051.78176, -7829.658128,
			-5336.16376, -33346.50986, 64386.7639, -31765.00131,
			124.7012051, 15666.04338, -13227.89215, 5731.02427,
			-10.15883496, 850.7788238, -1737.051475, 643.1023222,
			1.160896862, -14.06160947, 1289.813639, -598.4814544,
			-0.259352088, 3.803949368, 427.3678274, -416.6295347,
			0.001057992, -0.012025843, 0.271824612, 26.73791352,
			-0.000102249, 0.000905436, -0.013222605, 2.369444188,
			2869.905312, -1232.317074, 308.7438923,
			15870.67731, -8015.648288, 2087.317719,
			33585.0133, -18858.89366, 5040.457764,
			694.0916095, 3470.412603, -1116.929858,
			-30.2357577, 1293.584725, -383.1029455,
			2.683431413, 105.706616, -42.04813771,
			-0.069564701, 0.49590198, 19.49665169,
			0.002544497, -0.003252516, 3.216213285,
			-6.85814E-05, 9.07793E-05, 0.131775957,
			3732.397597,
			3752.765066,
			943.4311607,
			128.3491699,
			7.655881964,
			0.102172174,
			108.0310199, 34.09242758, -11.42939012, 2.264795303, -1.676147284, 0.310561964,
			1181.420359, -462.2535835, 213.2074374, -101.0589635, 41.4692878, -10.69072239,
			115.7120977, -8314.758923, 4451.92026, -2334.851936, 920.4462789, -244.2405148,
			19.87804396, 9581.031442, -4966.854252, 2530.303287, -1011.466418, 265.9183208,
			-143.1841319, 9362.38082, -33813.29444, 17755.09345, -7531.450017, 1930.136842,
			31.23579016, 165.5735592, 9013.135106, 2332.323645, -1658.03349, 495.5494192,
			-8.373291245, -19.97877018, 10046.49248, -13419.16178, 6384.669024, -1719.659623,
			0.301221102, -0.004810656, 37.99206662, 1135.51863, -443.7090453, 111.8932781,
			-0.107275377, -0.037789725, -8.524568538, 84.82926225, -263.1374622, 83.34752876,
			0.005524248, 0.003159394, 0.274235434, 0.449797663, 52.34853138, -16.14543758,
			-0.000809266, -0.00036367, -0.03681262, -0.009443437, 11.52878618, -5.306594202,
			6.61969E-06, 3.08314E-06, 0.00025971, 0.00011861, 0.002825611, 0.503894052,
			-6.98986E-07, -3.19537E-07, -2.66414E-05, -1.08443E-05, -0.000157372, 0.112671552,
			382.6114491, -131.3383958, 73.90693881, -30.55341217,
			8506.057767, -4301.898448, 2070.93531, -766.052144,
			25954.55164, -28791.04509, 20170.26154, -8481.351055,
			5693.313391, -37582.94112, 68982.10633, -35141.62225,
			-126.7629853, 16743.97694, -13995.57949, 6230.258855,
			10.45970475, 911.7485919, -1952.958397, 718.9548356,
			-1.308082021, -18.4833516, 1426.926082, -664.9034944,
			0.295975729, 4.816838594, 513.1836095, -518.0102279,
			-0.001142488, -0.015294599, 0.330232667, 30.88159402,
			0.000111372, 0.001108068, -0.015499236, 2.728552303,
			2650.579673, -1133.182285, 302.0017929,
			17132.65086, -8701.463491, 2377.244969,
			39397.59896, -22325.12128, 6304.004343,
			900.7709075, 3577.80319, -1241.377601,
			-44.41122676, 1573.367093, -480.9096542,
			3.981967338, 161.1936671, -70.85771244,
			-0.09217309, 0.78965201, 24.73931522,
			0.003637539, -0.008214463, 4.263558662,
			-0.000100199, 0.000148527, 0.172865184,
			3969.68675,
			4156.486996,
			1156.790931,
			191.9885825,
			13.04672556,
			0.198485755,
			102.2816138, 33.30310461, -11.1557971, 2.38160953, -1.750748601, 0.349748131,
			1213.162549, -470.4068219, 217.469766, -103.7605941, 43.17830456, -11.19400288,
			139.8998535, -8652.01781, 4628.357835, -2425.915734, 969.8985337, -257.5741561,
			19.12690382, 9905.545836, -5136.653238, 2621.062176, -1062.618389, 280.0151665,
			-142.4164648, 9567.613297, -35649.75577, 18935.0593, -8165.965246, 2108.661109,
			31.34021079, 187.3010735, 9531.720459, 2476.467405, -1785.908673, 531.4059405,
			-8.627797975, -24.5519238, 10581.64904, -14291.56471, 6904.366163, -1865.034302,
			0.326252911, 0.076038055, 42.03794563, 1218.020897, -460.0571067, 113.5504224,
			-0.122709346, -0.070766533, -10.21399921, 82.51524265, -308.3462999, 99.85561821,
			0.006530934, 0.005155621, 0.342020742, 0.669107464, 61.05653132, -19.35109852,
			-0.00089939, -0.000589021, -0.043109532, -0.019725403, 13.51155685, -6.0940667,
			7.09728E-06, 4.83438E-06, 0.000292943, 0.000191215, 0.003485589, 0.56968241,
			-7.21642E-07, -4.81095E-07, -2.84939E-05, -1.68602E-05, -0.000181876, 0.124159466,
			390.4386668, -134.7970592, 74.58143835, -31.13880649,
			8809.947152, -4462.979635, 2159.648162, -814.1491679,
			27235.57146, -30575.24777, 21316.87503, -9149.762181,
			6168.341661, -42162.02916, 73556.36139, -38516.09751,
			-131.2402536, 17858.07842, -14752.54162, 6727.11427,
			11.08980636, 976.2909818, -2203.565484, 811.8376587,
			-1.522742112, -24.30077157, 1586.419203, -741.672602,
			0.346039771, 6.048409305, 615.8945136, -639.5385491,
			-0.001247741, -0.018931629, 0.394622556, 35.54976816,
			0.00012362, 0.001317097, -0.017802175, 3.028284973,
			2692.100982, -1154.494279, 318.0029935,
			18167.19501, -9291.110205, 2638.38912,
			43201.08297, -24749.07882, 7263.857179,
			1031.529531, 3847.311383, -1395.329764,
			-51.18452762, 1785.515326, -569.3513767,
			4.678403936, 183.7298277, -87.96466982,
			-0.111836145, 0.92017405, 31.22592637,
			0.00412982, -0.007187805, 4.901684025,
			-0.000110852, 0.000206833, 0.188403346,
			4321.664605,
			4645.954206,
			1272.321894,
			210.5311103,
			13.83727966,
			0.166632921,
			106.6270814, 34.89942367, -11.57323261, 2.605839445, -2.009038474, 0.428562759,
			1234.980577, -481.0065589, 222.4573455, -106.6048239, 45.06309526, -11.67259525,
			135.151731, -8949.258866, 4803.7149, -2521.980946, 1017.476316, -268.9851014,
			19.94879189, 10262.16047, -5334.447161, 2729.029828, -1118.776167, 293.8214144,
			-151.2721925, 9718.724812, -37576.80232, 20125.33904, -8855.013464, 2289.776735,
			34.17323396, 182.7307818, 10401.27127, 2397.382851, -1770.488661, 525.4700992,
			-9.382499896, -23.56262601, 11050.85021, -15077.28785, 7358.874213, -1981.310439,
			0.390620466, 0.053084056, 46.91498911, 1298.434877, -445.3410747, 104.1190262,
			-0.159442965, -0.070930519, -12.74744998, 88.92436565, -383.6238929, 125.7727199,
			0.007637186, 0.005134651, 0.374027747, 1.010100873, 69.03225779, -22.29113206,
			-0.001029973, -0.000556949, -0.046147892, -0.040405473, 15.49948901, -6.828468952,
			7.93433E-06, 4.36963E-06, 0.00029978, 0.000313119, 0.004301558, 0.630093163,
			-7.57435E-07, -4.26057E-07, -2.78121E-05, -2.67942E-05, -0.00022039, 0.13591482,
			387.9833803, -134.2049144, 73.38528053, -30.91434667,
			9130.706163, -4631.729448, 2252.739783, -863.8012753,
			29139.81177, -32393.03736, 22438.29742, -9767.97488,
			6648.028061, -43802.28135, 76450.66602, -40845.32148,
			-127.2528532, 18746.03193, -15418.22401, 7146.981988,
			10.96344383, 971.0104015, -2418.277099, 894.8765875,
			-1.815413093, -36.7697495, 1813.113997, -845.9126378,
			0.387175303, 7.98646032, 737.2196829, -783.4619193,
			-0.001275581, -0.02435976, 0.469716751, 40.63182783,
			0.00012829, 0.001642108, -0.020266692, 3.430192233,
			2707.488669, -1163.434667, 332.0963475,
			19270.64967, -9921.808017, 2917.895822,
			47303.57752, -27387.74227, 8341.187278,
			1156.044726, 4184.310458, -1585.391339,
			-56.89278126, 1990.927105, -655.1047888,
			5.40939725, 189.076656, -104.4393183,
			-0.158123375, 1.06416368, 39.92810786,
			0.005300743, -0.00347782, 6.072541856,
			-0.000137314, 0.000214572, 0.228755278,
			4742.943662,
			5211.187435,
			1342.834133,
			192.3089936,
			10.62575477,
			0.079630571,
			106.6828847, 35.61276965, -11.65663183, 2.858710063, -2.109194441, 0.593902263,
			1261.260885, -490.783375, 227.1401178, -109.5005712, 46.54180771, -11.10486628,
			142.3978238, -9274.150286, 4991.810892, -2619.072063, 1064.433759, -248.6317692,
			20.06768881, 10619.22325, -5532.228979, 2834.389511, -1169.782528, 275.1889526,
			-155.296836, 9827.05236, -39564.70111, 21468.12947, -9514.750204, 2301.398353,
			35.73823201, 177.5512092, 11451.80153, 2126.838746, -1698.191446, 404.7676514,
			-9.825703698, -22.72834518, 11402.35277, -15783.26899, 7760.27387, -1863.333209,
			0.435844799, 0.018273503, 50.15456557, 1390.547439, -435.5786365, 79.43350317,
			-0.185810957, -0.06201134, -14.5287216, 92.43241922, -456.6897626, 142.7046556,
			0.007503856, 0.004463652, 0.34891175, 1.219745708, 79.88427161, -25.31171144,
			-0.000883322, -0.000393155, -0.037541197, -0.042177363, 14.53021759, -5.078418947,
			6.59766E-06, 3.07891E-06, 0.000234657, 0.000318557, 0.003993126, 0.515289694,
			-5.54937E-07, -2.46639E-07, -1.97106E-05, -2.69658E-05, -0.000228388, 0.130826229,
			394.3476057, -137.0469787, 73.69256314, -30.96516662,
			9449.07277, -4800.597992, 2346.790472, -907.3003589,
			30628.03089, -34390.93484, 23683.2903, -10403.10164,
			7246.547854, -49233.99704, 81272.6615, -44088.95423,
			-132.1459403, 19954.17973, -16188.17101, 7599.828562,
			11.86733126, 1051.586367, -2776.132782, 1015.678826,
			-2.185068344, -48.74388341, 2049.825985, -942.2341922,
			0.453170934, 9.90902837, 896.6198777, -959.0604162,
			-0.001369291, -0.029153269, 0.567881792, 45.74301845,
			0.000133067, 0.001667777, -0.019636302, 3.955663596,
			2742.939349, -1188.215722, 332.3046484,
			20392.12048, -10564.8316, 3101.244667,
			52179.74377, -30584.17331, 9258.418714,
			1407.806052, 4300.539147, -1618.298089,
			-65.93866573, 2382.474024, -803.2222084,
			5.856868483, 259.2625079, -127.8061071,
			-0.118079975, 1.171195624, 44.28434365,
			0.00350775, -0.002668603, 5.310204171,
			-8.37757E-05, 0.000337639, 0.178250408,
			5084.142119,
			5758.68809,
			1523.343633,
			238.9976951,
			13.42615034,
			0.087109707,
			104.9778062, 35.67483476, -11.57611038, 3.016013661, -2.253165773, 0.606643861,
			1289.472291, -499.9708798, 231.6959505, -112.340978, 48.29203648, -11.13360678,
			155.8785344, -9614.153252, 5180.168184, -2717.70318, 1114.597433, -251.7139133,
			19.89653271, 10973.80687, -5723.929377, 2937.752278, -1224.385904, 278.4267596,
			-157.7987076, 9978.976545, -41601.66158, 22845.00591, -10274.20072, 2402.09078,
			36.79740798, 188.0251236, 12318.78379, 2053.076378, -1702.667021, 391.6914324,
			-10.32463571, -25.28868207, 11841.33854, -16644.87777, 8266.493997, -1918.082933,
			0.500474832, 0.071250937, 55.8894873, 1492.001273, -407.2088441, 62.39302544,
			-0.228472026, -0.092045838, -17.84133466, 90.11640849, -555.4767357, 169.5794255,
			0.008491017, 0.005657375, 0.388327802, 1.609320217, 90.48741251, -28.22637031,
			-0.000943392, -0.000477379, -0.039540074, -0.054554788, 16.65073843, -5.378887829,
			6.16071E-06, 3.30853E-06, 0.00021745, 0.000359147, 0.004538278, 0.51981925,
			-5.1245E-07, -2.66474E-07, -1.73618E-05, -2.76518E-05, -0.000135246, 0.132281503,
			396.8107537, -139.3031231, 73.74268458, -31.17143701,
			9777.913609, -4973.805638, 2443.541697, -958.0729854,
			32418.16826, -36724.44165, 25144.42167, -11182.99241,
			7884.463762, -56377.78735, 87566.61174, -48049.29476,
			-133.8475601, 21285.08272, -17050.61629, 8118.439805,
			12.10797869, 1158.085395, -3132.672134, 1158.991329,
			-2.335651515, -58.78563041, 2256.631897, -1039.942051,
			0.482863239, 11.87512747, 1037.908755, -1136.69496,
			-0.001336961, -0.035464946, 0.675683889, 51.69431949,
			0.000136405, 0.001965989, -0.022381742, 4.55452377,
			2535.065377, -1093.765061, 316.7597409,
			21806.52307, -11360.66927, 3423.735326,
			59961.80135, -35407.77223, 11051.11633,
			1815.292275, 4194.775242, -1674.787331,
			-88.71850054, 2889.297912, -990.23039,
			7.593585296, 380.5427385, -192.2993977,
			-0.132193143, 1.628986842, 53.34610729,
			0.004312315, -0.014051138, 6.504762637,
			-9.66162E-05, 0.000286986, 0.217732302,
			5401.996074,
			6331.91836,
			1751.818383,
			310.7058094,
			18.69420266,
			0.126122005,
			113.1637825, 38.03319128, -12.35096165, 3.349949415, -2.544188765, 0.579280797,
			1307.959969, -511.5158354, 237.1447988, -115.4000567, 50.48534981, -12.83037939,
			137.6969803, -9912.20056, 5355.386313, -2817.182263, 1171.53996, -301.8169374,
			21.7529787, 11359.54095, -5936.029629, 3055.825532, -1292.809824, 331.5928275,
			-174.965177, 10282.12342, -43844.37178, 24235.8304, -11112.38144, 2831.282481,
			41.77593482, 182.8379738, 13235.87806, 2028.530746, -1743.778165, 509.8842678,
			-11.74303986, -24.29684061, 12391.24059, -17586.52747, 8868.36891, -2333.534836,
			0.634890217, 0.039389692, 63.1182811, 1619.765963, -377.895633, 61.63102182,
			-0.315461436, -0.089253493, -22.51120373, 61.79632103, -668.6452757, 223.8099228,
			0.012890664, 0.006729685, 0.541905502, 2.473242115, 102.7884953, -34.37039616,
			-0.001434299, -0.000548408, -0.054738889, -0.091661537, 23.53548638, -9.425867211,
			9.27244E-06, 3.82672E-06, 0.000293775, 0.000560468, 0.00590478, 0.798529501,
			-8.12163E-07, -3.36067E-07, -2.4757E-05, -4.39408E-05, -0.00027762, 0.161750569,
			399.794363, -140.3345471, 73.31195078, -31.26586027,
			10112.83682, -5151.917477, 2543.223344, -1017.617746,
			34355.65569, -38632.30342, 26347.82771, -11917.9889,
			8643.010979, -58269.58448, 90775.18647, -50855.97765,
			-136.0901854, 22266.19906, -17783.48649, 8620.90142,
			13.22982245, 1168.465382, -3555.974817, 1336.298559,
			-3.145724591, -89.79752475, 2683.10746, -1233.120176,
			0.584660839, 14.99483092, 1221.730471, -1367.425404,
			-0.001573934, -0.044202833, 0.796374638, 58.54533134,
			0.000172895, 0.002731152, -0.030735718, 5.164548658,
			2309.380213, -979.5838494, 312.3875078,
			23284.47476, -12198.92359, 3882.447983,
			68449.6278, -40554.91499, 13508.47279,
			2249.65851, 4044.702947, -1833.14385,
			-126.7558885, 3373.297514, -1166.225973,
			10.92960415, 528.213679, -301.5906457,
			-0.208257717, 2.716077309, 68.26852733,
			0.007732952, -0.02789113, 9.946229277,
			-0.00019752, 0.000612975, 0.353362734,
			5840.593082,
			6935.826956,
			1848.687419,
			408.9007077,
			41.53094594,
			0.622765088,
			76.34786669, -28.51381044, -9.960466491, 3.413923011, -0.85379635, -0.056176349,
			1371.625543, 511.245253, 239.4564179, -118.2091024, 50.72604322, -14.25232461,
			276.390056, 10464.78933, 5540.929554, -2879.981796, 1289.379168, -383.0121401,
			15.39435549, -11628.80696, -6015.247624, 3083.811683, -1364.41926, 398.404704,
			-136.6684322, -11471.82834, -45956.18949, 26177.28576, -10810.91714, 2924.355924,
			30.78924842, -343.9171627, 11042.88609, 4218.700052, -5446.952073, 1917.285492,
			-9.836048395, 67.94823289, 14123.73508, -19740.87119, 13024.66968, -4111.6482,
			3.889103909, -8.280897054, 496.6827449, 1217.316474, 5800.543993, -2234.339996,
			-0.336227357, 0.797419021, -25.06821266, 1542.186609, -2053.732017, 706.7850764,
			0.004707386, -0.011417915, 0.184571414, 1.972330989, 90.36863561, -33.27103017,
			-0.001027223, 0.002189163, -0.040502889, -0.204124323, 14.06400014, -8.048337662,
			1.10426E-05, -2.26564E-05, 0.000389537, 0.001433064, 0.004004468, 1.214245303,
			-1.11101E-06, 2.26475E-06, -3.86717E-05, -0.000133022, -0.000167634, 0.216098324,
			-373.4009117, -114.960248, 37.1319819, -9.652360677, 3.616042207,
			-10484.17451, -5359.486812, 2679.277535, -1100.505596, 234.1193446,
			-36509.09222, -35532.19295, 18812.00184, -7546.645299, 1676.147778,
			-574.3767121, 18545.52028, -11473.2522, 5067.016922, -1095.584783,
			2281.776524, 27385.298, -40788.08246, 23365.07726, -4684.745545,
			65.96959441, -840.0126418, 4635.961483, -106.9470964, 95.42435298,
			-27.51139689, 590.8942855, -350.7109898, 228.3142522, -82.30416032,
			-1.577158021, 10.75145383, 704.4740848, -848.9102313, 196.0781984,
			0.014954045, -0.068477716, 1.018780715, 65.8963984, -16.39923596,
			-0.001925301, 0.005866965, -0.054337725, 10.11264917, -3.714964166,
			1.22324E-05, -3.38431E-05, 0.000250112, 0.004379456, 0.41003069,
			-1.10816E-06, 3.01233E-06, -2.28188E-05, -0.000163618, 0.092611128,
			2162.370578, -903.3114959, 311.8194875,
			24726.53975, -13029.31843, 4356.374768,
			76706.07982, -45653.25464, 16071.68105,
			2705.160518, 3897.595395, -1985.821818,
			-170.1997386, 3874.062227, -1358.125259,
			14.71560758, 690.2183608, -428.5705483,
			-0.302927136, 4.113825067, 84.55787123,
			0.012451146, -0.048644777, 14.30907447,
			-0.000357615, 0.001132492, 0.512479802,
			6108.22661,
			7476.669296,
			2254.316431,
			-801.5395519,
			599.5962263,
			1.29594159,
			76.68638463, -28.70614818, -10.00254396, 3.573133123, -1.169256542, -0.012858393,
			1398.296377, 520.744725, 244.2394987, -121.1508972, 53.0044831, -16.03186123,
			288.3432942, 10817.51046, 5730.184587, -2979.540185, 1342.322405, -431.7730336,
			15.2721623, -12000.07387, -6211.601885, 3189.961682, -1426.048852, 449.9683703,
			-137.6026941, -11709.50801, -48118.90013, 27782.09756, -11861.50373, 3458.493101,
			31.23036921, -367.8840738, 12174.81952, 4449.862227, -5834.474607, 2242.407842,
			-10.6663143, 81.07991738, 14183.7276, -21091.25457, 14291.51903, -4891.813324,
			4.471918985, -11.33691192, 550.8186228, 576.6607052, 7312.869128, -2967.105262,
			-0.381455128, 1.043384458, -27.26727554, 1792.240237, -2392.101533, 885.1187511,
			0.005288335, -0.014499965, 0.191983736, 2.339639506, 100.5678432, -38.7213307,
			-0.001302697, 0.003200591, -0.047795493, -0.299290828, 13.6299099, -10.3410686,
			1.73462E-05, -3.98962E-05, 0.000566971, 0.002434904, 0.004801167, 1.721969887,
			-1.86048E-06, 4.2611E-06, -5.89952E-05, -0.000241442, -0.000140916, 0.285575368,
			-381.7927981, -117.5457604, 37.8832246, -9.746137495, 5.139518436,
			-10826.99076, -5543.55188, 2782.932901, -1165.599027, 287.2735517,
			-38052.96407, -37211.4218, 19758.3908, -8064.484906, 2114.982678,
			-621.6559948, 19401.82994, -11941.27812, 5376.88804, -1349.518003,
			2503.69523, 32246.49408, -45533.68184, 26547.88343, -5921.257207,
			73.31640764, -964.4585122, 5297.500524, -122.999805, 209.3371314,
			-29.75439833, 665.5904291, -521.6193617, 338.1054701, -141.7675132,
			-1.754017028, 12.14010053, 778.2212952, -967.5100537, 254.5086574,
			0.018434042, -0.084981676, 1.227222984, 73.44599794, -20.26195334,
			-0.002744483, 0.008635591, -0.081407481, 12.35214842, -6.033392419,
			2.0274E-05, -5.53936E-05, 0.000407364, 0.006165746, 0.669547618,
			-2.23457E-06, 5.9756E-06, -4.50179E-05, -0.000272091, 0.127586833,
			2167.081156, -900.3505401, 327.2669673,
			26059.29677, -13817.5782, 4823.053967,
			83161.35966, -49841.67865, 18360.73274,
			2990.852401, 4118.532669, -2250.285036,
			-205.0698936, 4219.369645, -1507.222166,
			18.97190093, 786.3632551, -537.751363,
			-0.44854136, 5.639200951, 103.7070356,
			0.019035691, -0.068626921, 19.79915089,
			-0.000562352, 0.001558861, 0.671264642,
			6564.830264,
			8317.925699,
			2415.310963,
			-745.2961454,
			579.0570139,
			1.304075212,
			74.81146894, -28.91062591, -9.971646384, 3.695346459, -1.384768151, 0.064030451,
			1427.347754, 530.3136602, 248.9835817, -124.0856864, 55.21875952, -17.69524866,
			305.8397533, 11195.81831, 5942.162984, -3092.7624, 1406.058363, -477.8643247,
			14.90623357, -12393.79828, -6426.480189, 3307.372051, -1495.728658, 499.0228079,
			-137.8788024, -11938.77295, -50425.53214, 29431.73561, -12889.07518, 3992.162683,
			32.16566409, -371.2395586, 13571.75598, 4369.968862, -6081.208938, 2499.045917,
			-11.33793739, 85.68007147, 14233.82088, -22242.41576, 15460.16974, -5627.147127,
			5.116273407, -13.10251218, 596.3847961, -22.50589446, 8906.709872, -3811.515226,
			-0.431042347, 1.181617052, -28.91996973, 2039.187605, -2746.389785, 1079.56,
			0.005772336, -0.015930855, 0.187883102, 2.649809174, 114.2801346, -46.0399839,
			-0.001526363, 0.003790402, -0.050377822, -0.385596925, 10.70688215, -11.56550246,
			2.87182E-05, -6.66789E-05, 0.000867156, 0.004444713, 0.005816913, 2.365506368,
			-2.99391E-06, 6.98578E-06, -8.77381E-05, -0.000434283, -2.91074E-05, 0.406697772,
			-392.4383842, -121.0239996, 39.05802134, -9.649128718, 6.157467917,
			-11174.23156, -5730.520845, 2888.730869, -1233.172649, 334.8511282,
			-39704.47635, -38934.99013, 20726.97705, -8581.880925, 2500.8929,
			-688.7172486, 20204.15282, -12312.44026, 5655.94696, -1564.574877,
			2830.121307, 38557.14444, -50971.30012, 30394.31571, -7363.465045,
			84.91401974, -1122.464418, 6156.677096, -104.5146804, 287.9146411,
			-34.02115524, 774.3546443, -807.8007591, 488.7191835, -214.8130989,
			-1.916723135, 12.89346833, 882.68747, -1107.636254, 320.8474404,
			0.021206932, -0.093454873, 1.422114498, 82.09964846, -24.16364839,
			-0.003662349, 0.011154468, -0.119847006, 13.14093849, -8.258276954,
			3.31288E-05, -8.40158E-05, 0.000709881, 0.00756769, 1.004896923,
			-3.90344E-06, 9.6113E-06, -8.12725E-05, -0.000418515, 0.169689976,
			2156.51181, -889.9751931, 340.9999958,
			27452.55296, -14643.9964, 5305.190651,
			90635.72375, -54662.76685, 20968.11291,
			3426.787367, 4078.822681, -2439.136872,
			-250.0868364, 4728.817641, -1710.416624,
			23.3788608, 950.5112259, -689.4362099,
			-0.585690268, 7.543484517, 123.7843105,
			0.025959124, -0.098122479, 26.36335511,
			-0.000760082, 0.002049918, 0.816881693,
			7051.374321,
			9197.240986,
			2605.541468,
			-667.414768,
			548.1460028,
			1.370325129,
			74.93779355, -29.51102359, -10.06475017, 3.963743844, -1.577811794, 0.146565355,
			1454.561933, 540.3382073, 253.8858331, -127.195025, 57.44063555, -19.33769327,
			315.2922737, 11569.11153, 6153.991037, -3201.750943, 1472.527175, -523.8439247,
			14.97932726, -12797.4527, -6647.607411, 3425.948625, -1568.842187, 548.4809021,
			-141.0848119, -12211.78161, -52830.4298, 31241.41067, -13955.68358, 4554.344274,
			33.5155571, -370.1270264, 15100.29957, 4071.3375, -6299.51069, 2747.937866,
			-12.07744068, 88.37798152, 14212.19419, -23245.2279, 16652.9164, -6395.446042,
			5.878914249, -14.47260387, 641.1193067, -480.0860214, 10617.16418, -4785.442397,
			-0.494523954, 1.295445895, -31.18588872, 2270.20867, -3128.777954, 1298.906663,
			0.006553932, -0.01738627, 0.19532814, 2.980140949, 129.6523431, -54.22406482,
			-0.001815611, 0.004330816, -0.055022185, -0.467057689, 8.507321784, -13.55888973,
			4.56014E-05, -0.000101097, 0.001287595, 0.007189537, 0.010534788, 3.238752071,
			-4.46161E-06, 9.90261E-06, -0.000120464, -0.000656075, -5.44099E-05, 0.538234441,
			-399.604206, -123.1950161, 39.75628532, -9.937505875, 5.829752974,
			-11531.81248, -5922.650105, 2997.561031, -1301.940514, 379.2782606,
			-41445.37169, -40768.14472, 21770.01207, -9166.05742, 2818.964455,
			-742.4679336, 21098.2443, -12806.21739, 5981.043098, -1770.642824,
			3081.232926, 44327.02077, -56480.98276, 34082.00337, -9210.537614,
			93.31749042, -1271.881032, 6921.918716, -160.1164601, 257.6392762,
			-36.3238619, 856.0305431, -988.049064, 627.1469192, -265.209325,
			-2.14967287, 14.84749906, 956.634527, -1242.991782, 393.8605105,
			0.026141547, -0.118311306, 1.657716533, 92.15415775, -28.37157531,
			-0.005147701, 0.016747466, -0.169187068, 14.76177483, -11.29420198,
			5.47814E-05, -0.000144764, 0.001122248, 0.013425178, 1.463353018,
			-4.8449E-06, 1.25591E-05, -0.000101226, -0.000246008, 0.236745331,
			2138.236379, -876.9891808, 350.8329355,
			28901.55603, -15505.81442, 5807.944722,
			98631.26867, -59868.4292, 23786.89421,
			3897.608496, 4046.763258, -2621.283044,
			-296.3417625, 5274.188855, -1944.772567,
			28.0829474, 1112.080906, -847.9601195,
			-0.74313836, 9.499915888, 145.4545646,
			0.034523904, -0.133818096, 33.87257698,
			-0.000991954, 0.002554738, 0.949195966,
			7558.572795,
			10130.34474,
			2829.600409,
			-562.2419995,
			504.5263724,
			1.552528031,
			75.58540328, -30.1421966, -10.2527246, 4.189554168, -1.713598571, 0.200249415,
			1481.418356, 550.4529739, 258.9156922, -130.2905906, 59.6296818, -20.86936435,
			324.8805702, 11944.69151, 6362.532765, -3313.391475, 1542.913345, -569.6042742,
			14.92701539, -13204.31466, -6867.811449, 3546.606401, -1644.837361, 597.0931593,
			-143.0071863, -12410.05954, -55358.46397, 33073.08944, -15006.79147, 5098.213734,
			34.29881423, -375.8377544, 16665.2191, 3754.845693, -6576.42374, 3016.352053,
			-12.47225647, 91.5300572, 14233.38906, -24270.39801, 17966.98073, -7209.611853,
			6.681803818, -16.48356814, 681.2577699, -1008.058568, 12718.86378, -5960.205829,
			-0.567632169, 1.476296193, -33.5253709, 2522.485272, -3581.442035, 1552.663893,
			0.0078585, -0.020639853, 0.210598766, 3.479271826, 145.7663224, -61.40176853,
			-0.002370806, 0.005624209, -0.064762908, -0.61218436, 7.744718988, -17.64254764,
			6.75489E-05, -0.000146631, 0.001721674, 0.010323451, 0.025324802, 4.265303708,
			-6.27378E-06, 1.36629E-05, -0.000150292, -0.000891714, -0.000514032, 0.71167969,
			-404.0220245, -125.3509203, 40.38280629, -10.28643048, 5.689540432,
			-11898.91862, -6118.704789, 3109.047637, -1372.446691, 424.4002422,
			-43828.81455, -42911.48354, 22957.43166, -9826.114481, 3172.006928,
			-825.9072181, 21915.26248, -13231.06578, 6260.161269, -1964.885384,
			3465.473156, 51551.2706, -63016.30897, 38203.33313, -11244.58146,
			106.5544906, -1522.961904, 7959.728814, -464.7105534, 319.0651998,
			-39.04088312, 942.8365264, -1163.129936, 782.099398, -326.9619618,
			-2.452221861, 17.58154499, 1006.06178, -1365.375535, 466.2666383,
			0.033360363, -0.159895015, 1.845403471, 104.3191328, -33.14711432,
			-0.007274879, 0.026428583, -0.215787976, 16.03329082, -14.88058352,
			8.86782E-05, -0.000262739, 0.001544679, 0.022255241, 2.033829576,
			-6.76089E-06, 2.0039E-05, -0.000129797, -3.4109E-06, 0.317046624,
			2128.267683, -867.2801401, 360.5098864,
			30391.67349, -16397.56221, 6327.563292,
			106803.5749, -65247.53522, 26749.10211,
			4356.490076, 4091.869079, -2846.157089,
			-348.5007873, 5803.10737, -2163.463558,
			34.16910255, 1273.24961, -1027.559025,
			-0.979200502, 12.15378465, 170.3430539,
			0.046499288, -0.177026941, 43.89175217,
			-0.001278267, 0.002976594, 1.137787081,
			8059.808615,
			11094.79956,
			3109.488703,
			-483.9088967,
			479.0629216,
			1.896208257,
			76.19964509, -30.69426977, -10.30619295, 4.419582653, -1.820141014, 0.214365483,
			1508.471577, 560.5468376, 263.8453023, -133.4176913, 61.81035698, -22.3071495,
			333.3708874, 12324.06806, 6578.376327, -3425.793823, 1615.830318, -616.2922738,
			15.10798235, -13614.29415, -7092.739984, 3668.362056, -1722.851526, 645.7481502,
			-147.4677781, -12439.46462, -57832.62456, 34972.09927, -16082.38018, 5632.508321,
			35.77464409, -390.9027289, 18414.56086, 3264.675971, -6847.147747, 3292.815335,
			-13.09857952, 97.92699045, 14121.89162, -25231.26952, 19397.82833, -8078.083781,
			7.874842982, -20.67033836, 727.2274462, -1636.958022, 15292.77235, -7344.596358,
			-0.683960986, 1.864730321, -37.02938638, 2805.182427, -4123.056577, 1846.274527,
			0.010596635, -0.028834131, 0.256232529, 4.322531888, 162.3876227, -65.03180844,
			-0.00371658, 0.00929145, -0.091593688, -0.935720521, 8.461097717, -25.86550513,
			9.26295E-05, -0.000210952, 0.002148059, 0.012942444, 0.053324871, 5.34971482,
			-8.37633E-06, 1.95448E-05, -0.000183581, -0.001119461, -0.001545432, 0.916806707,
			-407.3506058, -126.579385, 40.70894794, -10.90035645, 5.972431177,
			-12274.07688, -6319.586828, 3223.442887, -1445.610024, 465.5357061,
			-45932.57332, -45021.53098, 24160.28099, -10536.21799, 3529.611247,
			-876.4862275, 22914.16989, -13859.08381, 6638.583043, -2167.901228,
			3697.637848, 57094.16553, -69058.98739, 41987.11632, -12967.3102,
			109.2377059, -1600.907234, 8704.107558, -710.9684184, 418.2332093,
			-39.27689375, 988.2023804, -1193.480828, 897.2645467, -382.3841419,
			-2.829391638, 21.77297861, 1016.283436, -1482.516528, 529.0052115,
			0.045960301, -0.239724617, 2.132977374, 116.5175048, -35.50233483,
			-0.010986472, 0.045549504, -0.280208655, 21.24598487, -21.76154481,
			0.000125423, -0.000432099, 0.001849996, 0.03088706, 2.672815888,
			-9.16754E-06, 3.02995E-05, -0.000132308, -0.000847687, 0.407218623,
			2092.483432, -845.0793531, 364.1695435,
			31957.42614, -17335.20722, 6871.117719,
			116013.6438, -71296.32966, 30052.61357,
			4911.124413, 4029.334955, -3021.678094,
			-406.4839351, 6430.286042, -2441.298418,
			40.59450025, 1448.208399, -1219.278611,
			-1.23295196, 14.63668635, 196.3152902,
			0.061297074, -0.229576708, 54.7419737,
			-0.001609898, 0.003355123, 1.30138265,
			8548.106009,
			12110.304,
			3462.845805,
			-449.3507231,
			447.8868396,
			1.355354125
};

unsigned int first_ex_SF(unsigned int atomic_number) {
	if (atomic_number == 1) return 0;
	else if (atomic_number > 86) return 200000000;
	unsigned int ex = 0;
	for (int i = 0; i < atomic_number - 1; i++)
		ex += Thakkar_nex[i];
	return ex;
};

unsigned int first_coef_SF(unsigned int atomic_number) {
	if (atomic_number == 1) return 0;
	unsigned int counter = 0;
	unsigned int temp = atomic_number - 1;
	for (int m = 0; m < 6; m++)
		if (Thakkar_occ[temp * 15 + m] != 0)
			counter += Thakkar_ns[temp];
	for (int m = 0; m < 5; m++)
		if (Thakkar_occ[temp * 15 + 6 + m] != 0)
			counter += Thakkar_np[temp];
	for (int m = 0; m < 3; m++)
		if (Thakkar_occ[temp * 15 + 11 + m] != 0)
			counter += Thakkar_nd[temp];
	if (Thakkar_occ[temp * 15 + 14])
		counter += Thakkar_nf[temp];
	return first_coef_SF(temp) + counter;
};

double get_radial_density(int atom_number, double dist) {
	double Rho = 0.0;

	//Speedup things for H
	if (atom_number == 1)
		return pow(exp(-dist) * 2, 2) / (4 * M_PI);

	int nr_ex = first_ex_SF(atom_number);
	int nr_coef = first_coef_SF(atom_number - 1) + 1;

	double Orb[15] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int offset = (atom_number - 1) * 15;
	for (unsigned int ex = 0; ex < Thakkar_ns[atom_number - 1]; ex++) {
		for (int m = 0; m < 6; m++) {
			if (Thakkar_occ[offset + m] == 0) continue;
			if (Thakkar_n[nr_ex] == 1)
				Orb[m] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
			else
				Orb[m] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
			nr_coef++;
		}
		nr_ex++;
	}
	for (unsigned int ex = 0; ex < Thakkar_np[atom_number - 1]; ex++) {
		for (int m = 0; m < 5; m++) {
			if (Thakkar_occ[offset + m + 6] == 0) continue;
			if (Thakkar_n[nr_ex] == 1)
				Orb[m + 6] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
			else
				Orb[m + 6] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
			nr_coef++;
		}
		nr_ex++;
	}
	for (unsigned int ex = 0; ex < Thakkar_nd[atom_number - 1]; ex++) {
		for (int m = 0; m < 3; m++) {
			if (Thakkar_occ[offset + m + 11] == 0) continue;
			if (Thakkar_n[nr_ex] == 1)
				Orb[m + 11] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
			else
				Orb[m + 11] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
			nr_coef++;
		}
		nr_ex++;
	}
	for (unsigned int ex = 0; ex < Thakkar_nf[atom_number]; ex++) {
		if (Thakkar_occ[offset + 14] == 0) continue;
		if (Thakkar_n[nr_ex] == 1)
			Orb[14] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
		else
			Orb[14] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
		nr_coef++;
		nr_ex++;
	}

	for (unsigned int m = 0; m < 15; m++) {
		if (Orb[m] == 0 || Thakkar_occ[offset + m] == 0)
			continue;
		Rho += Thakkar_occ[offset + m] * pow(Orb[m], 2);
	}
	return Rho / (4 * M_PI);
};


void type2vector_SF(
		const int index,
		int * vector){
	switch(index){
		case 1:
			vector[0]=0; vector[1]=0; vector[2]=0;
			break;
		case 2:
			vector[0]=1; vector[1]=0; vector[2]=0;
			break;
		case 3:
			vector[0]=0; vector[1]=1; vector[2]=0;
			break;
		case 4:
			vector[0]=0; vector[1]=0; vector[2]=1;
			break;
		case 5:
			vector[0]=2; vector[1]=0; vector[2]=0;
			break;
		case 6:
			vector[0]=0; vector[1]=2; vector[2]=0;
			break;
		case 7:
			vector[0]=0; vector[1]=0; vector[2]=2;
			break;
		case 8:
			vector[0]=1; vector[1]=1; vector[2]=0;
			break;
		case 9:
			vector[0]=1; vector[1]=0; vector[2]=1;
			break;
		case 10:
			vector[0]=0; vector[1]=1; vector[2]=1;
			break;
		case 11:
			vector[0]=3; vector[1]=0; vector[2]=0;
			break;
		case 12:
			vector[0]=0; vector[1]=3; vector[2]=0;
			break;
		case 13:
			vector[0]=0; vector[1]=0; vector[2]=3;
			break;
		case 14:
			vector[0]=2; vector[1]=1; vector[2]=0;
			break;
		case 15:
			vector[0]=2; vector[1]=0; vector[2]=1;
			break;
		case 16:
			vector[0]=0; vector[1]=2; vector[2]=1;
			break;
		case 17:
			vector[0]=1; vector[1]=2; vector[2]=0;
			break;
		case 18:
			vector[0]=1; vector[1]=0; vector[2]=2;
			break;
		case 19:
			vector[0]=0; vector[1]=1; vector[2]=2;
			break;
		case 20:
			vector[0]=1; vector[1]=1; vector[2]=1;
			break;
		case 21:
			vector[0]=0; vector[1]=0; vector[2]=4;
			break;
		case 22:
			vector[0]=0; vector[1]=1; vector[2]=3;
			break;
		case 23:
			vector[0]=0; vector[1]=2; vector[2]=2;
			break;
		case 24:
			vector[0]=0; vector[1]=3; vector[2]=1;
			break;
		case 25:
			vector[0]=0; vector[1]=4; vector[2]=0;
			break;
		case 26:
			vector[0]=1; vector[1]=0; vector[2]=3;
			break;
		case 27:
			vector[0]=1; vector[1]=1; vector[2]=2;
			break;
		case 28:
			vector[0]=1; vector[1]=2; vector[2]=1;
			break;
		case 29:
			vector[0]=1; vector[1]=3; vector[2]=0;
			break;
		case 30:
			vector[0]=2; vector[1]=0; vector[2]=2;
			break;
		case 31:
			vector[0]=2; vector[1]=1; vector[2]=1;
			break;
		case 32:
			vector[0]=2; vector[1]=2; vector[2]=0;
			break;
		case 33:
			vector[0]=3; vector[1]=0; vector[2]=1;
			break;
		case 34:
			vector[0]=3; vector[1]=1; vector[2]=0;
			break;
		case 35:
			vector[0]=4; vector[1]=0; vector[2]=0;
			break;
		default:
			vector[0]=-1; vector[1]=-1; vector[2]=-1;
			break;
	}
}

double compute_dens(
	WFN &wave,
	double * PosGrid,			// [3] array with current position on the grid
	int atom = -1
	)
{
	const unsigned int nmo = wave.get_nmo();
	vector<double> phi;
	phi.resize(nmo);
	double Rho=0.0;

	for (int i = 0; i < wave.get_nmo(); i++)
		phi[i] = 0.0;


	int iat;
	double d[3];
	int l[3];
	double ex;

	if(atom == -1)
		for (int j = 0; j < wave.get_nex(); j++) {
			iat = wave.get_center(j) - 1;
			type2vector_SF(wave.get_type(j), l);

			d[0] = PosGrid[0] - wave.atoms[iat].x;
			d[1] = PosGrid[1] - wave.atoms[iat].y;
			d[2] = PosGrid[2] - wave.atoms[iat].z;
			ex = exp(-wave.get_exponent(j) * (d[0] * d[0] + d[1] * d[1] + d[2] * d[2]));
			if (ex < pow(10, -30))	continue;
			float xl[3] = {0.0,0.0,0.0};
			for (int k = 0; k < 3; k++) {
				if (l[k] == 0)		xl[k] = 1.0;
				else if (l[k] == 1)	xl[k] = d[k];
				else if (l[k] == 2)	xl[k] = d[k] * d[k];
				else if (l[k] == 3)	xl[k] = pow(d[k], 3);
				else if (l[k] == 4)	xl[k] = pow(d[k], 4);
			}
			for (int mo = 0; mo < wave.get_nmo(); mo++)
				phi[mo] += wave.get_MO_coef(mo,j,false) * xl[0] * xl[1] * xl[2] * ex;      //build MO values at this point
		}
	else
		for (int j = 0; j < wave.get_nex(); j++) {
			iat = wave.get_center(j) - 1;
			if (iat != atom) continue;
			type2vector_SF(wave.get_type(j), l);

			d[0] = PosGrid[0] - wave.atoms[iat].x;
			d[1] = PosGrid[1] - wave.atoms[iat].y;
			d[2] = PosGrid[2] - wave.atoms[iat].z;
			ex = exp(-wave.get_exponent(j) * (d[0] * d[0] + d[1] * d[1] + d[2] * d[2]));
			if (ex < pow(10, -30))	continue;
			float xl[3] = { 0.0,0.0,0.0 };
			for (int k = 0; k < 3; k++) {
				if (l[k] == 0)		xl[k] = 1.0;
				else if (l[k] == 1)	xl[k] = d[k];
				else if (l[k] == 2)	xl[k] = d[k] * d[k];
				else if (l[k] == 3)	xl[k] = pow(d[k], 3);
				else if (l[k] == 4)	xl[k] = pow(d[k], 4);
			}
			for (int mo = 0; mo < wave.get_nmo(); mo++)
				phi[mo] += wave.get_MO_coef(mo, j, false) * xl[0] * xl[1] * xl[2] * ex;      //build MO values at this point
		}

	for (int mo = 0; mo < wave.get_nmo(); mo++)
		Rho += wave.get_MO_occ(mo) * pow(phi[mo], 2);
	return Rho;
}

double compute_spherical_density(
	int atom_number,
	double dist,
	bool debug = false
)
{
	double Rho = 0.0;
	if (debug) cout << "Calculating for atomic number: " << atom_number << endl;

	//Speedup things for H
	if (atom_number == 1)
		return pow(exp(-1.24 * dist)*2, 2)/(4*M_PI);

	if (debug) cout << "Decided its non hydrogen!" << endl;

	int nr_ex = first_ex_SF(atom_number);
	int nr_coef = first_coef_SF(atom_number-1)+1;

	if (debug)
		cout << "Using nr_ex and nr_coef: " << nr_ex << " " << nr_coef
		<< " Values (n/c/z): " << Thakkar_n[nr_ex] << " " << Thakkar_c[nr_coef] << " " << Thakkar_z[nr_ex] << endl;
	double Orb[15] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	int offset = (atom_number - 1) * 15;
	for (unsigned int ex = 0; ex < Thakkar_ns[atom_number - 1]; ex++) {
		for (int m = 0; m < 6; m++) {
			if (Thakkar_occ[offset + m] == 0) continue;
			if (Thakkar_n[nr_ex] == 1)
				Orb[m] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
			else
				Orb[m] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
			nr_coef++;
		}
		nr_ex++;
	}
	for (unsigned int ex = 0; ex < Thakkar_np[atom_number- 1]; ex++) {
		for (int m = 0; m < 5; m++) {
			if (Thakkar_occ[offset + m + 6] == 0) continue;
			if (Thakkar_n[nr_ex] == 1)
				Orb[m + 6] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
			else
				Orb[m + 6] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
			nr_coef++;
		}
		nr_ex++;
	}
	for (unsigned int ex = 0; ex < Thakkar_nd[atom_number - 1]; ex++) {
		for (int m = 0; m < 3; m++) {
			if (Thakkar_occ[offset + m + 11] == 0) continue;
			if (Thakkar_n[nr_ex] == 1)
				Orb[m + 11] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
			else
				Orb[m + 11] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
			nr_coef++;
		}
		nr_ex++;
	}
	for (unsigned int ex = 0; ex < Thakkar_nf[atom_number]; ex++) {
		if (Thakkar_occ[offset + 14] == 0) continue;
		if (Thakkar_n[nr_ex] == 1)
			Orb[14] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex] * dist);
		else
			Orb[14] += Thakkar_c[nr_coef] * pow(dist, Thakkar_n[nr_ex] - 1) * exp(-Thakkar_z[nr_ex] * dist);
		nr_coef++;
		nr_ex++;
	}

	for (unsigned int m = 0; m < 15; m++) {
		if (Orb[m] == 0 || Thakkar_occ[offset + m] == 0)
			continue;
		Rho += Thakkar_occ[offset + m] * pow(Orb[m], 2);
	}
	return Rho/(4*M_PI);
	//	    RHO = BESETZUNG * (N*C*R^(n-1)*e^(-Z*R))^2
}

double linear_interpolate_spherical_density(
	vector <double> radial_dens,
	vector <double> spherical_dist,
	double dist) {

	double result = 0;
	if (dist > spherical_dist[spherical_dist.size() - 1])
		return 0;
	else if (dist < spherical_dist[0])
		return radial_dens[0];
	for (int i = 0; i < spherical_dist.size()-1; i++) {
		double prev_dist = spherical_dist[i];
		double current_dist = spherical_dist[i+1];
		if (prev_dist < dist && current_dist > dist) 
			i == 0 ? result = radial_dens[0] : result = radial_dens[i - 1] + (radial_dens[i] - radial_dens[i - 1]) / (current_dist - prev_dist) * (dist - prev_dist);
	}
	if (result < 1E-10) result =  0;
	return result;
}
double logarithmic_interpolate_spherical_density(
	vector <double> radial_dens,
	double dist,
	int size,
	double incr) {

	double result = 0;
	for (int i = 1; i < size; i++) {
		double prev_dist = 0.000001 * pow(incr, i - 1);
		double current_dist = prev_dist * incr;
		if (prev_dist < dist && current_dist > dist)
			i == 0 ? result = radial_dens[i] : result = radial_dens[i - 1] * exp((dist - prev_dist) * (log(radial_dens[i]) - log(radial_dens[i - 1])) / (current_dist - prev_dist));
	}
	if (result < 1E-15) result = 0;
	return result;
}

bool calculate_structure_factors(
	string& hkl_filename,
	string& cif,
	string& asym_cif,
	string& symm,
	WFN& wave,
	bool debug,
	int accuracy,
	ofstream& file,
	bool becke,
	int cpus,
	bool electron_diffraction
) {
	if (cpus != -1) {
		omp_set_num_threads(cpus);
		omp_set_dynamic(0);
	}
	int* atom_z = new int[wave.get_ncen()];
	double* x = new double[wave.get_ncen()];
	double* y = new double[wave.get_ncen()];
	double* z = new double[wave.get_ncen()];
	double* alpha_max = new double[wave.get_ncen()];
	int* max_l = new int[wave.get_ncen()];
	unsigned int* num_points = new unsigned int[wave.get_ncen()];
	int max_l_overall = 0;

#ifdef _WIN64
	time_t start = time(NULL);
#else
	struct timeval t1, t2;

	gettimeofday(&t1, 0);
#endif

	if (debug)
		file << "Reading hkl now" << endl;

	vector< vector <int> > hkl;
	string line;
	hkl.resize(3);
	if (!exists(hkl_filename)) {
		file << "HKL file does not exists!" << endl;
		return false;
	}
	ifstream hkl_input(hkl_filename.c_str(), ios::in);
	hkl_input.seekg(0, hkl_input.beg);
	regex r{ R"([abcdefghijklmnopqrstuvwxyz\(\)ABCDEFGHIJKLMNOPQRSTUVW])" };
	while (!hkl_input.eof()) {
		getline(hkl_input, line);
		if (hkl_input.eof())
			break;
		if (line.size() < 2)
			continue;
		cmatch result;
		if (regex_search(line.c_str(), result, r))
			continue;
		//if (debug) file << "hkl: ";
		for (int i = 0; i < 3; i++) {
			string temp = line.substr(4 * size_t(i) + 1, 3);
			temp.erase(remove_if(temp.begin(), temp.end(), ::isspace), temp.end());
			hkl[i].push_back(stoi(temp));
			//if (debug) file << setw(4) << temp;
		}
		//if (debug) file << endl;
		if (hkl[0][hkl[0].size() - 1] == 0 && hkl[1][hkl[0].size() - 1] == 0 && hkl[2][hkl[0].size() - 1] == 0) {
			if (debug) file << "popping back 0 0 0" << endl;
			for (int i = 0; i < 3; i++)
				hkl[i].pop_back();
		}
	}
	hkl_input.close();
	// Remove duplicate reflections
	for (unsigned int i = 0; i < hkl[0].size(); i++)
		for (unsigned int j = i + 1; j < hkl[0].size(); j++)
			if (hkl[0][i] == hkl[0][j] && hkl[1][i] == hkl[1][j] && hkl[2][i] == hkl[2][j])
				for (unsigned int x = 0; x < 3; x++)
					hkl[x].erase(hkl[x].begin() + j);

	if (debug)
		file << "Reflections read! Nr of reflections: " << hkl[0].size() << endl;

	double rcm[3][3];
	if (debug)
		file << "starting to read cif!" << endl;
	if (!exists(cif)) {
		file << "CIF does not exists!" << endl;
		return false;
	}
	if (!exists(asym_cif)) {
		file << "Asym CIF does not exists!" << endl
			<< asym_cif << endl;
		return false;
	}
	ifstream cif_input(cif.c_str(), ios::in);
	ifstream asym_cif_input(asym_cif.c_str(), ios::in);
	vector<bool> found;
	found.resize(7);
	double a = 0.0, b = 0.0, c = 0.0, v = 0.0;
	double alpha = 0.0, beta = 0.0, gamma = 0.0;
	vector <string> cell_keywords;
	cell_keywords.push_back("_cell_length_a");
	cell_keywords.push_back("_cell_length_b");
	cell_keywords.push_back("_cell_length_c");
	cell_keywords.push_back("_cell_angle_alpha");
	cell_keywords.push_back("_cell_angle_beta");
	cell_keywords.push_back("_cell_angle_gamma");
	cell_keywords.push_back("_cell_volume");
	while (!cif_input.eof()) {
		getline(cif_input, line);
		for (unsigned int k = 0; k < cell_keywords.size(); k++) {
			found[k] = false;
			if (line.find(cell_keywords[k]) != string::npos) {
				switch (k) {
				case 0:
					a = stod(line.substr(cell_keywords[k].length(), line.find("(")));
					break;
				case 1:
					b = stod(line.substr(cell_keywords[k].length(), line.find("(")));
					break;
				case 2:
					c = stod(line.substr(cell_keywords[k].length(), line.find("(")));
					break;
				case 3:
					alpha = stod(line.substr(cell_keywords[k].length(), line.find("(")));
					break;
				case 4:
					beta = stod(line.substr(cell_keywords[k].length(), line.find("(")));
					break;
				case 5:
					gamma = stod(line.substr(cell_keywords[k].length(), line.find("(")));
					break;
				case 6:
					v = stod(line.substr(cell_keywords[k].length(), line.find("(")));
					break;
				default:
					file << "This is weird... should never get here... aborting!" << endl;
					return false;
				}
				found[k] = true;
			}
		}
		if (found[0] == true && found[1] == true && found[2] == true && found[3] == true && found[4] == true && found[5] == true && found[6] == true)
			break;
	}
	double ca = cos(0.0174532925199432944444444444444 * alpha);
	double cb = cos(0.0174532925199432944444444444444 * beta);
	double cg = cos(0.0174532925199432944444444444444 * gamma);
	double sa = sin(0.0174532925199432944444444444444 * alpha);
	double sb = sin(0.0174532925199432944444444444444 * beta);
	double sg = sin(0.0174532925199432944444444444444 * gamma);
	double V = a * b * c * sqrt(1 + 2 * ca * cb * cg - ca * ca - cb * cb - cg * cg);
	if (V / v > 1.1 || V / v < 0.9) {
		file << "Volume computed is more than 10% off, please check!" << endl;
		return false;
	}
	double a_star = b * c * sa / V;
	double b_star = a * c * sb / V;
	double c_star = a * b * sg / V;
	double ca_star = (cb * cg - ca) / (sb * sg);
	double cb_star = (cg * ca - cb) / (sg * sa);
	double cg_star = (ca * cb - cg) / (sa * sb);

	/*rcm[0][0] = a_star*a_star;
	rcm[0][1] = a_star*b_star*cg_star;
	rcm[0][2] = a_star*c_star*cb_star;

	rcm[1][0] = a_star*b_star*cg_star;
	rcm[1][1] = b_star*b_star;
	rcm[1][2] = b_star*c_star*ca_star;

	rcm[2][0] = a_star*c_star*cb_star;
	rcm[2][1] = b_star*c_star*ca_star;
	rcm[2][2] = c_star*c_star;*/

	rcm[0][0] = 2 * M_PI / a;
	rcm[0][1] = 0;
	rcm[0][2] = 0;

	rcm[1][0] = 2 * M_PI * -cg / (a * sg);
	rcm[1][1] = 2 * M_PI * 1 / (b * sg);
	rcm[1][2] = 0;

	rcm[2][0] = 2 * M_PI * b * c * (ca * cg - cb) / V / sg;
	rcm[2][1] = 2 * M_PI * a * c * (cb * cg - ca) / V / sg;
	rcm[2][2] = 2 * M_PI * a * b * sg / V;

	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			if (rcm[i][j] < 10e-10)
				rcm[i][j] = 0.0;
			else
				rcm[i][j] *= 0.529177249;

	if (debug) {
		file << "RCM done, now labels and asym atoms!" << endl;
		for (int i = 0; i < 3; ++i) {
			for (int j = 0; j < 3; ++j)
				file << setw(10) << fixed << rcm[i][j] / 2 / M_PI / 0.529177249 << ' ';
			file << endl;
		}
	}
	cif_input.clear();
	cif_input.seekg(0, cif_input.beg);
	vector <string> labels;
	vector <unsigned int> atom_type_list;
	vector <unsigned int> asym_atom_to_type_list;
	unsigned int count_fields = 0;
	unsigned int position_field[3] = { 0,0,0 };
	unsigned int label_field = 1000;
	vector <unsigned int> asym_atom_list;
	vector <unsigned int> all_atom_list;
	vector < bool > is_asym;
	vector < vector <double > > positions;
	positions.resize(wave.get_ncen());
	is_asym.resize(wave.get_ncen());
	for (int i = 0; i < wave.get_ncen(); i++) {
		is_asym[i] = false;
		positions[i].resize(3);
	}
	bool atoms_read = false;
	while (!asym_cif_input.eof() && !atoms_read) {
		getline(asym_cif_input, line);
		//if(debug) file << "line: "<< line << endl;
		if (line.find("loop_") != string::npos) {
			//if(debug) file << "found loop!" << endl;
			while (line.find("_") != string::npos) {
				getline(asym_cif_input, line);
				if (debug) file << "line in loop field definition: " << line << endl;
				if (line.find("label") != string::npos)
					label_field = count_fields;
				else if (line.find("fract_x") != string::npos)
					position_field[0] = count_fields;
				else if (line.find("fract_y") != string::npos)
					position_field[1] = count_fields;
				else if (line.find("fract_z") != string::npos)
					position_field[2] = count_fields;
				else if (label_field == 1000) {
					if (debug) file << "I don't think this is the atom block.. moving on!" << endl;
					break;
				}
				count_fields++;
			}
			while (line.find("_") == string::npos && line.length() > 3) {
				//if(debug) file << "Reading atom!"<< endl;
				atoms_read = true;
				stringstream s(line);
				vector <string> fields;
				fields.resize(count_fields);
				for (unsigned int i = 0; i < count_fields; i++)
					s >> fields[i];
				positions[labels.size()][0] = (a * stod(fields[position_field[0]]) + b * cg * stod(fields[position_field[1]]) + c * cb * stod(fields[position_field[2]])) / 0.529177249;
				positions[labels.size()][1] = (b * sg * stod(fields[position_field[1]]) + c * (ca - cb * cg) / sg * stod(fields[position_field[2]])) / 0.529177249;
				positions[labels.size()][2] = V / (a * b * sg) * stod(fields[position_field[2]]) / 0.529177249;
				bool found_this_one = false;
				if (debug) file << "label: " << fields[label_field] << " position: " << positions[labels.size()][0] << " " << positions[labels.size()][1] << " " << positions[labels.size()][2] << endl;
				for (int i = 0; i < wave.get_ncen(); i++) {
					if (is_similar(positions[labels.size()][0], wave.atoms[i].x, -2)
						&& is_similar(positions[labels.size()][1], wave.atoms[i].y, -2)
						&& is_similar(positions[labels.size()][2], wave.atoms[i].z, -2)) {
						if (debug) file << "WFN position: " << wave.atoms[i].x << " " << wave.atoms[i].y << " " << wave.atoms[i].z << endl
							<< "Found an atom: " << fields[label_field] << " Corresponding to atom charge " << wave.atoms[i].charge << endl;
						all_atom_list.push_back(i);
						found_this_one = true;
						break;
					}
				}
				if (!found_this_one && debug)
					file << "I DID NOT FIND THIS ATOM IN THE CIF?! WTF?!" << endl
					<< "tolerance was: +/-" << positions[labels.size()][0] * 0.05 << " +/-"
					<< positions[labels.size()][1] * 0.05 << " +/-"
					<< positions[labels.size()][2] * 0.05 << endl;
				labels.push_back(fields[label_field]);
				getline(asym_cif_input, line);
			}
		}
	}
	if (labels.size() != wave.get_ncen()) {
		file << "Number of atoms in labels: " << labels.size() << " and number of atoms in Wavefunction: " << wave.get_ncen() << "!" << endl << "This is not good, i will stop here!" << endl;
		return false;
	}
	atoms_read = false;
	label_field = 1000;
	count_fields = 0;
	while (!cif_input.eof() && !atoms_read) {
		getline(cif_input, line);
		//if(debug) file << "line: "<< line << endl;
		if (line.find("loop_") != string::npos) {
			//if(debug) file << "found loop!" << endl;
			while (line.find("_") != string::npos) {
				getline(cif_input, line);
				if (debug) file << "line in loop field definition: " << line << endl;
				if (line.find("label") != string::npos)
					label_field = count_fields;
				else if (label_field == 1000) {
					if (debug) file << "I don't think this is the atom block.. moving on!" << endl;
					break;
				}
				count_fields++;
			}
			while (line.find("_") == string::npos && line.length() > 3) {
				atoms_read = true;
				stringstream s(line);
				vector <string> fields;
				fields.resize(count_fields);
				for (unsigned int i = 0; i < count_fields; i++)
					s >> fields[i];
				for (int atom = 0; atom < wave.get_ncen(); atom++) {
					if (debug) file << "Comparing atoms: " << fields[label_field] << " / " << labels[atom] << endl;
					if (fields[label_field] == labels[atom]) {
						int nr = -1;
						for (int i = 0; i < wave.get_ncen(); i++) {
							if (is_similar(positions[atom][0], wave.atoms[i].x, -2)
								&& is_similar(positions[atom][1], wave.atoms[i].y, -2)
								&& is_similar(positions[atom][2], wave.atoms[i].z, -2)) {
								if (debug) file << "Found an asymmetric atom: " << fields[label_field] << " Corresponding to atom charge " << wave.atoms[i].charge << endl;
								nr = i;
								asym_atom_list.push_back(i);
								break;
							}
						}
						is_asym[atom] = true;
						bool already_there = false;
						for (int i = 0; i < atom_type_list.size(); i++)
							if (atom_type_list[i] == wave.atoms[nr].charge) {
								already_there = true;
								asym_atom_to_type_list.push_back(i);
							}
						if (already_there == false) {
							asym_atom_to_type_list.push_back(atom_type_list.size());
							atom_type_list.push_back(wave.atoms[nr].charge);
						}
						break;
					}
				}
				getline(cif_input, line);
			}
		}
	}

	if (debug) {
		file << "There are " << atom_type_list.size() << " types of atoms" << endl;
		for (int i = 0; i < atom_type_list.size(); i++)
			file << setw(4) << atom_type_list[i];
		file << endl << "asym_atoms_to_type_list: " << endl;
		for (int i = 0; i < asym_atom_to_type_list.size(); i++)
			file << setw(4) << asym_atom_to_type_list[i];
		file << endl;
		file << "Mapping of asym atoms:" << endl;
		for (int i = 0; i < wave.get_ncen(); i++)
			file << setw(4) << wave.atoms[all_atom_list[i]].charge;
		file << endl;
		for (int i = 0; i < wave.get_ncen(); i++)
			file << setw(4) << is_asym[i];
		file << endl;
	}

	bool symm_read = false;
	//Still need to read the sym matrices
	if (symm == "") {
		if (debug) file << "No Symmetry file specified, tyring to read from the CIF!" << endl;
		symm_read = true;
	}
	else if (!exists(symm) && symm_read == true)
		return false;

	vector < vector < vector <int> > > sym;
	sym.resize(3);
	for (int i = 0; i < 3; i++)
		sym[i].resize(3);
	if (!symm_read) {
		ifstream symm_input(symm.c_str(), ios::in);
		string liny;
		int temp_int;
		while (!symm_input.eof()) {
			getline(symm_input, liny);
			stringstream streamy(liny);
			for (int i = 0; i < 3; i++)
				for (int j = 0; j < 3; j++) {
					streamy >> temp_int;
					sym[i][j].push_back(temp_int);
				}
		}
	}
	else {
		cif_input.clear();
		cif_input.seekg(0, cif_input.beg);
		bool symm_found = false;
		int operation_field = 200;
		count_fields = 0;
		while (!cif_input.eof() && !symm_found) {
			getline(cif_input, line);
			if (line.find("loop_") != string::npos) {
				//if(debug) file << "found loop!" << endl;
				while (line.find("_") != string::npos) {
					getline(cif_input, line);
					if (debug) file << "line in loop field definition: " << line << endl;
					if (line.find("space_group_symop_operation_xyz") != string::npos)
						operation_field = count_fields;
					else if (count_fields > 2 || (operation_field == 200 && count_fields != 0)) {
						if (debug) file << "I don't think this is the symmetry block.. moving on!" << endl;
						count_fields = 0;
						break;
					}
					count_fields++;
				}
				while (line.find("_") == string::npos && line.length() > 3 && count_fields != 0) {
					if (debug) file << "Reading operation!" << line << endl;
					symm_found = true;
					stringstream s(line);
					vector <string> fields;
					fields.resize(count_fields);
					int sym_from_cif[3][3];
					for (int x = 0; x < 3; x++)
						for (int y = 0; y < 3; y++)
							sym_from_cif[x][y] = 0;
					for (unsigned int i = 0; i < count_fields; i++)
						s >> fields[i];
					vector<string> vectors;
					vectors.resize(3);
					unsigned int column = 0;
					for (int c = 0; c < fields[operation_field].length(); c++) {
						if (fields[operation_field][c] != ',')
							vectors[column].push_back(fields[operation_field][c]);
						else column++;
					}

					for (int x = 0; x < 3; x++) {
						if (vectors[x].find("X") != string::npos || vectors[x].find("x") != string::npos) {
							char sign = ' ';
							if (vectors[x].find("X") != string::npos && vectors[x].find("X") != 0)
								sign = vectors[x].at(vectors[x].find("X") - 1);
							else if (vectors[x].find("X") == 0)
								sign = '+';
							if (vectors[x].find("x") != string::npos && vectors[x].find("x") != 0)
								sign = vectors[x].at(vectors[x].find("x") - 1);
							else if (vectors[x].find("x") == 0)
								sign = '+';
							if (sign == '-')
								sym_from_cif[x][0] = -1;
							if (sign == '+')
								sym_from_cif[x][0] = 1;
						}
						if (vectors[x].find("Y") != string::npos || vectors[x].find("y") != string::npos) {
							char sign = ' ';
							if (vectors[x].find("Y") != string::npos && vectors[x].find("Y") != 0)
								sign = vectors[x].at(vectors[x].find("Y") - 1);
							else if (vectors[x].find("Y") == 0)
								sign = '+';
							if (vectors[x].find("y") != string::npos && vectors[x].find("y") != 0)
								sign = vectors[x].at(vectors[x].find("y") - 1);
							else if (vectors[x].find("y") == 0)
								sign = '+';
							if (sign == '-')
								sym_from_cif[x][1] = -1;
							if (sign == '+')
								sym_from_cif[x][1] = 1;
						}
						if (vectors[x].find("Z") != string::npos || vectors[x].find("z") != string::npos) {
							char sign = ' ';
							if (vectors[x].find("Z") != string::npos && vectors[x].find("Z") != 0)
								sign = vectors[x].at(vectors[x].find("Z") - 1);
							else if (vectors[x].find("Z") == 0)
								sign = '+';
							if (vectors[x].find("z") != string::npos && vectors[x].find("z") != 0)
								sign = vectors[x].at(vectors[x].find("z") - 1);
							else if (vectors[x].find("z") == 0)
								sign = '+';
							if (sign == '-')
								sym_from_cif[x][2] = -1;
							if (sign == '+')
								sym_from_cif[x][2] = 1;
						}
					}
					if (debug) {
						file << "Comparing ";
						for (int x = 0; x < 3; x++)
							for (int y = 0; y < 3; y++)
								file << sym_from_cif[x][y] << " ";
						file << endl;
					}
					bool already_known = false;
					for (int s = 0; s < sym[0][0].size(); s++) {
						bool identical = true;
						bool inverse = true;
						for (int x = 0; x < 3; x++)
							for (int y = 0; y < 3; y++)
								if (sym[y][x][s] != sym_from_cif[x][y])
									identical = false;
						if (!identical)
							for (int x = 0; x < 3; x++)
								for (int y = 0; y < 3; y++)
									if (sym[y][x][s] != sym_from_cif[x][y] * -1)
										inverse = false;
						/*if (debug) {
							file << "Comparison with ";
							for (int x = 0; x < 3; x++)
								for (int y = 0; y < 3; y++)
									file << sym[x][y][s] << " ";
							file << "resulted in ";
							file << identical << " " << inverse << endl;
						}*/
						if (identical || inverse) {
							already_known = true;
							break;
						}
					}
					if (!already_known) {
						if (debug) file << "This is a new symmetry operation!" << endl;
						for (int x = 0; x < 3; x++)
							for (int y = 0; y < 3; y++)
								sym[y][x].push_back(sym_from_cif[x][y]);
					}
					getline(cif_input, line);
				}
			}
		}
	}

	if (debug) {
		file << "Read " << sym[0][0].size() << " symmetry elements! Size of sym: " << sym[0][0].size() << endl;
		for (int i = 0; i < sym[0][0].size(); i++) {
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++)
					file << setw(3) << sym[y][x][i];
				file << endl;
			}
			file << endl;
		}
	}

	cif_input.close();

	if (debug)
		file << "There are " << atom_type_list.size() << " Types of atoms and " << asym_atom_to_type_list.size() << " atoms in total" << endl;

	if (asym_atom_list.size() == 0) {
		file << "0 asym atoms is imposible! something is wrong with reading the CIF!" << endl;
		return false;
	}

	if (debug)
		file << "made it post CIF, now make grids!" << endl;

	double*** grid = new double** [all_atom_list.size()];
	for (unsigned int i = 0; i < all_atom_list.size(); i++)
		grid[i] = new double* [5 ];
	// GRID COORDINATES for [a][c][p] a = atom [0,ncen],
	// c = coordinate [0=x, 1=y, 2=z, 3=becke and hirshfeld weighted density],
	// p = point in this grid

#pragma omp parallel for
	for (int i = 0; i < wave.get_ncen(); i++) {
		atom_z[i] = wave.atoms[i].charge;
		x[i] = wave.atoms[i].x;
		y[i] = wave.atoms[i].y;
		z[i] = wave.atoms[i].z;
		alpha_max[i] = 0.0;
		max_l[i] = 0;
		for (int b = 0; b < wave.get_nex(); b++) {
			if (wave.get_center(b) != i + 1)
				continue;
			if (wave.get_exponent(b) > alpha_max[i])
				alpha_max[i] = wave.get_exponent(b);
			if (wave.get_type(b) > max_l[i]) {
				int l = wave.get_type(b);
				if (l == 0)
					l = 1;
				else if (l >= 1 && l <= 3)
					l = 2;
				else if (l >= 4 && l <= 10)
					l = 3;
				else if (l >= 11 && l <= 20)
					l = 4;
				else if (l >= 21 && l <= 35)
					l = 5;
				max_l[i] = l;
				if (l > max_l_overall)
					max_l_overall = l;
			}
		}
	}

	if (debug)
		file << "Atoms are there!" << endl;

	double** alpha_min = new double* [wave.get_ncen()];
	for (unsigned int i = 0; i < wave.get_ncen(); i++)
		alpha_min[i] = new double[max_l_overall];

#pragma omp parallel for
	for (int i = 0; i < wave.get_ncen(); i++) {
		for (int b = 0; b < max_l_overall; b++)
			alpha_min[i][b] = 100000000.0;
	}

#pragma omp parallel for
	for (int i = 0; i < wave.get_ncen(); i++) {
		for (int b = 0; b < wave.get_nex(); b++) {
			if (wave.get_center(b) != i + 1)
				continue;
			int l = wave.get_type(b);
			if (l == 1)
				l = 1;
			else if (l >= 2 && l <= 4)
				l = 2;
			else if (l >= 5 && l <= 10)
				l = 3;
			else if (l >= 11 && l <= 20)
				l = 4;
			else if (l >= 21 && l <= 35)
				l = 5;
			if (wave.get_exponent(b) < alpha_min[i][l])
				alpha_min[i][l - 1] = wave.get_exponent(b);
		}
	}

	if (debug)
		file << "alpha_min is there!" << endl
		<< "Nr of asym atoms: " << asym_atom_list.size() << " Number of all atoms: " << all_atom_list.size() << " Number of atoms in wfn: " << wave.get_ncen() << endl;
	else
		file << "There are " << wave.get_ncen() << " atoms read from the wavefunction, of which "
		<< all_atom_list.size() << " will be used for grid setup and "
		<< asym_atom_list.size() << " are identified as asymmetric unit atoms!" << endl
		<< "If this is incorrect olex2.refine will not work. You can then already close this windows and start again, maybe refining the previous step once more." << endl;

	vector < vector <  double > > total_grid;
	// Total grid as a sum of all atomic grids.
	// Dimensions: [c] [p]
	// p = the number of gridpoint
	// c = coordinate, which is 0=x, 1=y, 2=z, 3=becke weight, 4=spherical density, 5=wavefunction density
	vector < vector < double > > spherical_density;
	// density of spherical atom at each
	// Dimensions: [a] [d]
	// a = atom number in atom type list for which the weight is calcualted
	// d = distance to look at obtained from point_to_distance_map

	if (debug)
		file << "Making Becke Grid for" << endl;
	else
		file << endl << "Making Becke Grids..." << endl;

	total_grid.resize(6);

	//Make Prototype grids with only single atom weights for all elements
	vector <AtomGrid> Prototype_grids;
	for (unsigned int i = 0; i < atom_type_list.size(); i++) {
		double alpha_max_temp;
		double max_l_temp;
		double* alpha_min_temp = new double[max_l_overall];
		for (unsigned int j = 0; j < wave.get_ncen(); j++) {
			if (wave.atoms[j].charge == atom_type_list[i]) {
				alpha_max_temp = alpha_max[j];
				max_l_temp = max_l[j];
				for (unsigned int l = 0; l < max_l_temp; l++)
					alpha_min_temp[l] = alpha_min[j][l];
				break;
			}
		}

		if (accuracy == 1) {
			int lebedev_high = (max_l_temp < 3) ? 86 : 110;
			int lebedev_low = (max_l_temp < 3) ? 26 : 38;

			Prototype_grids.push_back(AtomGrid(1e-5,
				lebedev_low,
				lebedev_high,
				atom_type_list[i],
				alpha_max_temp,
				max_l_temp,
				alpha_min_temp));
		}
		else if (accuracy == 2) {
			int lebedev_high = (max_l_temp < 3) ? 110 : 146;
			int lebedev_low = (max_l_temp < 3) ? 38 : 50;

			Prototype_grids.push_back(AtomGrid(1e-7,
				lebedev_low,
				lebedev_high,
				atom_type_list[i],
				alpha_max_temp,
				max_l_temp,
				alpha_min_temp));
		}
		else if (accuracy == 3) {
			int lebedev_high = (max_l_temp < 3) ? 170 : 194;
			int lebedev_low = (max_l_temp < 3) ? 86 : 74;

			Prototype_grids.push_back(AtomGrid(1e-9,
				lebedev_low,
				lebedev_high,
				atom_type_list[i],
				alpha_max_temp,
				max_l_temp,
				alpha_min_temp));
		}

	}

#ifdef _WIN64
	if (debug) {
		time_t end_prototype = time(NULL);

		//	int diff = end - start;
		if (end_prototype - start < 1) file << "Time until prototypes are done: <1 s" << endl;
		else if (end_prototype - start < 60) file << "Time until prototypes are done: " << fixed << setprecision(0) << end_prototype - start << " s" << endl;
		else if (end_prototype - start < 3600) file << "Time until prototypes are done: " << fixed << setprecision(0) << floor((end_prototype - start) / 60) << " m " << (end_prototype - start) % 60 << " s" << endl;
		else file << "Time until prototypes are done: " << fixed << setprecision(0) << floor((end_prototype - start) / 3600) << " h " << ((end_prototype - start) % 3600) / 60 << " m" << endl;
	}
#else
	gettimeofday(&t2, 0);

	double time3 = (1000000.0 * (t2.tv_sec - t1.tv_sec) + t2.tv_usec - t1.tv_usec) / 1000000.0;

	if (time3 < 60) printf("Time to prepare: %4.1lf s\n", time3);
	else if (time3 < 3600) printf("Time to prepare: %10.1lf m\n", time3 / 60);
	else printf("Time to prepare: %10.1lf h\n", time3 / 3600);

#endif

#pragma omp parallel for schedule(dynamic)
	for (int i = 0; i < wave.get_ncen(); i++) {
		int nr = all_atom_list[i];
		int type;
		for (int i = 0; i < atom_type_list.size(); i++)
			if (atom_type_list[i] == wave.atoms[nr].charge) 
				type=i;

		num_points[nr] = Prototype_grids[type].get_num_grid_points();

		for (int n = 0; n < 4; n++)
			grid[nr][n] = new double[num_points[nr]];

		Prototype_grids[type].get_grid(wave.get_ncen(),
			nr,
			x,
			y,
			z,
			atom_z,
			grid[nr][0],
			grid[nr][1],
			grid[nr][2],
			grid[nr][3]);
	}

	Prototype_grids.clear();


/*#pragma omp parallel for schedule(dynamic)
	for (int i = 0; i < wave.get_ncen(); i++) {
		if (debug && i == 0) file << "Atom " << i << flush;
		else if (debug) file << " " << i << flush;
		int min_angular = 0;
		int max_angular = 0;
		int nr = all_atom_list[i];
		if (max_l[nr] <= 3) {
			min_angular = 50;
			max_angular = 110;
		}
		else if (max_l[nr] > 3) {
			min_angular = 50;
			max_angular = 146;
		}
		context_t* context = numgrid_new_atom_grid(1e-7,
			min_angular * accuracy,
			max_angular * accuracy,
			atom_z[nr],
			alpha_max[nr],
			max_l[nr],
			alpha_min[nr]
		);
		num_points[nr] = numgrid_get_num_grid_points(context);

		for (int n = 0; n < 4; n++)
			grid[nr][n] = new double[num_points[nr]];

		numgrid_get_grid(context,
			wave.get_ncen(),
			nr,
			x,
			y,
			z,
			atom_z,
			grid[nr][0],
			grid[nr][1],
			grid[nr][2],
			grid[nr][3]);

		numgrid_free_atom_grid(context);

	}*/
	if (debug) file << " Becke Grid exists" << endl;

#ifdef _WIN64
	if (debug) {
		time_t end_becke = time(NULL);
		double points = 0;
		for (int i = 0; i < wave.get_ncen(); i++)
			points += num_points[i];
		file << "Number of gridpoints before pruning: " << points << endl;

		//	int diff = end - start;

		if (end_becke - start < 60) file << "Time until becke done: " << fixed << setprecision(0) << end_becke - start << " s" << endl;
		else if (end_becke - start < 3600) file << "Time until becke done: " << fixed << setprecision(0) << floor((end_becke - start) / 60) << " m " << (end_becke - start) % 60 << " s" << endl;
		else file << "Time until becke done: " << fixed << setprecision(0) << floor((end_becke - start) / 3600) << " h " << ((end_becke - start) % 3600) / 60 << " m" << endl;
	}
#else
	gettimeofday(&t2, 0);

	double time3 = (1000000.0 * (t2.tv_sec - t1.tv_sec) + t2.tv_usec - t1.tv_usec) / 1000000.0;

	if (time3 < 60) printf("Time to prepare: %4.1lf s\n", time3);
	else if (time3 < 3600) printf("Time to prepare: %10.1lf m\n", time3 / 60);
	else printf("Time to prepare: %10.1lf h\n", time3 / 3600);

#endif

	for (unsigned int i = 0; i < wave.get_ncen(); i++) {
		int nr = all_atom_list[i];
		//if (debug) file << endl << "Grid for atom " << labels[i] << endl;
		int reduction = 0;
		for (unsigned int p = 0; p < num_points[nr]; p++) {
			/*if (debug)
				file << scientific << setw(14) << grid[nr][0][p] - wave.atoms[nr].x
				<< scientific << setw(14) << grid[nr][1][p] - wave.atoms[nr].y
				<< scientific << setw(14) << grid[nr][2][p] - wave.atoms[nr].z
				<< scientific << setw(16) << grid[nr][3][p] << endl;*/
			if (abs(grid[nr][3][p]) > 1E-14)
				for (unsigned int k = 0; k < 4; k++)
					total_grid[k].push_back(grid[nr][k][p]);
			else
				reduction++;
		}
		num_points[nr] -= reduction;
		delete[](grid[nr]);
		//if (debug) file << endl << "number of points for atom " << i << " " << num_points[nr];
	}

	if (debug) file << endl;

	file << "Calculating aspherical densities..." << endl;

	if (!becke) {
		total_grid[4].resize(total_grid[0].size());
		total_grid[5].resize(total_grid[0].size());
#pragma omp parallel for
		for (int i = 0; i < total_grid[0].size(); i++) {
			total_grid[4][i] = 0.0;
			total_grid[5][i] = compute_dens(wave, new double[3]{ total_grid[0][i], total_grid[1][i], total_grid[2][i] });
		}
	}

	if (debug) file << endl << ", with total number of points: " << total_grid[0].size() << endl;

	double el_sum_becke = 0.0;
	double el_sum_spherical = 0.0;

	vector < vector <double> > atom_els;
	atom_els.resize(3);
	for (unsigned int i = 0; i < all_atom_list.size(); i++)
		for (int n = 0; n < 3; n++)
			atom_els[n].push_back(0.0);

	file << "Calculating spherical densities..." << endl;

	vector < vector < double > > radial_density;
	vector < vector < double > > radial_dist;

	if (!becke) {
		radial_density.resize(atom_type_list.size());
		spherical_density.resize(asym_atom_list.size());
		radial_dist.resize(asym_atom_list.size());
		for (unsigned int i = 0; i < asym_atom_list.size(); i++)
			spherical_density[i].resize(total_grid[0].size());

		double incr = 1.005;
		for (unsigned int i = 0; i < atom_type_list.size(); i++) {
			if (debug) file << "Calculating for atomic number " << atom_type_list[i] << endl;
			double current = 1;
			double dist = 0.000001;
			while (current > 1E-16) {
				radial_dist[i].push_back(dist);
				current = get_radial_density(atom_type_list[i], dist);
				radial_density[i].push_back(current);
				dist *= incr;
			}
			if (debug)
				file << "Number of radial density points for atomic number " << atom_type_list[i] << ": " << radial_density[i].size() << endl;
		}
		if (debug) {
			for (int i = 0; i < wave.get_ncen(); i++) {
				if (is_asym[i]) {
					int nr = all_atom_list[i];
					file << "atom nr " << i << " in all atom list: " << nr << " in type list nr: " << asym_atom_to_type_list[i] << " Type: " << atom_type_list[asym_atom_to_type_list[i]] << endl;
					for (int p = 0; p < total_grid[0].size(); p++) {
						spherical_density[i][p] =
							linear_interpolate_spherical_density(
								radial_density[asym_atom_to_type_list[i]],
								radial_dist[asym_atom_to_type_list[i]],
								sqrt(pow(total_grid[0][p] - wave.atoms[nr].x, 2) + pow(total_grid[1][p] - wave.atoms[nr].y, 2) + pow(total_grid[2][p] - wave.atoms[nr].z, 2))
							);
						total_grid[4][p] += spherical_density[i][p];
						/*if (i == 0)
							file << "d = " << scientific << sqrt(pow(total_grid[0][p] - wave.atoms[i].x, 2) + pow(total_grid[1][p] - wave.atoms[i].y, 2) + pow(total_grid[2][p] - wave.atoms[i].z, 2))
							<< " m. dens: " << spherical_density[i][p]
							//<< " real dens: " << compute_spherical_density(wave.atoms[i].charge, sqrt(pow(total_grid[0][p] - wave.atoms[i].x, 2) + pow(total_grid[1][p] - wave.atoms[i].y, 2) + pow(total_grid[2][p] - wave.atoms[i].z, 2)))
							<< " constexpr: " << get_radial_density(wave.atoms[i].charge, sqrt(pow(total_grid[0][p] - wave.atoms[i].x, 2) + pow(total_grid[1][p] - wave.atoms[i].y, 2) + pow(total_grid[2][p] - wave.atoms[i].z, 2)))
							<< " as. dens: " << compute_dens(wave, new double[3]{ total_grid[0][p], total_grid[1][p], total_grid[2][p] }, i) << endl;*/
					}
					file << "Done with atom " << i << endl;
				}
				else {
					int type_list_number = -1;
					int nr = all_atom_list[i];
					for (int j = 0; j < atom_type_list.size(); j++)
						if (wave.atoms[nr].charge == atom_type_list[j])
							type_list_number = j;
					if (type_list_number == -1) {
						file << "ERROR IN TYPE ASSIGNMENT FOR SPHERICAL DENSITIES!" << endl;
						return false;
					}
					file << "atom nr " << i << " in all atom list: " << nr << " Type: " << type_list_number << " no dens save" << endl;
					for (int p = 0; p < total_grid[0].size(); p++)
						total_grid[4][p] += linear_interpolate_spherical_density(
							radial_density[type_list_number],
							radial_dist[type_list_number],
							sqrt(pow(total_grid[0][p] - wave.atoms[nr].x, 2) + pow(total_grid[1][p] - wave.atoms[nr].y, 2) + pow(total_grid[2][p] - wave.atoms[nr].z, 2))
						);
				}
			}
		}
		else {
			for (int i = 0; i < wave.get_ncen(); i++) {
				int nr = all_atom_list[i];
				if (is_asym[i]) {
#pragma omp parallel for
					for (int p = 0; p < total_grid[0].size(); p++) {
						spherical_density[i][p] =
							linear_interpolate_spherical_density(radial_density[asym_atom_to_type_list[i]], radial_dist[asym_atom_to_type_list[i]],
								sqrt(pow(total_grid[0][p] - wave.atoms[nr].x, 2) + pow(total_grid[1][p] - wave.atoms[nr].y, 2) + pow(total_grid[2][p] - wave.atoms[nr].z, 2))
							);
						total_grid[4][p] += spherical_density[i][p];
					}
				}
				else {
					int type_list_number = -1;
					for (int j = 0; j < atom_type_list.size(); j++)
						if (wave.atoms[nr].charge == atom_type_list[j])
							type_list_number = j;
#pragma omp parallel for
					for (int p = 0; p < total_grid[0].size(); p++)
						total_grid[4][p] += linear_interpolate_spherical_density(radial_density[type_list_number], radial_dist[type_list_number],
							sqrt(pow(total_grid[0][p] - wave.atoms[nr].x, 2) + pow(total_grid[1][p] - wave.atoms[nr].y, 2) + pow(total_grid[2][p] - wave.atoms[nr].z, 2))
						);
				}
			}
		}
//#pragma omp parallel for reduction(+:el_sum_becke,el_sum_spherical)
		for (unsigned int i = 0; i < wave.get_ncen(); i++) {
			int start_p = 0;
			for (unsigned int a = 0; a < i; a++)
				start_p += num_points[all_atom_list[a]];
			for (int p = 0; p < num_points[all_atom_list[i]]; p++) {
				atom_els[0][i] += total_grid[3][start_p + p] * total_grid[5][start_p + p];
				if (!becke) atom_els[1][i] += total_grid[3][start_p + p] * total_grid[4][start_p + p];
			}
			el_sum_becke += atom_els[0][i];
			if (!becke) el_sum_spherical += atom_els[1][i];
		}

		file << "Applying hirshfeld weights..." << endl;
#pragma omp parallel for
		for (int p = 0; p < total_grid[0].size(); p++)
				total_grid[5][p] *= total_grid[3][p];
		if (debug)
#pragma omp parallel for
			for (int p = 0; p < total_grid[0].size(); p++)
				total_grid[3][p] = 0;


		file << "Number of points evaluated: " << total_grid[0].size() << " with " << el_sum_becke << " electrons in Becke Grid in total." << endl << endl;

		if (debug)
			file << "Becke grid with hirshfeld weights done!" << endl;
		double el_sum_hirshfeld = 0.0;
		if (debug) {
			for (unsigned int i = 0; i < asym_atom_list.size(); i++)
				for (unsigned int p = 0; p < total_grid[0].size(); p++) {
					if (isnan(spherical_density[i][p]))
						file << "spherical density is NaN! " << i << " " << p << endl;
					if (isnan(total_grid[5][p]))
						file << "total density is NaN! " << i << " " << p << endl;
					if (isnan(total_grid[5][p] * spherical_density[i][p]))
						file << "total_grid*spherical_density is NaN! " << i << " " << p << " " << total_grid[5][p] << " " << spherical_density[i][p] << endl;
					if (spherical_density[i][p] != 0 && total_grid[4][p] != 0)
						atom_els[2][i] += total_grid[5][p] * spherical_density[i][p] / total_grid[4][p];
				}
		}
		else {
#pragma omp parallel for
			for (unsigned int i = 0; i < asym_atom_list.size(); i++)
				for (unsigned int p = 0; p < total_grid[0].size(); p++)
					if (spherical_density[i][p] != 0 && total_grid[4][p]!= 0)
						atom_els[2][i] += total_grid[5][p] * spherical_density[i][p] / total_grid[4][p];
		}

		if (debug) {
			file << "atom_els[2]: ";
			for (unsigned int i = 0; i < asym_atom_list.size(); i++) {
				if (isnan(atom_els[2][i]))
					file << "!!!";
				file << atom_els[2][i] << " ";
				if (isnan(atom_els[2][i]))
					file << "!!!";
			}
			file << endl;
		}

		file << "Table of Charges in electrons" << endl << endl << "Atom       Becke  Hirshfeld" << endl;

		int counter = 0;
		for (unsigned int i = 0; i < wave.get_ncen(); i++) {
			file << setw(6) << labels[i]
				<< fixed << setw(10) << setprecision(3) << wave.atoms[all_atom_list[i]].charge - atom_els[0][i]
				<< fixed << setw(10) << setprecision(3) << wave.atoms[all_atom_list[i]].charge - atom_els[1][i];
			if (is_asym[i]) {
				file << fixed << setw(10) << setprecision(3) << wave.atoms[all_atom_list[i]].charge - atom_els[2][counter];
				el_sum_hirshfeld += atom_els[2][counter];
				counter++;
			}
			else
				file << setw(10) << "    --- ";
			file << endl;
		}

		file << "Total number of electrons in the wavefunction: " << el_sum_becke << endl << " and Hirshfeld electrons (asym unit): " << el_sum_hirshfeld << endl;
	}

	vector< vector <complex<double> > > sf;
	sf.resize(asym_atom_list.size());

#pragma omp parallel for
	for (int i = 0; i < asym_atom_list.size(); i++) 
		sf[i].resize(sym[0][0].size() * hkl[0].size());

	if (debug)
		file << "Initialized FFs" << endl
			<< "asym atom list size: " << asym_atom_list.size() << " total grid size: " << total_grid[0].size() << endl;

	vector < vector <double> > d1,d2,d3;
	vector < vector <double> > dens;
	dens.resize(asym_atom_list.size());
#pragma omp parallel for
	for (unsigned int i = 0; i < asym_atom_list.size(); i++)
		dens[i].resize(total_grid[0].size());
	d1.resize(asym_atom_list.size());
	d2.resize(asym_atom_list.size());
	d3.resize(asym_atom_list.size());
#pragma omp parallel for
	for (unsigned int i = 0; i < asym_atom_list.size(); i++) {
		d1[i].resize(total_grid[0].size());
		d2[i].resize(total_grid[0].size());
		d3[i].resize(total_grid[0].size());
	}

	if (debug)
		file << "Resized vectors" << endl;

	if (!becke) {
#pragma omp parallel for 
		for (unsigned int p = 0; p < total_grid[0].size(); p++)
			for (unsigned int i = 0; i < asym_atom_list.size(); i++) {
				d1[i][p] = total_grid[0][p] - wave.atoms[asym_atom_list[i]].x;
				d2[i][p] = total_grid[1][p] - wave.atoms[asym_atom_list[i]].y;
				d3[i][p] = total_grid[2][p] - wave.atoms[asym_atom_list[i]].z;

				
				if (debug) {
					total_grid[3][p] += spherical_density[i][p] / total_grid[4][p];
					if (i == asym_atom_list.size() - 1 && total_grid[3][p] < 0.999) {
						file << "weight sum != 1: " << setw(6) << p << fixed << setw(10) << total_grid[3][p] << scientific << setw(12) << total_grid[4][p] << endl;
						for (int i = 0; i < asym_atom_list.size(); i++)
							file << labels[asym_atom_list[i]] << scientific << setw(10) << spherical_density[i][p] << " ";
						file << endl;
					}
				}
				//        BECKE WEIGHT * Wfn Density * Atomic spherical density / total spherical density  
				if (spherical_density[i][p] != 0 && total_grid[4][p] != 0)
					dens[i][p] = total_grid[5][p] * spherical_density[i][p] / total_grid[4][p];
				else
					dens[i][p] = 0.0;
			}
	}
	else
#pragma omp parallel for
		for (unsigned int i = 0; i < asym_atom_list.size(); i++) 
			for (int p = 0; p < total_grid[0].size(); p++) {
				d1[i][p] = total_grid[0][p] - wave.atoms[asym_atom_list[i]].x;
				d2[i][p] = total_grid[1][p] - wave.atoms[asym_atom_list[i]].y;
				d3[i][p] = total_grid[2][p] - wave.atoms[asym_atom_list[i]].z;

				//        BECKE WEIGHT * Wfn Density
				dens[i][p] = compute_dens(wave, new double[3]{ total_grid[0][p] , total_grid[1][p] , total_grid[2][p] }, asym_atom_list[i]) * total_grid[3][p];
			}


	vector < vector <double> > k_pt;
	k_pt.resize(3);
#pragma omp parallel for
	for (int i = 0; i < 3; i++)
		k_pt[i].resize(sym[0][0].size()* hkl[0].size());

	if (debug)
		file << "K_point_vector is here" << endl;

	for (int s = 0; s < sym[0][0].size(); s++) {
#pragma omp parallel for
		for (int ref = 0; ref < hkl[0].size(); ref++) 
			for (int x = 0; x < 3; x++)
				for (int h = 0; h < 3; h++) {
					double rcm_sym = 0.0;
					for (int j = 0; j < 3; j++)
						rcm_sym += rcm[x][j] * sym[j][h][s];
					k_pt[x][ref + s * hkl[0].size()] += rcm_sym * hkl[h][ref];
				}
	}

	file << endl << "Number of k points to evaluate: " << k_pt[0].size() << " for " << total_grid[0].size() << " gridpoints." << endl;

#ifdef _WIN64
	time_t end1 = time(NULL);

	if (end1 - start < 60) file << "Time to prepare: " << fixed << setprecision(0) << end1 - start << " s" << endl;
	else if (end1 - start < 3600) file << "Time to prepare: " << fixed << setprecision(0) << floor((end1 - start) / 60) << " m " << (end1 - start) % 60 << " s" << endl;
	else file << "Time to prepare: " << fixed << setprecision(0) << floor((end1 - start) / 3600) << " h " << ((end1 - start) % 3600) / 60 << " m" << endl;
#else
	gettimeofday(&t2, 0);

	double time3 = (1000000.0 * (t2.tv_sec - t1.tv_sec) + t2.tv_usec - t1.tv_usec) / 1000000.0;

	if (time3 < 60) printf("Time to prepare: %4.1lf s\n", time3);
	else if (time3 < 3600) printf("Time to prepare: %10.1lf m\n", time3 / 60);
	else printf("Time to prepare: %10.1lf h\n", time3 / 3600);

#endif

	//file << endl << "Calculating scattering factors..." << endl;
	progress_bar progress{ file, 75u, "Calculating scattering factors" };
	const int step = floor(k_pt[0].size() / 100);
	if (!becke) {
#pragma omp parallel for schedule(dynamic)
		for (int s = 0; s < k_pt[0].size(); s++) {
			const double k1 = k_pt[0][s];
			const double k2 = k_pt[1][s];
			const double k3 = k_pt[2][s];
			double work;
			complex<double> temp;
			double rho;
			for (unsigned int i = 0; i < asym_atom_list.size(); i++) {
				temp = complex < double > (0.0,0.0);
				for (unsigned int p = 0; p < total_grid[0].size(); p++) {
					rho = dens[i][p];
					if (rho != 0) {
						work = k1 * d1[i][p] + k2 * d2[i][p] + k3 * d3[i][p];
						temp += complex<double>(rho * cos(work), rho * sin(work));
					}
				}
				sf[i][s] = temp;
			}
			if (s % step == 0) 
				progress.write(s / double(k_pt[0].size()));
		}
	}
	else {
#pragma omp parallel for
		for (int s = 0; s < k_pt[0].size(); s++) {
			double work;
			for (unsigned int i = 0; i < asym_atom_list.size(); i++) {
				for (unsigned int p = 0; p < total_grid[0].size(); p++) {
					work = k_pt[0][s] * d1[i][p] + k_pt[1][s] * d2[i][p] + k_pt[2][s] * d3[i][p];
					sf[i][s] += complex<double>(dens[i][p] * cos(work), dens[i][p] * sin(work));
				}
			}
		}
	}

	

	if (electron_diffraction) {
		double fact = 2*M_PI*9.1093837015E-31 * pow(1.602176634E-19, 2) / (pow(6.62607015E-34, 2) * 8.8541878128E-12);
		for (unsigned int s = 0; s < sym[0][0].size(); s++) {
#pragma omp parallel for
			for (unsigned int p = 0; p < hkl[0].size(); p++) {
				double h2 = pow(hkl[0][p] * sym[0][0][s] + hkl[1][p] * sym[0][1][s] + hkl[2][p] * sym[0][2][s], 2)
					+ pow(hkl[0][p] * sym[1][0][s] + hkl[1][p] * sym[1][1][s] + hkl[2][p] * sym[1][2][s], 2)
					+ pow(hkl[0][p] * sym[2][0][s] + hkl[1][p] * sym[2][1][s] + hkl[2][p] * sym[2][2][s], 2);
				for (unsigned int i = 0; i < asym_atom_list.size(); i++)
					sf[i][p + hkl[0].size() * s] = fact * ((double) wave.atoms[asym_atom_list[i]].charge - sf[i][p + hkl[0].size() * s]) / h2;
			}
		}
	}


#ifdef _WIN64
	time_t end2 = time(NULL);

	if (end2 - end1 < 60) file << endl << "Time to calc tsc: " << fixed << setprecision(0) << end2 - end1 << " s\n";
	else if (end2 - end1 < 3600) file << endl <<  "Time to calc tsc: " << fixed << setprecision(0) << floor((end2 - end1) / 60) << " m " << (end2 - end1) % 60 << " s\n";
	else file << endl << "Time to calc tsc: " << fixed << setprecision(0) << floor((end2 - end1) / 3600) << " h " << ((end2 - end1) % 3600) / 60 << " m\n";
#else
	gettimeofday(&t2, 0);

	double time4 = (1000000.0 * (t2.tv_sec - t1.tv_sec) + t2.tv_usec - t1.tv_usec) / 1000000.0;

	if (time4 < 60) printf("Time to calculate: %4.1lf s\n", time4);
	else if (time4 < 3600) printf("Time to calculate: %10.1lf m\n", time4 / 60);
	else printf("Time to calculate: %10.1lf h\n", time4 / 3600);

#endif

	if (debug)
		file << endl << "SFs are made, now just write them!" << endl;
	else
		file << endl << "Writing tsc file..." << endl;

	ofstream tsc_file("experimental.tsc", ios::out);

	tsc_file << "TITLE: " << get_filename_from_path(cif).substr(0,cif.find(".cif")) << endl << "SYMM: ";

	for (int s = 0; s < sym[0][0].size(); s++) {
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++) {
				if (i != 0 || j != 0) tsc_file << " ";
				tsc_file << sym[j][i][s];
			}
		if(s!= sym[0][0].size()-1)
			tsc_file << ";";
	}
	tsc_file << endl << "AD: false" << endl << "SCATTERERS:";
	for (unsigned int i = 0; i < asym_atom_list.size(); i++)
		tsc_file << " " << labels[i];
	tsc_file << endl << "data:" << endl;

	for (unsigned int s = 0; s < sym[0][0].size(); s++) {
		if (debug) file << "writing symmetry: " << s << endl;
		for (unsigned int p = 0; p < hkl[0].size(); p++) {
			tsc_file 
				<< hkl[0][p] * sym[0][0][s] + hkl[1][p] * sym[0][1][s] + hkl[2][p] * sym[0][2][s] << " "
				<< hkl[0][p] * sym[1][0][s] + hkl[1][p] * sym[1][1][s] + hkl[2][p] * sym[1][2][s] << " "
				<< hkl[0][p] * sym[2][0][s] + hkl[1][p] * sym[2][1][s] + hkl[2][p] * sym[2][2][s] << " ";
			for (unsigned int i = 0; i < asym_atom_list.size(); i++)
				tsc_file << scientific << setprecision(8) << real(sf[i][p + hkl[0].size() * s]) << ","
				<< scientific << setprecision(8) << imag(sf[i][p + hkl[0].size() * s]) << " ";
			tsc_file << endl;
		}
	}
	tsc_file.close();

#ifdef _WIN64
	time_t end = time(NULL);

	if (end - start < 60) file << "Total Time: "<< fixed << setprecision(0) << end - start << " s\n";
	else if (end - start < 3600) file << "Total Time: " << fixed << setprecision(0) << floor((end - start)/60) << " m " << (end - start) % 60 << " s\n";
	else file << "Total Time: " << fixed << setprecision(0) << floor((end - start)/3600) << " h " << ((end - start) % 3600)/60 << " m\n";
#else
	gettimeofday(&t2, 0);

	double time2 = (1000000.0*(t2.tv_sec - t1.tv_sec) + t2.tv_usec - t1.tv_usec) / 1000000.0;

	if (time2<60) printf("Total Time: %4.1lf s\n", time2);
	else if (time2 < 3600) printf("Total Time: %10.1lf m\n", time2 / 60);
	else printf("Total Time: %10.1lf h\n", time2 / 3600);

#endif

	return true;
}
