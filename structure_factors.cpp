/*
 * structrue_factors.cpp
 *
 *  Created on: May 27, 2019
 *      Author: florian
 */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <cmath>
#include <iostream>
#include <iomanip>
#include <string>
#include <fstream>
#ifdef _WIN32
#include <windows.h>
#include <io.h>
#include <omp.h>
#else
#include <unistd.h>
#include <sys/wait.h>
#include <sys/time.h>
#endif
#include <sstream>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <vector>
#include <complex>
#include <algorithm>

#include "convenience.h"
#include "structure_factors.h"
#include "wfn_class.h"
using namespace std;

#include "numgrid.h"

unsigned int Thakkar_nex[36] = { 1, 5, 8, 8, 15, 15, 15, 15, 15, 15, 17, 17, 20, 20, 20, 20, 20, 20, 22, 22, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31 };
unsigned int Thakkar_ns[36] = {  1, 5, 8, 8, 8,  8,  8,  8,  8,  8,  10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12 };
unsigned int Thakkar_np[36] = {  0, 0, 0, 0, 7,  7,  7,  7,  7,  7,  7,  7,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11 };
unsigned int Thakkar_nd[36] = {  0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8 };
unsigned int Thakkar_occ[288] = {
	//	1s,2s,3s,4s,2p,3p,4p,3d
		1, 0, 0, 0,	0, 0, 0, 0, //H
		2, 0, 0, 0, 0, 0, 0, 0, //He
		2, 1, 0, 0, 0, 0, 0, 0, //Li
		2, 2, 0, 0, 0, 0, 0, 0, //Be
		2, 2, 0, 0, 1, 0, 0, 0, //B
		2, 2, 0, 0, 2, 0, 0, 0, //C
		2, 2, 0, 0, 3, 0, 0, 0, //N
		2, 2, 0, 0, 4, 0, 0, 0, //O
		2, 2, 0, 0, 5, 0, 0, 0, //F
		2, 2, 0, 0, 6, 0, 0, 0, //Ne
		2, 2, 1, 0, 6, 0, 0, 0, //Na
		2, 2, 2, 0, 6, 0, 0, 0, //Mg
		2, 2, 2, 0, 6, 1, 0, 0, //Al
		2, 2, 2, 0, 6, 2, 0, 0, //Si
		2, 2, 2, 0, 6, 3, 0, 0, //P
		2, 2, 2, 0, 6, 4, 0, 0, //S
		2, 2, 2, 0, 6, 5, 0, 0, //Cl
		2, 2, 2, 0, 6, 6, 0, 0, //Ar
		2, 2, 2, 1, 6, 6, 0, 0, //K
		2, 2, 2, 2, 6, 6, 0, 0, //Ca
		2, 2, 2, 2, 6, 6, 0, 1, //Sc
		2, 2, 2, 2, 6, 6, 0, 2, //Ti
		2, 2, 2, 2, 6, 6, 0, 3, //V
		2, 2, 2, 1, 6, 6, 0, 5, //Cr
		2, 2, 2, 2, 6, 6, 0, 5, //Mn
		2, 2, 2, 2, 6, 6, 0, 6, //Fe
		2, 2, 2, 2, 6, 6, 0, 7, //Co
		2, 2, 2, 2, 6, 6, 0, 8, //Ni
		2, 2, 2, 1, 6, 6, 0, 10,//Cu
		2, 2, 2, 2, 6, 6, 0, 10,//Zn
		2, 2, 2, 2, 6, 6, 1, 10,//Ga
		2, 2, 2, 2, 6, 6, 2, 10,//Ge
		2, 2, 2, 2, 6, 6, 3, 10,//As
		2, 2, 2, 2, 6, 6, 4, 10,//Se
		2, 2, 2, 2, 6, 6, 5, 10,//Br
		2, 2, 2, 2, 6, 6, 6, 10//Kr
};

int Thakkar_n[796] = {
		1,																	//H
		2,1,1,1,2,															//He

		1,1,1,1,1,1,2,1,													//Li
		1,1,1,1,1,1,2,1,													//Be
		2,1,2,1,1,2,1,1,			3,2,3,2,2,2,2,							//B
		2,1,2,1,1,2,1,1,			3,2,3,2,2,2,2,							//C
		2,1,2,1,1,2,1,1,			3,2,3,2,2,2,2,							//N
		2,1,2,1,1,2,1,1,			3,2,3,2,2,2,2,							//O
		2,1,2,1,1,2,1,1,			3,2,3,2,2,2,2,							//F
		2,1,2,1,1,2,1,1,			3,2,3,2,2,2,2,							//Ne

		2,1,2,1,1,2,1,1,2,1,		3,2,3,2,2,2,2,							//Na
		2,1,2,1,1,2,1,1,2,1,		3,2,3,2,2,2,2,							//Mg
		1,1,1,2,1,2,1,1,2,1,		2,2,2,2,2,2,2,2,2,3,					//Al
		1,1,1,2,1,2,1,1,2,1,		2,2,2,2,2,2,2,2,2,3,					//Si
		2,1,2,2,1,2,2,1,1,1,		2,3,2,3,2,3,2,2,2,2,					//P
		2,1,2,2,1,2,2,1,1,1,		2,3,2,3,2,3,2,2,2,2,					//S
		2,1,2,2,1,2,2,1,1,1,		2,3,2,3,2,3,2,2,2,2,					//Cl
		2,1,2,2,1,2,2,1,1,1,		2,3,2,3,2,3,2,2,2,2,					//Ar

		1,3,1,3,2,2,1,1,2,1,2,1,	2,3,2,3,2,2,3,2,2,2,					//K
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,					//Ca
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Sc
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Ti
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//V
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Cr
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Mn
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Fe
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Co
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Ni
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Cu
		1,3,1,3,2,1,2,2,1,1,2,1,	2,3,2,3,2,2,3,2,2,2,	3,4,3,3,3,3,3,3,//Zn
		1,3,1,3,2,1,1,1,1,1,2,1,	2,3,2,3,2,3,3,3,2,2,2,	3,4,3,3,3,3,3,3,//Ga
		1,3,1,3,2,2,1,1,1,1,2,1,	2,3,2,3,2,3,3,3,2,2,2,	3,4,3,3,3,3,3,3,//Ge
		1,3,1,4,2,3,3,2,2,2,2,1,	2,3,2,3,3,2,3,3,3,2,2,	3,4,3,3,3,3,3,3,//As
		1,3,1,4,2,3,3,2,2,2,2,1,	2,3,2,3,3,2,3,3,3,2,2,	3,4,3,3,3,3,3,3,//Se
		1,3,1,4,2,3,3,2,2,2,2,1,	2,3,2,3,3,2,3,3,3,2,2,	3,4,3,3,3,3,3,3,//Br
		1,3,1,4,2,3,3,2,2,2,2,1,	2,3,2,3,3,2,3,3,3,2,2,	3,4,3,3,3,3,3,3	//Kr
};

double Thakkar_z[796] = {
		1.24,																				//H
		6.437494,3.384356,2.177906,1.455077,1.354958,										//He

		10.335672,5.553473,3.453336,2.416445,1.555772,0.889955,0.637402,0.626614,			//Li
		12.683501,8.105927,5.152556,3.472467,2.349757,1.406429,0.821620,0.786473,			//Be
		16.109305,7.628062,6.135799,4.167618,2.488602,1.642523,0.991698,0.787218,			//B
		12.135370,5.508493,3.930298,2.034395,1.301082,0.919434,0.787218,
		18.890445,9.238787,7.517513,5.100368,3.276630,2.270243,1.192963,0.930957,			//C
		15.083626,6.565676,4.729110,2.494494,1.601933,1.123315,0.930957,
		21.666277,10.957976,8.981511,6.085323,3.948957,2.648617,1.406521,1.065447,			//N
		17.587523,7.584576,5.559658,2.932934,1.874157,1.306305,1.065447,
		24.975698,12.554759,10.357096,7.071190,4.804646,2.785958,1.606267,1.124194,			//O
		20.797000,8.661006,6.427925,3.402194,2.135366,1.425500,1.124194,
		27.647598,14.291092,11.832995,8.080680,5.633450,3.182099,1.812284,1.208319,			//F
		22.939589,9.684811,7.284146,3.846095,2.385087,1.560088,1.208319,
		29.214419,16.354484,13.516489,9.144899,6.491668,3.574219,2.016153,1.304155,			//Ne
		25.731219,10.674843,8.124569,4.295590,2.648660,1.710436,1.304155,

		33.255324,17.591424,14.711825,9.845052,6.517050,5.163833,2.473455,1.097424,0.620107,0.603494,		//Na
		28.733630,11.509522,8.818515,4.565004,2.734448,1.904519,0.603494,
		35.988252,19.193253,16.093419,10.773377,7.853579,6.023976,2.905152,1.694174,0.750076,0.711410,		//Mg
		32.077221,12.495413,9.644163,5.042248,3.070882,2.086080,0.711410,
		39.496080,28.634791,13.079059,11.239687,5.819769,4.390969,3.270281,1.825554,0.707141,0.647998,		//Al
		32.912282,19.759796,11.877702,7.686895,5.052741,3.511684,2.582466,1.012303,0.703112,0.647998,
		40.744005,32.345799,14.154495,12.216360,6.257945,4.879641,3.586780,2.070236,0.975003,0.770863,		//Si
		35.986281,20.811651,11.079502,8.569582,5.733707,4.091940,3.057286,1.252393,0.870155,0.770863,
		46.439666,23.444385,19.934302,12.335517,11.479363,6.165177,4.690649,2.631803,1.110511,0.885109,		//P
		37.277335,18.380101,10.933923,9.369244,5.290342,3.672062,3.427525,1.537478,1.075424,0.885109,
		48.422248,25.147985,21.424545,12.574205,11.445276,6.468338,5.067763,2.950475,1.274078,0.935274,		//S
		40.400452,19.793965,11.660972,10.088606,5.687485,3.866997,3.641627,1.835517,1.197266,0.935274,
		52.549831,26.643633,22.754804,14.248239,13.203531,6.587648,5.115487,3.103725,1.427728,1.006380,		//Cl
		44.251905,21.017294,12.370142,10.884681,6.217866,4.148675,3.863174,2.015464,1.296207,1.006380,
		56.024242,28.780167,24.513979,15.086379,14.036870,6.944507,5.309126,3.317218,1.567689,1.087214,		//Ar
		47.041050,22.401098,13.130477,11.806433,6.780130,4.415953,4.077204,2.200943,1.412360,1.087214,

		48.538420,27.178567,20.222095,13.592814,7.647812,6.078224,6.077278,3.343549,2.301557,1.828604,0.555573,0.543093,		//K
		45.863372,23.956536,13.445654,9.280990,7.576272,5.560868,2.249040,1.893851,1.290943,0.543093,
		55.025070,29.333512,21.316999,14.563031,8.075590,6.763191,6.263443,2.577548,1.816117,1.500414,0.648569,0.625347,		//Ca
		47.329816,25.506017,14.174024,10.249231,8.135533,5.982999,2.330080,2.056882,1.208793,0.625347,
		57.498657,30.833372,22.361741,15.415630,8.610080,7.168035,6.645788,2.786909,1.961794,1.588713,0.676641,0.648242,		//Sc
		49.842595,26.926323,14.480714,10.991611,8.492563,6.351088,2.504892,2.207803,1.218695,0.648242,
		18.112701,13.806782,6.306244,4.161485,2.673453,1.714319,1.087439,0.648242,
		60.289820,32.299759,23.400426,16.255875,9.147991,7.563319,7.020328,2.979739,2.113198,1.621186,0.695769,0.664512,		//Ti
		51.299773,28.672833,15.156461,11.712761,8.887041,6.711089,2.704253,2.368233,1.251387,0.664512,
		19.104138,14.658566,6.716801,4.401956,2.774678,1.786630,1.173680,0.664512,
		62.875206,33.885936,24.457516,17.072833,9.664612,7.931088,7.398658,3.165850,2.266794,1.653671,0.712906,0.679086,		//V
		52.631581,30.669617,15.795601,12.334590,9.301379,7.202975,2.875851,2.512619,1.286363,0.679086,
		20.118919,15.491232,6.994400,4.606157,2.904122,1.867151,1.237729,0.679086,
		64.134378,35.194142,25.454647,17.708856,10.162320,8.462113,7.730720,3.367156,2.316006,1.537736,0.699029,0.666408,		//Cr
		54.119911,32.347673,16.361604,12.870877,9.705787,7.719275,3.078646,2.646262,1.486704,0.666408,
		21.010126,16.248352,7.319431,4.807319,3.023447,1.852525,1.147532,0.666408,
		65.615997,36.493146,26.490049,18.586295,10.770334,8.946835,8.222221,3.543574,2.463906,1.753364,0.743164,0.704089,		//Mn
		52.083296,33.806616,17.420626,13.771396,10.071962,7.859711,3.390377,2.922745,1.760084,0.704089,
		22.242214,17.176523,7.574462,5.005562,3.189753,2.065915,1.380034,0.704089,
		67.039851,37.739652,27.502599,19.356262,11.285074,9.367472,8.606144,3.732769,2.599956,1.821430,0.761362,0.718583,		//Fe
		53.958628,35.552297,18.139253,14.420001,10.398009,8.220976,3.526362,3.043306,1.742634,0.718583,
		23.292198,18.020857,7.891984,5.208309,3.309121,2.122232,1.404987,0.718583,
		67.880489,38.904351,28.510966,20.112028,11.806173,9.803070,8.992577,3.918210,2.729885,1.879157,0.777145,0.731328,		//Co
		55.920505,37.045603,18.633841,14.903522,10.432654,8.406347,3.670304,3.170172,1.761172,0.731328,
		24.172555,18.786883,8.199042,5.406704,3.442626,2.205849,1.453653,0.731328,
		69.226787,40.178379,29.523561,20.825217,12.335507,10.337108,9.378273,4.099637,2.864936,1.935115,0.792121,0.743304,		//Ni
		57.991635,38.657440,19.286668,15.489265,10.586878,8.440193,3.827276,3.303890,1.779584,0.743304,
		25.058793,19.533825,8.512016,5.601915,3.574636,2.291306,1.503687,0.743304,
		70.189946,41.413051,30.509673,21.267318,12.847734,11.192606,9.712223,4.300548,2.962479,1.808143,0.734806,0.690642,		//Cu
		60.062765,40.162787,19.924473,16.048602,10.881331,8.741628,3.948760,3.385906,1.798822,0.690642,
		26.287704,20.461389,8.922963,5.814383,3.626597,2.200138,1.349920,0.690642,
		72.171558,42.777264,31.527672,22.081772,13.336452,11.561129,10.027114,4.420748,3.230588,2.015129,0.818486,0.764862,		//Zn
		62.133895,41.854760,20.683667,16.687144,11.270401,9.043064,4.115574,3.555618,1.819362,0.764862,
		26.840425,21.076327,9.261571,6.082216,3.860363,2.445106,1.590058,0.764862,
		74.163075,44.111552,32.554208,22.941369,14.638429,11.507175,10.651417,6.419062,3.758419,2.128908,0.715996,0.645754,		//Ga
		65.541676,44.152054,22.005072,17.824611,12.176581,10.192581,6.855667,4.730498,3.006855,0.905335,0.645754,
		28.295386,22.128835,9.633176,6.261006,3.907149,2.459171,1.565609,0.645754,
		76.555432,45.858462,33.610460,23.935761,15.346717,12.026209,11.159105,6.438987,4.028666,2.450056,0.836054,0.758093,		//Ge
		69.491987,46.214210,22.646499,18.407375,12.503901,10.373220,7.108357,5.035482,3.291863,1.061577,0.758093,
		28.893923,22.744772,9.975534,6.535857,4.150742,2.687443,1.649905,0.758093,
		54.206035,39.953981,33.575117,22.687547,14.286912,13.481918,6.115775,5.148299,3.641403,1.809534,1.278811,0.859631,		//As
		50.718595,41.198849,24.082973,19.047410,13.627410,6.013469,5.462364,4.087596,1.841936,1.059631,0.859631,
		31.332509,24.312793,10.554143,6.987846,4.485271,2.935044,1.733242,0.859631,
		56.828412,41.684096,34.728365,23.727323,14.086853,14.072696,6.512291,5.392830,3.949425,1.993854,1.411000,0.897613,		//Se
		52.491766,42.761369,25.120026,19.850208,14.194446,6.300767,5.743780,4.284076,1.319656,1.131217,0.897613,
		31.897983,24.931347,10.860020,7.194093,4.709428,3.150997,1.826977,0.897613,
		58.508039,43.044755,35.835678,24.607114,14.767152,14.754419,6.850776,5.703885,4.364524,2.073131,1.496008,0.956123,		//Br
		53.964914,44.074427,25.967586,20.612559,14.804998,7.130435,6.280038,4.641256,1.483284,1.265163,0.956123,
		32.846999,25.721481,11.166998,7.375640,4.935945,3.345405,1.916340,0.956123,
		60.777807,44.499723,36.979014,25.529164,15.429937,15.427470,7.202997,6.034988,4.750173,2.188877,1.592153,1.023901,		//Kr
		55.423460,45.348388,26.746410,21.299661,15.365217,8.075067,6.762676,4.956675,1.641161,1.395473,1.023901,
		33.868162,26.569736,11.514091,7.536640,5.124374,3.510570,2.025551,1.023901
};

double Thakkar_c[1980] {
	//Sorry, i gave up with labelling...
	//believe me when i say it's the c values in the Thakkar Slater Basis with S in one block, below P if present and D afterwards
	1.0,
	0.098380109,
	0.994709459,
	1.158109106,
	2.600492086,
	0.067123842,
	0.094833558,0.018129359,
	-1.347244281,-0.156674816,
	-1.888816785,-0.514095617,
	-6.089476327,-0.205560673,
	-0.03018989,-0.562090899,
	0.000688104,-1.016437599,
	-0.000188358,0.223071967,
	-0.000266959,0.990041326,
	-0.225104651,0.040129825,
	1.449387202,-0.143039375,
	1.987589199,-0.858610913,
	11.24048657,0.17977144,
	0.22753708,-2.591955339,
	-0.011770219,-0.855131866,
	-0.00029315,0.171983474,
	0.001715637,1.555497592,
	-0.664979058,-0.149015926,
	-9.902407656,0.51507232,
	-16.24854754,3.833159735,
	-10.92636447,-3.381477417,
	-0.00903494,-4.223398334,
	-0.003437966,-0.478994815,
	0.000930689,2.840734039,
	-0.000324505,0.041804043,
	0.157235692,
	0.935419882,
	0.482603167,
	1.123020634,
	0.750905127,
	0.383677074,
	0.084403659,
	-0.983212032,-0.245534371,
	-12.58167449,0.702765449,
	-26.08954894,5.622633788,
	-15.0470989,-4.378093737,
	-0.048397243,-5.612572439,
	-0.009937299,-0.199179098,
	-0.000529795,3.359110189,
	-0.000118209,0.031711794,
	0.310204404,
	1.753392235,
	1.580000002,
	2.282963089,
	1.369348022,
	0.588613375,
	0.091916873,
	-1.376589517,-0.328504317,
	-14.29546233,1.356089195,
	-35.78534117,9.411097747,
	-20.67287884,-6.203737993,
	-0.161423346,-7.059640932,
	-0.015861896,0.167419992,
	-0.001305447,4.108037875,
	-6.4006E-05,0.057473879,
	0.512722434,
	2.933423227,
	3.791262711,
	3.936972565,
	2.134393858,
	0.791790326,
	0.097832588,
	-1.71200607,-0.444919996,
	-16.48443838,1.462814599,
	-47.63949679,11.49805486,
	-26.2515816,-6.744440399,
	-0.418532028,-9.235006593,
	-0.021446877,1.12553846,
	-0.000226377,4.692364817,
	-0.000281303,0.033982796,
	0.831928944,
	4.379463994,
	7.609174403,
	6.233614973,
	2.964684557,
	0.961893531,
	0.100909335,
	-2.179884302,-0.611685652,
	-17.93493632,1.305178424,
	-59.7212187,12.4167864,
	-32.99074384,-6.81925617,
	-0.780798223,-11.90654982,
	-0.032678879,2.197744291,
	-0.000815353,5.418130472,
	-0.000272021,0.035438964,
	1.155491599,
	6.322325169,
	13.60737856,
	9.045385081,
	3.974743478,
	1.156008095,
	0.105376366,
	-3.011745754,-0.895959738,
	-17.74146568,0.609441125,
	-69.17856739,10.1756683,
	-41.63244688,-5.779166379,
	-1.382700948,-15.32466646,
	-0.048090609,3.508888198,
	-0.001181748,6.188795983,
	-0.000302038,0.03802106,
	1.490298652,
	8.72871746,
	21.96967239,
	12.37296505,
	5.218724166,
	1.415530358,
	0.114475915,
	3.314601632,-0.793118409,0.131818194,
	25.39866027,3.850411705,-0.363834696,
	110.6115632,31.14009635,-3.384707641,
	44.44961634,-14.64745573,1.663436693,
	0.433538488,-16.79951078,2.77210019,
	0.148213344,-1.722158874,-0.541972602,
	0.008584579,10.42273219,-0.982931948,
	-0.000132209,0.012528312,-0.824492485,
	-5.83919E-06,0.000380491,0.313981541,
	3.75059E-05,-0.002124427,0.315636686,
	2.176865031,
	13.58923529,
	40.29027951,
	17.19409497,
	6.985393657,
	1.077710839,
	0.000207456,
	-3.911629743,1.169900272,0.274531812,
	-29.09153224,-1.589306517,0.120125035,
	-140.2695392,-20.04935475,-1.146719481,
	-50.5267207,8.959533087,0.578220325,
	-0.652942679,27.524416,5.577891642,
	-0.295294951,15.28582544,0.432076996,
	-0.011603786,-14.58700001,-0.553138234,
	0.000276084,-0.023629886,-2.754064726,
	4.27608E-06,-8.2821E-05,0.303294133,
	-2.07614E-05,0.000432149,0.9389016,
	2.805933096,
	18.24273225,
	60.27789131,
	22.32832259,
	10.73361494,
	0.660342049,
	0.000330793,
	0.843142474,-0.340404377,-0.088663004,
	-3.258690941,0.949345722,0.24446158,
	-88.21322725,27.47167088,5.617423043,
	-34.82645858,87.44667771,18.3950498,
	-0.133032016,11.34218328,11.60180308,
	-0.1768904,-6.523176982,16.749506,
	0.050155022,-15.83538025,-10.08519635,
	-0.001677262,-0.010028054,-4.06766156,
	-2.12671E-05,9.30315E-05,-0.329496421,
	8.95113E-05,-0.000536337,2.221205689,
	-0.663034808,0.129162625,
	3.630277912,-0.707858098,
	1.977827534,-0.116273442,
	27.66305554,-4.912985087,
	20.11030285,-4.536669876,
	13.43196306,-0.599396354,
	1.232059344,-2.09698795,
	0.002800875,0.375088822,
	-0.000416964,0.356697919,
	2.46672E-05,0.002132178,
	1.421560024,0.566127307,-0.168579438,
	-3.729928785,-1.179376859,0.34798148,
	-99.17107228,-31.06996378,7.018832647,
	-44.88616539,-106.8737498,25.10956282,
	-0.133748377,-10.27760061,19.61868706,
	-0.209553976,19.45727163,32.33122741,
	0.051465951,14.92165333,-18.18700504,
	-0.002107147,0.007816759,-4.863904193,
	0.000227207,0.002475204,3.201866177,
	-7.45843E-05,-0.000409469,-0.044369399,
	-0.691617802,0.166849431,
	4.55996582,-1.053633651,
	1.287389147,0.474124956,
	32.88772741,-7.399829274,
	24.41752421,-6.655036842,
	20.39993396,-0.990193773,
	2.334041978,-4.109113665,
	0.005434787,0.802186686,
	-0.00064169,0.562673557,
	4.12573E-05,0.003983816,
	-5.181063219,-1.411937307,0.875672657,
	-46.76958262,9.740198907,5.242478358,
	-276.2899515,89.02228011,34.62682075,
	119.2529145,51.38565956,38.88362305,
	-66.04690601,-40.62096164,8.670139956,
	-0.250907717,47.93270234,12.38716273,
	0.022702879,35.21262733,-10.6656045,
	-0.001459325,0.246859953,-9.306281668,
	0.000184434,0.0025582,3.903578086,
	-5.8623E-05,-0.000126073,-0.096022921,
	-0.813129284,0.228264004,
	-42.01227418,10.8448462,
	56.40183984,-14.50560867,
	84.19435698,-27.45950435,
	38.15980791,-6.825611542,
	-5.600294185,0.005260772,
	11.7567311,-6.219313414,
	0.007165278,1.302332426,
	-0.000827063,0.807393174,
	0.000211489,0.140880653,
	-6.237936051,-1.816179509,0.708385369,
	-55.13585931,8.580401388,0.872716998,
	-357.927483,86.79043073,1.823037693,
	175.6149928,85.0388382,11.5627701,
	-69.33064289,-43.28378086,15.50135605,
	-0.074853313,63.70107865,17.96579039,
	-0.03114977,37.61008938,-19.10447569,
	0.00234345,0.320444519,-11.11541521,
	4.80331E-05,0.005418247,4.703886461,
	3.9798E-06,-0.000266646,0.016338335,
	-0.926007325,0.279119931,
	-50.69107889,14.13193492,
	65.92020267,-18.92546267,
	98.18533398,-38.35974613,
	52.63133695,-6.86517233,
	-5.380181321,4.022894326,
	10.76238879,-10.52577053,
	0.01343387,2.121434144,
	0.000252469,1.074459281,
	0.000257784,0.154937154,
	-5.834276776,-1.668917525,0.929231087,
	-49.91204619,12.26452731,1.033575639,
	-329.5191967,121.7106828,1.913418232,
	183.0334187,67.17734348,20.10674813,
	-86.57682347,-50.64031711,14.26480954,
	-0.226763043,99.2531333,5.854964932,
	0.028642076,22.43881467,-30.6830443,
	-0.000277772,0.106126425,-9.408853879,
	0.000180831,0.011254884,5.628811648,
	-1.63553E-05,-0.00082362,0.055725471,
	-0.929582142,0.297827288,
	-58.91534392,17.52924397,
	73.68580475,-22.97058831,
	102.6372782,-47.11790722,
	68.27675143,-7.88124776,
	-8.353913615,10.27567077,
	12.93376257,-15.3580873,
	0.014634416,3.058757374,
	0.001805248,1.253933633,
	0.000273944,0.151705656,
	-7.367821695,-1.969454547,0.973876284,
	-52.810208,8.622168044,-3.467147869,
	-392.0395496,98.49963363,-39.55418107,
	211.0198077,51.52475961,-9.486511404,
	-96.05881384,-51.01211152,18.42858844,
	-0.347734643,127.6438254,-8.239767251,
	0.109003887,17.64608321,-39.75288897,
	-0.009609969,0.10686484,-8.324189682,
	0.000731363,0.013935931,6.506251086,
	-0.000119712,-0.000702399,0.065374586,
	-1.074292046,0.354008146,
	-70.25244763,21.95935785,
	80.27175634,-26.14818182,
	101.3397729,-52.61782953,
	87.61939392,-11.02181656,
	-12.32735655,17.56891933,
	15.63043112,-19.84444634,
	0.009877517,4.059476135,
	-0.000246363,1.515301877,
	5.89193E-05,0.160308354,
	-1.472978417,1.26250462,-0.287507748,0.090763444,
	709.7655916,-454.267454,110.4082751,-34.95519194,
	148.9197142,-29.11735132,9.539333225,-1.875624126,
	-320.3295147,335.2209444,-184.9917451,26.98791017,
	-40.31006727,194.7478665,-14.37942831,5.171873334,
	-5.428590128,45.60928623,-67.79006482,8.636606603,
	14.19849842,-18.86844767,8.704377031,-3.634902442,
	0.003324687,0.240904679,-11.11988033,9.304403235,
	0.020648702,-0.056671649,1.441893146,5.485509756,
	-0.016874513,0.058912678,8.463033823,-6.409262039,
	-7.81033E-06,2.27137E-05,7.49951E-05,0.388091999,
	5.27505E-05,-0.000161133,0.000745711,-0.429683776,
	1.610337904,0.582287659,
	90.59297591,31.32505807,
	-66.32354061,-11.75919552,
	50.46622198,63.68008668,
	-121.5137794,-32.20562303,
	-27.52209555,-29.78470534,
	0.051729261,-2.446848054,
	-0.062778438,7.828410987,
	0.001141102,0.230789175,
	-2.3844E-06,0.000270391,
	1.162712591,0.976995316,-0.263187909,0.043592538,
	-746.8052445,-466.5897285,137.6177732,-23.87964627,
	-159.2346796,-29.76384124,10.11015089,-2.444430776,
	437.8033628,417.9941082,-210.2103778,60.6408392,
	51.23640977,248.9604862,-33.29130917,2.352262001,
	-16.75052927,-22.20323961,6.935532455,-0.824419729,
	0.648176339,34.56669894,-81.43085837,26.57350665,
	-0.150057719,-0.380077659,13.8869905,-1.5461937,
	0.132313155,0.398204311,0.291781865,3.774631094,
	-0.037398243,-0.123763802,0.422876597,-5.118057755,
	-7.15832E-05,-0.000340705,0.000922249,0.359804549,
	0.000491649,0.002215933,-0.006255843,0.392209194,
	-1.993078624,0.822144932,
	-107.2339686,41.6936581,
	76.47289558,-10.785433,
	-46.03039272,94.61817482,
	140.0813726,-44.30685593,
	33.56342848,-36.88177053,
	-0.042761516,-2.938189801,
	0.055306851,10.34013418,
	0.000245234,0.052032271,
	-1.63545E-05,0.000336624,
	1.180252169,1.042214549,-0.319413646,0.066010409,
	-827.4481144,-544.2955577,181.6285911,-38.50814377,
	-171.2584156,-31.22673464,10.86837207,-2.630229071,
	515.8688565,459.5425352,-230.1642546,63.40312016,
	59.38903454,296.8039586,-42.95594893,4.409186621,
	-18.19107617,-25.17653021,7.668523342,-1.016292287,
	1.299528739,42.17406196,-99.43063242,31.13431263,
	-0.171288788,-0.324705643,16.30396263,-2.175869314,
	0.134285633,0.320473311,0.858720447,3.585037432,
	-0.034851561,-0.093685623,0.351050353,-5.143021291,
	-9.07151E-05,-0.000349988,0.000844485,0.35873375,
	0.000555325,0.00204343,-0.005190307,0.530259881,
	-2.223685282,0.937674213,
	-123.8843117,49.58533216,
	111.7501664,-12.17351964,
	46.87010474,120.1690462,
	139.442124,-55.80863818,
	36.73922644,-41.88631064,
	-0.042523289,-4.49268451,
	0.05504378,13.02670758,
	5.67974E-07,0.037557637,
	-5.07874E-06,0.000240927,
	15.03378413,
	99.39326225,
	11.73842401,
	12.17066357,
	4.325677753,
	1.062179393,
	0.116956409,
	0.000367537,
	1.210208303,1.127255761,-0.38967097,0.088944599,
	-925.4219341,-644.860134,240.3731088,-55.6520917,
	-183.7261027,-32.72440201,11.59399578,-2.762441582,
	596.1639712,495.5434965,-243.4716375,63.55853656,
	67.78863806,349.8004518,-54.69995644,6.798396186,
	-19.51487684,-28.18377768,8.067336706,-1.108911433,
	2.286438206,51.25440103,-119.410462,35.59511752,
	-0.163605673,-0.136432743,17.97143498,-2.650558789,
	0.109382567,0.151773257,1.853723506,2.57881523,
	-0.021463841,-0.0378762,0.208498272,-4.395430505,
	-8.89166E-05,-0.000251969,0.000714596,0.348849443,
	0.000508651,0.001361494,-0.004135727,0.644578372,
	-2.685796703,1.203602575,
	-144.5811089,60.82135435,
	136.9866803,-12.16502095,
	110.083022,152.8360716,
	152.8270843,-70.58961059,
	39.36928165,-46.34364969,
	-0.053848836,-6.323647677,
	0.066176693,15.94566884,
	-0.000110241,0.034148355,
	9.14427E-07,0.000155037,
	19.36413279,
	133.8057228,
	17.15242164,
	17.42567315,
	5.605679499,
	1.128576022,
	0.105806981,
	0.000104204,
	1.287187246,1.177204479,-0.4538908,0.108187943,
	-1050.193475,-732.242714,302.2217822,-72.6760969,
	-196.4307939,-34.15018678,12.25542211,-2.867251624,
	693.9208926,550.1906019,-257.1041974,63.6656965,
	76.88189232,407.870066,-68.06537642,9.30863217,
	-20.95633436,-31.40212821,8.476430258,-1.18243296,
	3.752115106,60.2768476,-141.1624326,40.38528192,
	-0.119177346,-0.034536638,19.51837306,-3.04228202,
	0.06996971,0.078765325,2.833680086,1.874125329,
	-0.010266087,-0.018217647,0.148200311,-3.957290766,
	-5.59923E-05,-0.00018864,0.000642871,0.339254166,
	0.000305548,0.000955706,-0.003526564,0.742062999,
	-3.749961118,1.5965181,
	-179.5613866,75.27081833,
	177.4674698,-17.71744615,
	248.5442051,161.1815115,
	147.1504085,-75.39853559,
	49.61694268,-56.61011923,
	-0.099178205,-8.414593087,
	0.108712294,18.90726794,
	3.68406E-06,0.031288754,
	-5.00249E-06,0.000105447,
	24.22149086,
	176.485143,
	24.29440987,
	22.36234431,
	6.854192086,
	1.23411079,
	0.101314094,
	4.87259E-05,
	1.445308057,1.398774685,-0.596099691,0.14699615,
	-1207.594053,-890.288215,401.2119693,-99.37887996,
	-210.7590565,-36.50479124,13.13595701,-2.87128168,
	750.5502466,590.2765525,-252.2445104,51.47941668,
	77.73902908,465.7329934,-83.21443796,13.12058262,
	-21.15113255,-33.912596,7.565524,-1.442642856,
	3.389248141,64.12359703,-163.061368,40.06033433,
	-0.015953682,0.218530135,17.9477558,-4.473229016,
	0.007889459,-0.061614898,4.882000966,0.579127309,
	-0.001152516,0.006379648,0.015430448,-2.294702942,
	-1.74074E-05,0.00011737,-4.25514E-05,0.347478535,
	9.00888E-05,-0.000188991,-0.000337506,0.599907182,
	4.687518029,1.726718425,
	215.1948543,83.32794111,
	-226.7640118,-25.98929731,
	-428.5363088,152.7740262,
	-132.0100558,-73.60509529,
	-63.80790331,-70.37342308,
	0.187504934,-11.73553921,
	-0.177588235,22.0111415,
	0.000107051,0.086200002,
	-1.25586E-07,9.79989E-05,
	27.18379507,
	205.5679326,
	30.2440682,
	25.87813923,
	7.438320279,
	1.203831988,
	0.113755312,
	0.000298875,
	1.537457007,1.55063855,-0.680337747,0.162749546,
	-1329.903254,-1027.439824,474.6029259,-114.0334417,
	-224.1697411,-37.63122276,13.85037151,-3.116084087,
	841.2797892,588.1570687,-262.3090822,59.80180228,
	87.60539558,529.3815451,-91.38670081,12.79353324,
	-22.5654988,-37.75902868,9.806534255,-1.439704963,
	4.128189928,84.49569224,-191.3752601,51.00672964,
	-0.044751855,0.33939462,23.84218684,-4.152164799,
	0.021795205,-0.108863864,4.170781621,1.451723683,
	-0.0033493,0.013025262,0.033056983,-3.832688604,
	-2.58942E-05,4.12877E-05,0.000319196,0.326059563,
	0.000126077,-0.000239274,-0.001512924,0.881970185,
	7.385240672,3.562638292,
	284.0198815,131.1502178,
	-233.3614465,-26.29715623,
	-431.9183761,195.9640908,
	-191.8539531,-106.9016105,
	-50.84132729,-64.52083551,
	0.187657741,-12.92875727,
	-0.177179314,26.39668573,
	0.000638775,0.191046405,
	-2.44967E-06,0.000272298,
	35.38551507,
	287.7480127,
	44.20178046,
	33.45973127,
	9.519043798,
	1.585403821,
	0.118488701,
	3.64175E-05,
	1.666923815,1.718411385,-0.817104449,0.200241638,
	-1483.866557,-1172.953095,584.234952,-143.545645,
	-238.564677,-39.42687839,14.63302317,-3.26151055,
	920.6679358,625.8745203,-250.8335722,52.58580403,
	94.50976743,601.0131243,-109.9444259,16.38087363,
	-23.3239646,-41.11009423,10.4973079,-1.596980879,
	4.637531254,94.73926391,-217.1626123,56.40052407,
	-0.042486614,0.34876139,26.26290424,-4.800968777,
	0.018551623,-0.099386088,4.880358744,1.330556147,
	-0.002429693,0.010842666,0.035467033,-3.877530014,
	-1.68205E-05,3.59189E-05,0.000287993,0.321745679,
	7.99189E-05,-0.000196508,-0.001277362,0.953341522,
	8.739813734,3.963662346,
	332.8304478,149.847699,
	-276.7349454,-30.45626978,
	-611.6352071,216.7392133,
	-202.3283298,-126.9917507,
	-52.66571734,-66.17881994,
	0.23525748,-16.60763025,
	-0.211004729,30.31905252,
	0.000393,0.133875972,
	-1.81955E-06,0.000208591,
	41.28180249,
	351.4421971,
	57.15184853,
	40.05425874,
	10.71668197,
	1.682179447,
	0.123624504,
	4.21068E-05,
	1.847698866,1.938970872,-0.980167393,0.243392017,
	-1655.008959,-1334.422885,703.6261925,-175.004503,
	-253.4513601,-41.29184312,15.42374841,-3.396906939,
	994.6154189,654.7025714,-230.6783305,42.5764031,
	100.8548561,677.587044,-130.2411055,20.26841366,
	-23.94156682,-44.54250271,11.20265057,-1.757699199,
	5.014715136,106.1560883,-244.64968,61.76386913,
	-0.044133229,0.371260216,28.65408388,-5.466870803,
	0.017453503,-0.096615801,5.61726215,1.179909298,
	-0.001957239,0.010025248,0.03402474,-3.874388075,
	-1.18039E-05,4.47565E-05,0.00026153,0.315613021,
	5.60372E-05,-0.000220271,-0.001091099,1.018292718,
	9.658640913,4.128616706,
	375.8113376,161.9939442,
	-349.409889,-42.20917468,
	-930.2655879,202.445119,
	-200.8924269,-159.1736459,
	-40.25701361,-49.38664885,
	0.269994807,-20.51871069,
	-0.2340572,34.35803409,
	0.00027948,0.113043583,
	-1.69005E-06,0.000174445,
	48.06567324,
	422.5708259,
	72.53308066,
	46.99609421,
	12.08618405,
	1.867391137,
	0.138489924,
	5.22117E-05,
	2.034149045,2.139208731,-1.124207755,0.279928768,
	-1856.753959,-1510.583312,826.3025751,-206.1769495,
	-268.6782116,-43.08635087,16.12829779,-3.503978379,
	1075.809948,683.7010896,-208.0227214,31.94093447,
	104.8597162,756.747434,-151.8652171,24.35747726,
	-24.51354843,-48.12194225,11.9398797,-1.918762409,
	4.44911381,116.8202065,-273.6638077,67.30834642,
	-0.038382966,0.405355241,30.97946228,-6.099968049,
	0.014290668,-0.097591635,6.412212445,1.010380762,
	-0.001420251,0.00915141,0.041722416,-3.861261137,
	-8.76975E-06,4.43646E-05,0.000277537,0.309700541,
	4.01166E-05,-0.000208273,-0.001115959,1.077012597,
	10.70511463,4.802515514,
	423.6821552,188.1248117,
	-407.2819791,-54.67234526,
	-1202.395463,179.5957697,
	-220.3801993,-194.7378427,
	-25.52512749,-30.85718289,
	0.294369167,-25.04839478,
	-0.247489964,38.78956881,
	0.000224888,0.099537631,
	-2.25512E-06,0.000131512,
	55.60407166,
	503.3146598,
	90.49007395,
	54.55372599,
	13.53714357,
	2.074076282,
	0.154628601,
	6.03566E-05,
	2.376534917,2.472857088,1.2854717,0.291671529,
	-2158.92652,-1757.86409,-952.9255676,-217.4806364,
	-285.5464955,-45.77897229,-16.84062872,-3.046673603,
	1119.883891,721.6618863,179.8870851,0.830455267,
	92.77090922,825.8441572,175.6225102,28.11938381,
	-23.87763512,-51.06747553,-11.35800042,-2.050966634,
	1.576947169,116.7991818,302.0796289,57.49263498,
	0.005527051,0.370197253,-29.16734068,-6.924991571,
	-0.001419555,-0.065669705,-8.373620082,0.025311314,
	0.000113788,0.004958028,-0.03671839,-1.959070273,
	1.17577E-06,4.17934E-05,-0.000166425,0.355050717,
	-5.62478E-06,-0.000198934,0.000164726,0.615229502,
	11.56400452,4.99105276,
	469.3704834,202.4867797,
	-464.1654076,-63.64146274,
	-1476.903149,169.6269299,
	-232.3504577,-222.4116839,
	-22.89221904,-22.48651578,
	0.401284848,-31.80492723,
	-0.31051919,42.82828815,
	9.62146E-05,0.112540037,
	-3.84487E-06,4.0188E-05,
	59.5860354,
	569.188665,
	105.4227685,
	62.70019083,
	14.14400905,
	1.852772914,
	0.135081093,
	0.00013532,
	2.424174163,2.543365689,-1.441211945,0.353895829,
	-2322.912474,-1900.203666,1122.54639,-276.9129089,
	-300.7530697,-47.2722603,17.3066955,-3.62737563,
	1239.328677,793.6531679,-103.9314323,-4.151454642,
	102.5168189,926.8430555,-221.3413708,38.29803223,
	-24.90152884,-54.97415415,12.10929234,-1.892387476,
	1.916778578,123.4836412,-327.8400524,77.0810122,
	-0.005859705,0.458769796,31.76401156,-6.230578838,
	0.00252239,-0.106206309,9.60278162,0.064014348,
	-0.000149322,0.00542309,0.112807592,-3.636710654,
	-1.53964E-06,3.20526E-05,0.000657638,0.293840692,
	6.15407E-06,-0.000138868,-0.002653073,1.189940067,
	13.2298767,5.330603708,
	538.0594965,222.5680647,
	-514.0714223,-70.39024354,
	-1746.626272,176.128134,
	-253.2198998,-254.7170904,
	-22.76718125,-18.00515876,
	0.432608031,-35.04784531,
	-0.334699426,47.78441406,
	0.0001227,0.079312581,
	-1.47695E-06,7.59745E-05,
	71.36503721,
	682.4632846,
	131.8448601,
	75.33918047,
	17.71362662,
	2.512696367,
	0.171451944,
	5.34925E-05,
	-2.570676796,2.730857104,1.358083761,0.300050673,
	2572.967196,-2170.667656,-1106.690292,-243.7064609,
	315.5256344,-43.99698954,-18.81513265,-4.866261196,
	-1261.717697,317.6465468,315.1349864,142.9833744,
	-110.5310717,909.4296398,71.15881674,-14.94096303,
	-56.50894531,435.0980854,450.6775849,131.1629396,
	26.73051107,-65.59107197,-36.2927797,-6.844911314,
	-0.001772694,1.56549075,46.80527435,9.348467765,
	-0.002585184,0.020448307,-33.1052602,-3.547590423,
	0.000254091,0.002617941,-0.099903589,-5.993400867,
	4.00715E-06,3.51628E-05,-0.000181324,-0.398501526,
	-1.35957E-05,-0.000124748,0.000601636,2.263030924,
	-14.17950084,6.738375082,-0.843300815,
	-589.150091,283.0486153,-36.4842865,
	470.9613028,-45.88654247,6.859060819,
	1563.768806,381.6874777,-61.35775203,
	393.2494276,-286.5397964,49.62915915,
	69.17839379,81.012114,-0.969406911,
	0.971018842,151.4551769,-25.44324063,
	0.078641428,44.64421728,-1.738450257,
	0.004715832,3.912878643,-3.755000559,
	5.13296E-06,0.001374191,0.507357802,
	-1.7799E-06,-0.000181085,0.196633427,
	82.15359595,
	841.7261396,
	165.9983046,
	90.85931746,
	20.1505776,
	2.202968939,
	0.043214403,
	-6.75158E-07,
	-2.421834129,2.605367305,1.295315532,0.256946446,
	2627.990036,-2228.244325,-1135.655616,-225.1099525,
	329.4785087,-42.98794871,-19.01231982,-5.55469418,
	-1461.287868,231.9201465,358.1756808,233.2525169,
	-128.3144543,993.2738029,67.47074578,-31.5748179,
	-64.36727821,514.769693,512.2198682,170.4088173,
	29.33540367,-71.98579178,-39.0960754,-7.275478448,
	0.022064229,1.537283965,54.6543789,9.976916824,
	-0.00665652,-0.006946004,-40.37082005,-1.80530942,
	0.000793076,0.005865231,-0.184848726,-9.505909165,
	1.11438E-05,7.49806E-05,-9.66039E-05,-0.569977413,
	-3.40591E-05,-0.000243958,5.30689E-05,2.955657093,
	-13.45255324,6.819245197,-0.97152164,
	-605.1794767,303.3960408,-45.32268345,
	528.3972906,-58.53235528,9.699404275,
	1889.331245,357.2621404,-76.14419586,
	411.9726045,-309.9570294,67.45241295,
	62.48244005,110.3159232,0.136420239,
	0.865030868,160.4463888,-30.27575735,
	0.116576152,54.51102096,0.8921881,
	0.003916182,5.501068575,-7.109261701,
	6.4356E-06,0.002355163,0.953530157,
	-3.06233E-06,-0.000275667,0.225789357,
	96.03060823,
	987.6345218,
	201.0061795,
	106.2182769,
	25.34657665,
	2.663718877,
	0.029668911,
	-6.28579E-06,
	-7.813235466,37.73792411,15.69208142,4.37291515,
	3374.689614,-8946.189402,-3765.049688,-1056.666391,
	381.217173,-154.2283443,-61.06419346,-16.97876929,
	-3239.330195,14720.70662,5511.956581,1401.371407,
	47.08187069,707.9918977,373.7933066,107.9258424,
	-66.47233035,733.7253116,1389.607642,467.7290063,
	-1.780814173,-9.85205591,-32.57703077,3.311161849,
	0.711909292,4.730995117,-71.94952501,-17.57547982,
	-0.003795337,-0.141166681,-3.842172799,-14.74843841,
	-0.00048369,0.002786174,0.024862968,2.471794769,
	0.000301096,-0.001216981,-0.010806555,1.529336446,
	-0.000168968,0.000610038,0.004943584,0.110862965,
	-130.2859572,80.20656525,-20.04952594,
	-2659.818039,1607.889291,-404.5603203,
	1136.021574,-539.2385599,125.8508253,
	5564.900284,-2551.177445,576.7133153,
	1214.147761,-1180.272015,304.1537868,
	2.057182422,66.04486866,-19.35061119,
	-0.958452671,69.91573029,-12.76679323,
	0.09310637,10.57652737,-10.03155352,
	-0.001061362,0.010538881,0.77407186,
	0.000515161,-0.002163277,0.912126083,
	-0.000142087,0.000465265,0.156501628,
	103.3571029,
	1212.683423,
	235.2433411,
	132.1637737,
	34.72144671,
	3.381622336,
	0.023765368,
	-6.25794E-06,
	9.957788188,38.08791221,-15.93121018,4.70116313,
	-4149.190604,-10106.20903,4282.988396,-1273.188719,
	-400.6123445,-160.3278894,64.03351801,-18.87235915,
	4391.810865,18256.97881,-6837.070109,1834.214098,
	-57.30971309,745.7687182,-392.8359409,121.035543,
	132.2436331,428.8608,-1346.935672,496.708419,
	3.587601905,-18.69829287,70.83550202,-3.005978012,
	-1.327726177,8.021071352,69.87155301,-14.30235927,
	0.033359533,-0.384021195,5.589733316,-21.91047305,
	0.000417435,0.007481416,-0.028823093,3.332027208,
	-0.000284001,-0.002560927,0.011566497,1.996692317,
	0.000116848,0.000854502,-0.003333648,0.109282261,
	-149.1955837,-91.27663316,-24.42065438,
	-3105.119582,-1873.889825,-503.0900812,
	1239.441528,595.3176333,150.6579176,
	6393.736622,2962.029066,729.9950149,
	1436.67556,1380.963395,386.0885233,
	2.550035293,-71.78008979,-24.25537942,
	-1.334064529,-90.33746154,-18.80552277,
	0.133448521,-11.23188747,-16.68074951,
	0.00068347,0.004254325,-0.564366078,
	-0.00105091,-0.010398146,2.372665315,
	-8.55877E-05,0.000306476,0.10172739,
	118.8606529,
	1396.049653,
	283.1317238,
	148.560229,
	41.10424231,
	3.747035016,
	0.02212612,
	-1.72763E-05,
	11.86029272,40.29526129,-16.92724092,5.20720447,
	-4839.154595,-11186.98187,4774.665186,-1483.278456,
	-420.0237829,-168.3788099,67.83309329,-20.88641087,
	5201.44489,21723.62735,-7954.557859,2163.164582,
	-64.90967946,797.926683,-414.5560901,135.0329723,
	150.4845956,715.8241423,-1641.873629,635.2527074,
	3.629832422,-23.53884016,125.3268695,-11.23578192,
	-1.312669634,9.964042241,62.46695163,-4.562721395,
	0.036936827,-0.556690093,10.33124613,-34.42114324,
	0.000595225,0.005218402,-0.015911017,4.438049054,
	-0.000351803,-0.002026106,0.010282884,2.076532137,
	0.000130514,0.000624895,-0.002660946,0.07866535,
	-156.5052774,-97.60119189,-28.29471151,
	-3314.782977,-2041.191941,-593.441369,
	1334.426573,648.4113342,176.8652815,
	7152.237782,3331.355846,881.8443799,
	1695.490346,1612.74087,490.0455817,
	4.02610309,-76.90786855,-29.23415381,
	-1.514180366,-150.6256821,-36.09058678,
	0.156448975,-17.94334522,-25.41192888,
	0.00092957,0.00934614,-0.847719205,
	-0.001378525,-0.020026343,3.134415233,
	-5.12992E-05,0.000250509,0.144023242,
	134.8306903,
	1628.324194,
	339.3135306,
	164.9071545,
	47.96236648,
	3.99139488,
	0.019620158,
	-7.56757E-07,
	14.09713259,41.69570557,-17.59291519,5.607713288,
	-5810.005778,-12591.11351,5405.315934,-1741.940934,
	-440.0215743,-175.7094257,71.36588435,-22.80580797,
	6266.164226,25706.73456,-9300.198201,2574.066559,
	-74.45499944,849.3603939,-434.5202139,147.8791353,
	177.0427179,1054.215489,-1964.657046,790.5869736,
	4.038712833,-28.95138952,193.3972578,-21.71024354,
	-1.415622733,12.16357363,50.71391653,9.954993054,
	0.03613307,-0.761787097,17.5951922,-51.32869783,
	0.000888081,0.004489515,-0.004111364,5.5611344,
	-0.000494552,-0.002004801,0.009271649,2.294974183,
	0.000170743,0.000601539,-0.002163925,0.070194639,
	-164.066075,-104.3329474,-32.02261784,
	-3546.732946,-2226.399486,-684.1436654,
	1433.291216,707.4838375,204.2592964,
	7934.11116,3746.067997,1049.323175,
	1926.812756,1859.946932,603.9885603,
	6.138435316,-84.95487925,-35.63728698,
	-1.183767182,-222.1050678,-59.65003745,
	0.139030566,-25.23533942,-35.54008558,
	0.000897751,0.013561765,-1.201635695,
	-0.001230386,-0.024059738,4.044875826,
	-2.0824E-05,0.000581111,0.17632806,
	150.4618885,
	1867.574765,
	402.2262285,
	186.3804237,
	53.43227211,
	3.896381822,
	0.019788938,
	4.12177E-06
};

unsigned int first_ex_SF(unsigned int atomtype){
	if(atomtype==0) return 0;
	return first_ex_SF(atomtype-1)+Thakkar_nex[atomtype];
};

unsigned int first_coef_SF(unsigned int atomtype){
	if(atomtype==0) return 0;
	unsigned int counter=0;
	for(int m=0; m<4; m++)
		if(Thakkar_occ[atomtype*8+m]!=0)
			counter+=Thakkar_ns[atomtype];
	for(int m=0; m<3; m++)
		if(Thakkar_occ[atomtype*8+4+m]!=0)
			counter+=Thakkar_np[atomtype];
	if(Thakkar_occ[atomtype*8+7]!=0)
		counter+=Thakkar_nd[atomtype];
	return first_coef_SF(atomtype-1)+counter;
};

void type2vector_SF(
		const int index,
		int * vector){
	switch(index){
		case 1:
			vector[0]=0; vector[1]=0; vector[2]=0;
			break;
		case 2:
			vector[0]=1; vector[1]=0; vector[2]=0;
			break;
		case 3:
			vector[0]=0; vector[1]=1; vector[2]=0;
			break;
		case 4:
			vector[0]=0; vector[1]=0; vector[2]=1;
			break;
		case 5:
			vector[0]=2; vector[1]=0; vector[2]=0;
			break;
		case 6:
			vector[0]=0; vector[1]=2; vector[2]=0;
			break;
		case 7:
			vector[0]=0; vector[1]=0; vector[2]=2;
			break;
		case 8:
			vector[0]=1; vector[1]=1; vector[2]=0;
			break;
		case 9:
			vector[0]=1; vector[1]=0; vector[2]=1;
			break;
		case 10:
			vector[0]=0; vector[1]=1; vector[2]=1;
			break;
		case 11:
			vector[0]=3; vector[1]=0; vector[2]=0;
			break;
		case 12:
			vector[0]=0; vector[1]=3; vector[2]=0;
			break;
		case 13:
			vector[0]=0; vector[1]=0; vector[2]=3;
			break;
		case 14:
			vector[0]=2; vector[1]=1; vector[2]=0;
			break;
		case 15:
			vector[0]=2; vector[1]=0; vector[2]=1;
			break;
		case 16:
			vector[0]=0; vector[1]=2; vector[2]=1;
			break;
		case 17:
			vector[0]=1; vector[1]=2; vector[2]=0;
			break;
		case 18:
			vector[0]=1; vector[1]=0; vector[2]=2;
			break;
		case 19:
			vector[0]=0; vector[1]=1; vector[2]=2;
			break;
		case 20:
			vector[0]=1; vector[1]=1; vector[2]=1;
			break;
		case 21:
			vector[0]=0; vector[1]=0; vector[2]=4;
			break;
		case 22:
			vector[0]=0; vector[1]=1; vector[2]=3;
			break;
		case 23:
			vector[0]=0; vector[1]=2; vector[2]=2;
			break;
		case 24:
			vector[0]=0; vector[1]=3; vector[2]=1;
			break;
		case 25:
			vector[0]=0; vector[1]=4; vector[2]=0;
			break;
		case 26:
			vector[0]=1; vector[1]=0; vector[2]=3;
			break;
		case 27:
			vector[0]=1; vector[1]=1; vector[2]=2;
			break;
		case 28:
			vector[0]=1; vector[1]=2; vector[2]=1;
			break;
		case 29:
			vector[0]=1; vector[1]=3; vector[2]=0;
			break;
		case 30:
			vector[0]=2; vector[1]=0; vector[2]=2;
			break;
		case 31:
			vector[0]=2; vector[1]=1; vector[2]=1;
			break;
		case 32:
			vector[0]=2; vector[1]=2; vector[2]=0;
			break;
		case 33:
			vector[0]=3; vector[1]=0; vector[2]=1;
			break;
		case 34:
			vector[0]=3; vector[1]=1; vector[2]=0;
			break;
		case 35:
			vector[0]=4; vector[1]=0; vector[2]=0;
			break;
		default:
			vector[0]=-1; vector[1]=-1; vector[2]=-1;
			break;
	}
}

double compute_dens(
	WFN &wave,
	double * PosGrid			// [3] array with current position on the grid
	)
{
	const unsigned int nmo = wave.get_nmo();
	vector<double> phi;
	phi.resize(nmo);
	double Rho=0.0;

	for (int i = 0; i < wave.get_nmo(); i++)
		phi[i] = 0.0;

	int iat;
	float d[3];
	int l[3];
	float ex;

	for (int j = 0; j < wave.get_nex(); j++) {
		iat = wave.get_center(j);
		type2vector_SF(wave.get_type(j), l);

		d[0] = PosGrid[0] - wave.atoms[(iat - 1)].x;
		d[1] = PosGrid[1] - wave.atoms[(iat - 1)].y;
		d[2] = PosGrid[2] - wave.atoms[(iat - 1)].z;
		ex = exp(-wave.get_exponent(j) * (d[0] * d[0] + d[1] * d[1] + d[2] * d[2]));
		if (ex < pow(10, -30))	continue;
		float xl[3] = {0.0,0.0,0.0};
		for (int k = 0; k < 3; k++) {
			if (l[k] == 0)		xl[k] = 1.0;
			else if (l[k] == 1)	xl[k] = d[k];
			else if (l[k] == 2)	xl[k] = d[k] * d[k];
			else if (l[k] == 3)	xl[k] = pow(d[k], 3);
			else if (l[k] == 4)	xl[k] = pow(d[k], 4);
		}
		for (int mo = 0; mo < wave.get_nmo(); mo++)
			phi[mo] += wave.get_MO_coef(mo,j,false) * xl[0] * xl[1] * xl[2] * ex;      //build MO values at this point

	}

	for (int mo = 0; mo < wave.get_nmo(); mo++)
		Rho += wave.get_MO_occ(mo) * pow(phi[mo], 2);
	return Rho;
}

double compute_Hirshfeld(
	int * TypeAtoms,
	int selected,
	WFN &wave,
	double * PosGrid
	)
{
	double r;
	double Rho = 0.0;
	double Atom_Rho = 0.0;

	for (int j = 0; j<wave.get_ncen(); j++)
	{
		r = sqrt(
			(PosGrid[0] - wave.atoms[j].x)*(PosGrid[0] - wave.atoms[j].x) +
			(PosGrid[1] - wave.atoms[j].y)*(PosGrid[1] - wave.atoms[j].y) +
			(PosGrid[2] - wave.atoms[j].z)*(PosGrid[2] - wave.atoms[j].z)
			);
		if (r == 0) continue;

		//Speedup things for H
		if(TypeAtoms[j]==1){
			Rho+= pow(exp(-1*r)*2,2);
			if(j==selected)
				Atom_Rho = pow(exp(-1*r)*2,2);
			continue;
		}
		int nr_ex=first_ex_SF(TypeAtoms[j]-2)+1;
		int nr_coef=first_coef_SF((TypeAtoms[j]-2))+1;
		double Orb[8] = {0,0,0,0,0,0,0,0};
		for (unsigned int ex=0; ex<Thakkar_ns[TypeAtoms[j]-1]; ex++){
			for(int m=0; m<4; m++){
				if(Thakkar_occ[TypeAtoms[j]*8+m]==0) continue;
				if(Thakkar_n[nr_ex]==1)
					Orb[m] += Thakkar_c[nr_coef] *exp(-Thakkar_z[nr_ex]*r);
				else
					Orb[m] += Thakkar_c[nr_coef] * pow(r,Thakkar_n[nr_ex]-1) *exp(-Thakkar_z[nr_ex]*r);
				nr_coef++;
			}
			nr_ex++;
		}
		for (unsigned int ex=0; ex<Thakkar_np[TypeAtoms[j]-1]; ex++){
			for(int m=0; m<3; m++){
				if(Thakkar_occ[TypeAtoms[j]*8+m+4]==0) continue;
				if(Thakkar_n[nr_ex]==1)
					Orb[m+4] += Thakkar_c[nr_coef] *exp(-Thakkar_z[nr_ex]*r);

				else
					Orb[m+4] += Thakkar_c[nr_coef] * pow(r,Thakkar_n[nr_ex]-1) *exp(-Thakkar_z[nr_ex]*r);
				nr_coef++;
			}
			nr_ex++;
		}
		for (unsigned int ex=0; ex<Thakkar_nd[TypeAtoms[j]-1]; ex++){
			if(Thakkar_occ[TypeAtoms[j]*8+7]==0) continue;
			if(Thakkar_n[nr_ex]==1)
				Orb[7] += Thakkar_c[nr_coef] * exp(-Thakkar_z[nr_ex]*r);
			else
				Orb[7] += Thakkar_c[nr_coef] * pow(r,Thakkar_n[nr_ex]-1) *exp(-Thakkar_z[nr_ex]*r);
			nr_coef++;
			nr_ex++;
		}
		for(int m=0; m<8; m++){
			Rho+=Thakkar_occ[(TypeAtoms[j]-1)*8+m]*pow(Orb[m],2);
			if(j==selected)
				Atom_Rho+=Thakkar_occ[(TypeAtoms[j]-1)*8+m]*pow(Orb[m],2);
		}
		//	    RHO = BESETZUNG * (N*C*R^(n-1)*e^(-Z*R))^2

	}

	return Atom_Rho/Rho; //radial Y(lm) unimportant, since it will cross out
}

bool calculate_structure_factors(string &hkl_filename, string &cif, WFN &wave, bool debug, int accuracy, ofstream &file){
	int* atom_z = new int[wave.get_ncen()];
	double* x = new double[wave.get_ncen()];
	double* y = new double[wave.get_ncen()];
	double* z = new double[wave.get_ncen()];
	double* alpha_max = new double[wave.get_ncen()];
	int*max_l = new int [wave.get_ncen()];
	unsigned int* num_points= new unsigned int[wave.get_ncen()];
	int max_l_overall = 0;

#ifdef _WIN64
	time_t start = time(NULL);
#else
	struct timeval t1, t2;

	gettimeofday(&t1, 0);
#endif

	vector< vector <int> > hkl;
	string line;
	hkl.resize(3);
	ifstream hkl_input(hkl_filename.c_str(),ios::in);
    hkl_input.seekg(0,hkl_input.beg);
    while (!hkl_input.eof()){
        getline(hkl_input,line);
        if(hkl_input.eof())
        	break;
        for(int i=0; i<3; i++){
        	string temp=line.substr(4*i+1,3);
        	temp.erase(remove_if(temp.begin(),temp.end(), ::isspace),temp.end());
            hkl[i].push_back(stoi(temp));
        }
        if(hkl[0][hkl[0].size()-1]==0&&hkl[1][hkl[0].size()-1]==0&&hkl[2][hkl[0].size()-1]==0){
        	if(debug) file << "popping back 0 0 0" << endl;
        	for(int i=0; i<3; i++)
        		hkl[i].pop_back();
        }
    }
    hkl_input.close();

    if(debug)
    	file << "Reflections read! Nr of reflections: " << hkl[0].size() << endl;

	double rcm[3][3];
	if(debug)
		file << "starting to read cif!" << endl;
	ifstream cif_input(cif.c_str(),ios::in);
	vector<bool> found;
	found.resize(7);
	double a=0.0,b=0.0,c=0.0,v = 0.0;
	double alpha=0.0,beta=0.0,gamma = 0.0;
	vector <string> cell_keywords;
	cell_keywords.push_back("_cell_length_a");
	cell_keywords.push_back("_cell_length_b");
	cell_keywords.push_back("_cell_length_c");
	cell_keywords.push_back("_cell_angle_alpha");
	cell_keywords.push_back("_cell_angle_beta");
	cell_keywords.push_back("_cell_angle_gamma");
	cell_keywords.push_back("_cell_volume");
	while (!cif_input.eof()){
		getline(cif_input,line);
		//if(debug) file << "line in abc: "  << line << endl;
		for(unsigned int k=0; k<cell_keywords.size();k++){
			found[k]=false;
			if (line.find(cell_keywords[k])!=string::npos) {
				switch (k){
				case 0:
					a = stod(line.substr(cell_keywords[k].length(),line.find("(")));
					break;
				case 1:
					b = stod(line.substr(cell_keywords[k].length(),line.find("(")));
					break;
				case 2:
					c = stod(line.substr(cell_keywords[k].length(),line.find("(")));
					break;
				case 3:
					alpha = stod(line.substr(cell_keywords[k].length(),line.find("(")));
					break;
				case 4:
					beta = stod(line.substr(cell_keywords[k].length(),line.find("(")));
					break;
				case 5:
					gamma = stod(line.substr(cell_keywords[k].length(),line.find("(")));
					break;
				case 6:
					v = stod(line.substr(cell_keywords[k].length(),line.find("(")));
					break;
				default:
					file << "This is weird... should never get here... aborting!" << endl;
					return false;
				}
				found[k]=true;
			}
		}
		if(found[0]==true&&found[1]==true&&found[2]==true&&found[3]==true&&found[4]==true&&found[5]==true&&found[6]==true)
			break;
	}
	double ca = cos(0.0174532925199432944444444444444*alpha);
	double cb = cos(0.0174532925199432944444444444444*beta);
	double cg = cos(0.0174532925199432944444444444444*gamma);
	double sa = sin(0.0174532925199432944444444444444*alpha);
	double sb = sin(0.0174532925199432944444444444444*beta);
	double sg = sin(0.0174532925199432944444444444444*gamma);
	double V = a*b*c*sqrt(1+2*ca*cb*cg-ca*ca-cb*cb-cg*cg);
	if (V/v > 1.1 || V/v < 0.9){
		file << "Volume computed is more than 10% off, please check!" << endl;
		return false;
	}
	double a_star=b*c*sa/V;
	double b_star=a*c*sb/V;
	double c_star=a*b*sg/V;
	double ca_star=(cb*cg-ca)/(sb*sg);
	double cb_star=(cg*ca-cb)/(sg*sa);
	double cg_star=(ca*cb-cg)/(sa*sb);

	rcm[0][0] = a_star*a_star;
	rcm[0][1] = a_star*b_star*cg_star;
	rcm[0][2] = a_star*c_star*cb_star;

	rcm[1][0] = a_star*b_star*cg_star;
	rcm[1][1] = b_star*b_star;
	rcm[1][2] = b_star*c_star*ca_star;

	rcm[2][0] = a_star*c_star*cb_star;
	rcm[2][1] = b_star*c_star*ca_star;
	rcm[2][2] = c_star*c_star;

	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			rcm[i][j] < 10e-10 ? rcm[i][j] = 0.0 : rcm[i][j] = sqrt(rcm[i][j]);

	if(debug){
		file << "RCM done, now labels and asym atoms!" << endl;
		for (int i = 0; i < 3; ++i)
		    {
		        for (int j = 0; j < 3; ++j)
		        {
		            file << rcm[i][j] << ' ';
		        }
		        file << endl;
		    }
	}
	cif_input.clear();
	cif_input.seekg(0,cif_input.beg);
	vector <string> labels;
	unsigned int count_fields=0;
	unsigned int position_field[3]={0,0,0};
	unsigned int label_field=1000;
	vector <unsigned int> asym_atom_list;
	bool atoms_read=false;
	while(!cif_input.eof()&&!atoms_read){
		getline(cif_input,line);
		//if(debug) file << "line: "<< line << endl;
		if (line.find("loop_")!=string::npos) {
			if(debug) file << "found loop!" << endl;
			while(line.find("_")!=string::npos){
				getline(cif_input,line);
				if(debug) file << "line in loop field definition: " << line << endl;
				if(line.find("label")!=string::npos)
					label_field=count_fields;
				else if(line.find("fract_x")!=string::npos)
					position_field[0]=count_fields;
				else if(line.find("fract_y")!=string::npos)
					position_field[1]=count_fields;
				else if(line.find("fract_z")!=string::npos)
					position_field[2]=count_fields;
				else if(label_field==1000){
					if(debug) file << "I don't think this is the atom block.. moving on!" << endl;
					break;
				}
				count_fields++;
			}
			while(line.find("_")==string::npos&&line.length() > 3){
				if(debug) file << "Reading atom!"<< endl;
				atoms_read=true;
				stringstream s(line);
				vector <string> fields;
				fields.resize(count_fields);
				double pos[3] = {0.0,0.0,0.0};
				for (unsigned int i=0; i<count_fields; i++)
					s >> fields[i];
				pos[0]=(a*stod(fields[position_field[0]])+b*cg*stod(fields[position_field[1]])+c*cb*stod(fields[position_field[2]]))/0.529177249;
				pos[1]=(b*sg*stod(fields[position_field[1]])+c*(ca-cb*cg)/sg*stod(fields[position_field[2]]))/0.529177249;
				pos[2]=V/(a*b*sg)*stod(fields[position_field[2]])/0.529177249;
				if (debug) file << "position: " << pos[0] << " " << pos[1] << " " << pos[2] << endl;
				for (int a=0; a<wave.get_ncen(); a++){
					if(pos[0]/wave.atoms[a].x<0.95 || pos[0]/wave.atoms[a].x>1.05 || pos[1]/wave.atoms[a].y<0.95 || pos[1]/wave.atoms[a].y>1.05 || pos[2]/wave.atoms[a].z<0.95 || pos[2]/wave.atoms[a].z>1.05)
						continue;
					else{
						if(debug) file << "Found an atom: " << fields[label_field] << endl;
						labels.push_back(fields[label_field]);
						asym_atom_list.push_back(a);
					}
				}
				getline(cif_input,line);
			}
		}
	}
	cif_input.close();

	if(asym_atom_list.size()==0){
		file << "0 asym atoms is imposible! something is wrong with reading the CIF!" << endl;
		return false;
	}

	if(debug)
		file << "made it post CIF, now make grids!" << endl;

	double*** grid = new double**[asym_atom_list.size()];
	for(unsigned int i=0; i<asym_atom_list.size(); i++)
		grid[i]=new double*[4]; // GRID COORDINATES for [a][c][p] a = atom [0,ncen], c = coordinate [0=x, 1=y, 2=z, 3=becke and hirshfeld weighted density], p = point in this grid

#pragma omp parallel for
	for (int i=0; i< wave.get_ncen(); i++){
		atom_z[i] = wave.atoms[i].charge;
		x[i] = wave.atoms[i].x;
		y[i] = wave.atoms[i].y;
		z[i] = wave.atoms[i].z;
		alpha_max[i]=0.0;
		max_l[i]=0;
		for(int b=0; b< wave.get_nex(); b++){
			if(wave.get_center(b) != i+1)
				continue;
			if(wave.get_exponent(b) > alpha_max[i])
				alpha_max[i] = wave.get_exponent(b);
			if(wave.get_type(b) > max_l[i]){
				int l = wave.get_type(b);
				if (l==0)
					l = 1;
				else if (l>=1 && l<=3)
					l = 2;
				else if (l>=4 && l<=10)
					l = 3;
				else if (l>=11 && l<=20)
					l = 4;
				else if (l>=21 && l<=35)
					l = 5;
				max_l[i]=l;
				if(l > max_l_overall)
					max_l_overall = l;
			}
		}
		if(debug) file << "atom " << i << " max_alpha:" << alpha_max[i] << endl;
	}

	if(debug)
		file << "Made it through first parallel block! Atoms are there!"<<endl;

	double** alpha_min = new double*[wave.get_ncen()];
	for(unsigned int i=0; i<wave.get_ncen(); i++)
		alpha_min[i] = new double[max_l_overall];

#pragma omp parallel for
	for (int i=0; i< wave.get_ncen(); i++){
		for(int b=0; b< max_l_overall; b++)
			alpha_min[i][b]=100000000.0;
	}

#pragma omp parallel for
	for (int i=0; i< wave.get_ncen(); i++){
		for(int b=0; b< wave.get_nex(); b++){
			if(wave.get_center(b) != i+1)
				continue;
			int l = wave.get_type(b);
			if (l==1)
				l = 1;
			else if (l>=2 && l<=4)
				l = 2;
			else if (l>=5 && l<=10)
				l = 3;
			else if (l>=11 && l<=20)
				l = 4;
			else if (l>=21 && l<=35)
				l = 5;
			if(wave.get_exponent(b) < alpha_min[i][l])
				alpha_min[i][l-1] = wave.get_exponent(b);
			if(debug && i == wave.get_ncen()-1)
				file << "l= " << l << " alpha_min= " << alpha_min[i][l-1] << endl;
		}
		if(debug){
			file << "atom: " << i << " min_alpha:" << endl;
			for (int l=0; l<max_l_overall; l++) file << "   " << alpha_min[i][l] << endl;
		}
	}

	if(debug){
		file << "Made it through second parallel block! alpha_min is there! Nr of asym atoms: " << asym_atom_list.size() << " Number of all atoms: " << wave.get_ncen() <<endl;
		//Enter();
	}

	double* sum = new double[asym_atom_list.size()];
	vector < vector < vector<double> > > max_weight;
	max_weight.resize(asym_atom_list.size());
	int nr_points=0;
	double*** temp = new double**[3];
		
	for (unsigned int i = 0; i < 3; i++)
		temp[i] = new double*[asym_atom_list.size()];

	debug = true;
#pragma omp parallel for schedule(dynamic)
	for (int i=0; i< asym_atom_list.size(); i++){
		sum[i]=0;
		int min_angular=0;
		int max_angular=0;
		if(max_l[asym_atom_list[i]]<=3){
			min_angular=50;
			max_angular=110;
		}
		else if (max_l[asym_atom_list[i]]>3){
			min_angular=50;
			max_angular=146;
		}
		context_t *context = numgrid_new_atom_grid(1e-8,
				min_angular*accuracy,
				max_angular*accuracy,
				atom_z[asym_atom_list[i]],
				alpha_max[asym_atom_list[i]],
				max_l[asym_atom_list[i]],
				alpha_min[asym_atom_list[i]]
			);
		num_points[i] = numgrid_get_num_grid_points(context);

		for(unsigned int n=0; n<3; n++)
			temp[n][i] = new double[num_points[i]];
		for(int n=0; n<4; n++)
			grid[i][n] = new double[num_points[i]];

		numgrid_get_grid(context,
				wave.get_ncen(),
				asym_atom_list[i],
				x,
				y,
				z,
				atom_z,
				grid[i][0],
				grid[i][1],
				grid[i][2],
				grid[i][3]);

		numgrid_free_atom_grid(context);
		double d[3] = { grid[i][0][0] - wave.atoms[asym_atom_list[i]].x,grid[i][1][0] - wave.atoms[asym_atom_list[i]].y,grid[i][2][0] - wave.atoms[asym_atom_list[i]].z };

		max_weight[i].resize(1);
		max_weight[i][0].resize(2);
		max_weight[i][0][0] = sqrt(pow(d[0], 2) + pow(d[1], 2) + pow(d[2], 2));
		int s = 0;
		for(unsigned int p=0; p<num_points[i]; p++){
			/*if (debug)
				file << "p: " << p << endl;*/
			d[0] = grid[i][0][p] - wave.atoms[asym_atom_list[i]].x;
			d[1] = grid[i][1][p] - wave.atoms[asym_atom_list[i]].y;
			d[2] = grid[i][2][p] - wave.atoms[asym_atom_list[i]].z;
			double dist = sqrt(pow(d[0], 2) + pow(d[1], 2) + pow(d[2], 2));
			if (!is_similar(dist,max_weight[i][s][0],0.05)) {
				/*if (debug)
					file << "Adding one shell" << endl;*/
				s++;
				max_weight[i].resize(s + 1);
				max_weight[i][s].resize(2);
				max_weight[i][s][0] = dist;
			}
			if (grid[i][3][p] > max_weight[i][s][1])
				max_weight[i][s][1] = grid[i][3][p];
			temp[0][i][p] = grid[i][3][p];
			double * pos = new double[3]{grid[i][0][p],grid[i][1][p],grid[i][2][p]};
			temp[1][i][p]=compute_dens(wave,pos);
			sum[i]+=temp[1][i][p] *grid[i][3][p];
			temp[2][i][p] = compute_Hirshfeld(atom_z,asym_atom_list[i],wave,pos);
			grid[i][3][p] = temp[0][i][p] * temp[1][i][p] * temp[2][i][p];
		}
		file << "Summed density for atom: " << setw(6) << labels[i] << " is: " << fixed << setw(6) << setprecision(2) << sum[i] << " electrons" << endl;
	}

	double el_sum=0;
	for (unsigned int i=0; i<asym_atom_list.size(); i++){
		nr_points+=num_points[i];
		el_sum+=sum[i];
	}
	free(sum);
	file << "Number of points to evaluate: " << nr_points  << " with " << el_sum << " electrons in total." << endl;

	if(debug)
		file << "Becke grid with hirshfeld weights done!"<<endl;

	vector< vector <double> > k_pt;
	k_pt.resize(3);
#pragma omp parallel for
	for (int i = 0; i < 3; i++) {
		k_pt[i].resize(hkl[0].size()*2);
		for (int j = 0; j < hkl[0].size(); j++)
			k_pt[i][j] = 0.0;
	}
	vector< vector <complex<double> > > sf;
	sf.resize(asym_atom_list.size());

#pragma omp parallel for
	for(int i=0; i<asym_atom_list.size(); i++){
		sf[i].resize(k_pt[0].size());
		for(int p=0; p<sf[i].size(); p++)
			sf[i][p]=complex<double>(0.0,0.0);
	}

	if(debug)
		file << "Initialized FFs" << endl;

	//Still need to read the sym matrices
	int*** sym = new int**[3];
	for (int i = 0; i < 3; i++) {
		sym[i] = new int*[3];
		for (int j = 0; j < 3; j++) {
			sym[i][j] = new int[2];
			i == j ? sym[i][j][0] = 1 : sym[i][j][0] = 0;
			if (i == 1)
				i == j ? sym[i][j][1] = 1 : sym[i][j][1] = 0;
			else
				i == j ? sym[i][j][1] = -1 : sym[i][j][1] = 0;
		}
	}

	for (int s = 0; s < 2; s++) {
		if (debug) {
			file << "symmetry element: " << s << " Matrix:" << endl;
			for (int i = 0; i < 3; i++) {
				for (int j = 0; j < 3; j++)
					file << sym[i][j][s] << " ";
				file << endl;
			}
			file << "RCM: " << endl;
			for (int i = 0; i < 3; i++) {
				for (int j = 0; j < 3; j++)
					file << rcm[i][j] << " ";
				file << endl;
			}
		}
		
		//#pragma omp parallel for
		for (int ref = 0; ref < hkl[0].size(); ref++) {

			double d[3] = { 0.0,0.0,0.0 };
			if (debug)
				file << "RCM_SYMM: " << endl;
			for (int x = 0; x < 3; x++) {
				for (int h = 0; h < 3; h++) {
					double rcm_sym=0.0;
					for (int j = 0; j < 3; j++) 
						rcm_sym += rcm[x][j] * sym[j][h][s];
					if (debug) file << rcm_sym << " ";
					k_pt[x][ref+s*hkl[0].size()] += 2 * 3.141592653589793 * rcm_sym * hkl[h][ref] * 0.529177249;
				}
				if (debug) file << endl;
			}
			if (debug) {
				file << "k_point: " << setprecision(6) << k_pt[0][ref+s*hkl[0].size()] << " ";
				file << setprecision(6) << k_pt[1][ref+s*hkl[0].size()] << " ";
				file << setprecision(6) << k_pt[2][ref+s*hkl[0].size()] << " hkl: ";
				for (int h = 0; h < 3; h++)
					file << setw(4) << hkl[h][ref];
				file << endl;
			}
			for (unsigned int i = 0; i < asym_atom_list.size(); i++) {
				/*if (debug) {
					file << "Atom: " << labels[i] << endl;
					file << "Nr of Points: " << num_points[i] << endl;
				}*/
				for (unsigned int p = 0; p < num_points[i]; p++) {
					d[0] = grid[i][0][p] - wave.atoms[asym_atom_list[i]].x;
					d[1] = grid[i][1][p] - wave.atoms[asym_atom_list[i]].y;
					d[2] = grid[i][2][p] - wave.atoms[asym_atom_list[i]].z;
					double dist = sqrt(pow(d[0], 2) + pow(d[1], 2) + pow(d[2], 2));
					int shell = 0;
					for (unsigned int n = 0; n < max_weight[i].size(); n++) {
						//file << "s: " << s << " n: " << n << " max_weight: " << max_weight[i][n][0] << " dist: " << dist << endl;
						if (!is_similar(max_weight[i][n][0], dist, 0.05))
							shell++;
						else
							break;
					}
					if (temp[0][i][p] < 0.001 * max_weight[i][shell][1])
						continue;
					complex<double> work(0.0, k_pt[0][ref+s*hkl[0].size()] * d[0] + k_pt[1][ref+s*hkl[0].size()] * d[1] + k_pt[2][ref+s*hkl[0].size()] * d[2]);
					if (debug&&ref == 0 && i == 0) {
						file << "d: ";
						file << scientific << showpoint << setprecision(8) << setw(16) << sqrt(pow(d[0], 2) + pow(d[1], 2) + pow(d[2], 2)) << " bw: ";
						file << scientific << showpoint << setprecision(8) << setw(16) << temp[0][i][p] << " rho: ";
						file << scientific << showpoint << setprecision(8) << setw(16) << temp[1][i][p] << " hw: ";
						file << scientific << showpoint << setprecision(8) << setw(16) << temp[2][i][p] << " work: ";
						file << scientific << showpoint << setprecision(8) << setw(16) << imag(work) << " grid: ";
						file << scientific << showpoint << setprecision(8) << setw(16) << grid[i][3][p] << " exp(work): ";
						file << scientific << showpoint << setprecision(8) << setw(16) << real(exp(work)) << ",";
						file << scientific << showpoint << setprecision(8) << setw(16) << imag(exp(work)) << " sf: ";
						file << scientific << showpoint << setprecision(8) << setw(16) << real(complex<double>(grid[i][3][p], 0.0)*exp(work)) << ",";
						file << scientific << showpoint << setprecision(8) << setw(16) << imag(complex<double>(grid[i][3][p], 0.0)*exp(work)) << endl;
					}
					sf[i][ref+s*hkl[0].size()] += complex<double>(complex<double>(grid[i][3][p], 0.0)*exp(work));
				}
			}
		}
	}

	if(debug)
		file << "SFs are made, now just write them!"<<endl;

	ofstream hkl_file("SFs_key.tsc_part",ios::out);
	for(unsigned int p=0; p<hkl[0].size(); p++){
		hkl_file << setw(4) << hkl[0][p] << " ";
		hkl_file << setw(4) << hkl[1][p] << " ";
		hkl_file << setw(4) << hkl[2][p] << endl;
	}
	hkl_file.close();

	for(unsigned int i=0; i<asym_atom_list.size(); i++){
		ofstream sf_file(labels[i]+"_SFs.tsc_part", ios::out);
		for(unsigned int p=0; p<sf[i].size(); p++){
			sf_file << fixed << setw(8) << setprecision(5) << real(sf[i][p]) << ",";
			sf_file << fixed << setprecision(5) << imag(sf[i][p]) << endl;
		}
		sf_file.close();
	}


	ofstream tsc_file("experimental.tsc", ios::out);

	tsc_file << "SYMM: 1 0 0 0 1 0 0 0 1" << endl;
	tsc_file << "atoms: ";
	for (unsigned int i = 0; i < asym_atom_list.size(); i++)
		tsc_file << labels[i] << " ";
	tsc_file << endl << "data:" << endl;

	for (unsigned int p = 0; p < hkl[0].size(); p++) {
		tsc_file << setw(4) << hkl[0][p] << " "
			<< setw(4) << hkl[1][p] << " "
			<< setw(4) << hkl[2][p] << " ";
		for(unsigned int i=0; i < asym_atom_list.size(); i++)
			tsc_file << fixed << setw(8) << setprecision(5) << real(sf[i][p]) << ","
				<< fixed << setprecision(5) << imag(sf[i][p]) << " ";
		tsc_file << endl;
	}
	tsc_file.close();

#ifdef _WIN64
	time_t end = time(NULL);

	//	int diff = end - start;

	if (end - start < 60) printf("Time to calculate: %10lld s\n", end - start);
	else if (end - start < 3600) printf("Time to calculate: %10lld m\n", (end - start) / 60);
	else printf("Time to calculate: %10lld h\n", (end - start) / 3600);
#else
	gettimeofday(&t2, 0);

	double time2 = (1000000.0*(t2.tv_sec - t1.tv_sec) + t2.tv_usec - t1.tv_usec) / 1000000.0;

	if (time2<60) printf("Time to calculate: %4.1lf s\n", time2);
	else if (time2 < 3600) printf("Time to calculate: %10.1lf m\n", time2 / 60);
	else printf("Time to calculate: %10.1lf h\n", time2 / 3600);

#endif

	return true;
}


